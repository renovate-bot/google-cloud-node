// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, tool) {
  // [START dialogflow_v2beta1_generated_Tools_CreateTool_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The project/location to create tool for. Format:
   *  `projects/<Project ID>/locations/<Location ID>`
   */
  // const parent = 'abc123'
  /**
   *  Required. The tool to create.
   */
  // const tool = {}
  /**
   *  Optional. The ID to use for the tool, which will become the final
   *  component of the tool's resource name.
   *  The tool ID must be compliant with the regression formula
   *  `[a-zA-Z][a-zA-Z0-9_-]*` with the characters length in range of [3,64].
   *  If the field is not provide, an Id will be auto-generated.
   *  If the field is provided, the caller is responsible for
   *  1. the uniqueness of the ID, otherwise the request will be rejected.
   *  2. the consistency for whether to use custom ID or not under a project to
   *  better ensure uniqueness.
   */
  // const toolId = 'abc123'

  // Imports the Dialogflow library
  const {ToolsClient} = require('@google-cloud/dialogflow').v2beta1;

  // Instantiates a client
  const dialogflowClient = new ToolsClient();

  async function callCreateTool() {
    // Construct request
    const request = {
      parent,
      tool,
    };

    // Run request
    const response = await dialogflowClient.createTool(request);
    console.log(response);
  }

  callCreateTool();
  // [END dialogflow_v2beta1_generated_Tools_CreateTool_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
