// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/oracle_database_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './oracle_database_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export class OracleDatabaseClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('oracledatabase');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  oracleDatabaseStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of OracleDatabaseClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new OracleDatabaseClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof OracleDatabaseClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'oracledatabase.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      autonomousDatabasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}'
      ),
      autonomousDatabaseBackupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDatabaseBackups/{autonomous_database_backup}'
      ),
      autonomousDatabaseCharacterSetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDatabaseCharacterSets/{autonomous_database_character_set}'
      ),
      autonomousDbVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/autonomousDbVersions/{autonomous_db_version}'
      ),
      cloudExadataInfrastructurePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}'
      ),
      cloudVmClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}'
      ),
      databasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/databases/{database}'
      ),
      databaseCharacterSetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/databaseCharacterSets/{database_character_set}'
      ),
      dbServerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}/dbServers/{db_server}'
      ),
      dbSystemPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dbSystems/{db_system}'
      ),
      dbSystemInitialStorageSizePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dbSystemInitialStorageSizes/{db_system_initial_storage_size}'
      ),
      dbSystemShapePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dbSystemShapes/{db_system_shape}'
      ),
      dbVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dbVersions/{db_version}'
      ),
      entitlementPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entitlements/{entitlement}'
      ),
      exadbVmClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/exadbVmClusters/{exadb_vm_cluster}'
      ),
      exascaleDbStorageVaultPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}'
      ),
      giVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/giVersions/{gi_version}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      minorVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/giVersions/{gi_version}/minorVersions/{minor_version}'
      ),
      odbNetworkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/odbNetworks/{odb_network}'
      ),
      odbSubnetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}'
      ),
      pluggableDatabasePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/pluggableDatabases/{pluggable_database}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationCloudVmClusterDbNodesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}/dbNodes/{db_node}'
      ),
      projectLocationExadbVmClusterDbNodesPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/exadbVmClusters/{exadb_vm_cluster}/dbNodes/{db_node}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCloudExadataInfrastructures:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'cloudExadataInfrastructures'),
      listCloudVmClusters:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'cloudVmClusters'),
      listEntitlements:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'entitlements'),
      listDbServers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbServers'),
      listDbNodes:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbNodes'),
      listGiVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'giVersions'),
      listMinorVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'minorVersions'),
      listDbSystemShapes:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbSystemShapes'),
      listAutonomousDatabases:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'autonomousDatabases'),
      listAutonomousDbVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'autonomousDbVersions'),
      listAutonomousDatabaseCharacterSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'autonomousDatabaseCharacterSets'),
      listAutonomousDatabaseBackups:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'autonomousDatabaseBackups'),
      listOdbNetworks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'odbNetworks'),
      listOdbSubnets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'odbSubnets'),
      listExadbVmClusters:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'exadbVmClusters'),
      listExascaleDbStorageVaults:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'exascaleDbStorageVaults'),
      listDbSystemInitialStorageSizes:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbSystemInitialStorageSizes'),
      listDatabases:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'databases'),
      listPluggableDatabases:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'pluggableDatabases'),
      listDbSystems:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbSystems'),
      listDbVersions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dbVersions'),
      listDatabaseCharacterSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'databaseCharacterSets')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createCloudExadataInfrastructureResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.CloudExadataInfrastructure') as gax.protobuf.Type;
    const createCloudExadataInfrastructureMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteCloudExadataInfrastructureResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteCloudExadataInfrastructureMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createCloudVmClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.CloudVmCluster') as gax.protobuf.Type;
    const createCloudVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteCloudVmClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteCloudVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const createAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const updateAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const updateAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const restoreAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const restoreAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const stopAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const stopAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const startAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const startAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const restartAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const restartAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const switchoverAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const switchoverAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const failoverAutonomousDatabaseResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.AutonomousDatabase') as gax.protobuf.Type;
    const failoverAutonomousDatabaseMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createOdbNetworkResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OdbNetwork') as gax.protobuf.Type;
    const createOdbNetworkMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteOdbNetworkResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteOdbNetworkMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createOdbSubnetResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OdbSubnet') as gax.protobuf.Type;
    const createOdbSubnetMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteOdbSubnetResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteOdbSubnetMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createExadbVmClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.ExadbVmCluster') as gax.protobuf.Type;
    const createExadbVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteExadbVmClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteExadbVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const updateExadbVmClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.ExadbVmCluster') as gax.protobuf.Type;
    const updateExadbVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const removeVirtualMachineExadbVmClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.ExadbVmCluster') as gax.protobuf.Type;
    const removeVirtualMachineExadbVmClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createExascaleDbStorageVaultResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.ExascaleDbStorageVault') as gax.protobuf.Type;
    const createExascaleDbStorageVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteExascaleDbStorageVaultResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteExascaleDbStorageVaultMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const createDbSystemResponse = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.DbSystem') as gax.protobuf.Type;
    const createDbSystemMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteDbSystemResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteDbSystemMetadata = protoFilesRoot.lookup(
      '.google.cloud.oracledatabase.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCloudExadataInfrastructure: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCloudExadataInfrastructureResponse.decode.bind(createCloudExadataInfrastructureResponse),
        createCloudExadataInfrastructureMetadata.decode.bind(createCloudExadataInfrastructureMetadata)),
      deleteCloudExadataInfrastructure: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCloudExadataInfrastructureResponse.decode.bind(deleteCloudExadataInfrastructureResponse),
        deleteCloudExadataInfrastructureMetadata.decode.bind(deleteCloudExadataInfrastructureMetadata)),
      createCloudVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCloudVmClusterResponse.decode.bind(createCloudVmClusterResponse),
        createCloudVmClusterMetadata.decode.bind(createCloudVmClusterMetadata)),
      deleteCloudVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCloudVmClusterResponse.decode.bind(deleteCloudVmClusterResponse),
        deleteCloudVmClusterMetadata.decode.bind(deleteCloudVmClusterMetadata)),
      createAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAutonomousDatabaseResponse.decode.bind(createAutonomousDatabaseResponse),
        createAutonomousDatabaseMetadata.decode.bind(createAutonomousDatabaseMetadata)),
      updateAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAutonomousDatabaseResponse.decode.bind(updateAutonomousDatabaseResponse),
        updateAutonomousDatabaseMetadata.decode.bind(updateAutonomousDatabaseMetadata)),
      deleteAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAutonomousDatabaseResponse.decode.bind(deleteAutonomousDatabaseResponse),
        deleteAutonomousDatabaseMetadata.decode.bind(deleteAutonomousDatabaseMetadata)),
      restoreAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restoreAutonomousDatabaseResponse.decode.bind(restoreAutonomousDatabaseResponse),
        restoreAutonomousDatabaseMetadata.decode.bind(restoreAutonomousDatabaseMetadata)),
      stopAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        stopAutonomousDatabaseResponse.decode.bind(stopAutonomousDatabaseResponse),
        stopAutonomousDatabaseMetadata.decode.bind(stopAutonomousDatabaseMetadata)),
      startAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        startAutonomousDatabaseResponse.decode.bind(startAutonomousDatabaseResponse),
        startAutonomousDatabaseMetadata.decode.bind(startAutonomousDatabaseMetadata)),
      restartAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        restartAutonomousDatabaseResponse.decode.bind(restartAutonomousDatabaseResponse),
        restartAutonomousDatabaseMetadata.decode.bind(restartAutonomousDatabaseMetadata)),
      switchoverAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        switchoverAutonomousDatabaseResponse.decode.bind(switchoverAutonomousDatabaseResponse),
        switchoverAutonomousDatabaseMetadata.decode.bind(switchoverAutonomousDatabaseMetadata)),
      failoverAutonomousDatabase: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        failoverAutonomousDatabaseResponse.decode.bind(failoverAutonomousDatabaseResponse),
        failoverAutonomousDatabaseMetadata.decode.bind(failoverAutonomousDatabaseMetadata)),
      createOdbNetwork: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createOdbNetworkResponse.decode.bind(createOdbNetworkResponse),
        createOdbNetworkMetadata.decode.bind(createOdbNetworkMetadata)),
      deleteOdbNetwork: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteOdbNetworkResponse.decode.bind(deleteOdbNetworkResponse),
        deleteOdbNetworkMetadata.decode.bind(deleteOdbNetworkMetadata)),
      createOdbSubnet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createOdbSubnetResponse.decode.bind(createOdbSubnetResponse),
        createOdbSubnetMetadata.decode.bind(createOdbSubnetMetadata)),
      deleteOdbSubnet: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteOdbSubnetResponse.decode.bind(deleteOdbSubnetResponse),
        deleteOdbSubnetMetadata.decode.bind(deleteOdbSubnetMetadata)),
      createExadbVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createExadbVmClusterResponse.decode.bind(createExadbVmClusterResponse),
        createExadbVmClusterMetadata.decode.bind(createExadbVmClusterMetadata)),
      deleteExadbVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteExadbVmClusterResponse.decode.bind(deleteExadbVmClusterResponse),
        deleteExadbVmClusterMetadata.decode.bind(deleteExadbVmClusterMetadata)),
      updateExadbVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateExadbVmClusterResponse.decode.bind(updateExadbVmClusterResponse),
        updateExadbVmClusterMetadata.decode.bind(updateExadbVmClusterMetadata)),
      removeVirtualMachineExadbVmCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        removeVirtualMachineExadbVmClusterResponse.decode.bind(removeVirtualMachineExadbVmClusterResponse),
        removeVirtualMachineExadbVmClusterMetadata.decode.bind(removeVirtualMachineExadbVmClusterMetadata)),
      createExascaleDbStorageVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createExascaleDbStorageVaultResponse.decode.bind(createExascaleDbStorageVaultResponse),
        createExascaleDbStorageVaultMetadata.decode.bind(createExascaleDbStorageVaultMetadata)),
      deleteExascaleDbStorageVault: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteExascaleDbStorageVaultResponse.decode.bind(deleteExascaleDbStorageVaultResponse),
        deleteExascaleDbStorageVaultMetadata.decode.bind(deleteExascaleDbStorageVaultMetadata)),
      createDbSystem: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDbSystemResponse.decode.bind(createDbSystemResponse),
        createDbSystemMetadata.decode.bind(createDbSystemMetadata)),
      deleteDbSystem: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDbSystemResponse.decode.bind(deleteDbSystemResponse),
        deleteDbSystemMetadata.decode.bind(deleteDbSystemMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.oracledatabase.v1.OracleDatabase', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.oracleDatabaseStub) {
      return this.oracleDatabaseStub;
    }

    // Put together the "service stub" for
    // google.cloud.oracledatabase.v1.OracleDatabase.
    this.oracleDatabaseStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.oracledatabase.v1.OracleDatabase') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.oracledatabase.v1.OracleDatabase,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const oracleDatabaseStubMethods =
        ['listCloudExadataInfrastructures', 'getCloudExadataInfrastructure', 'createCloudExadataInfrastructure', 'deleteCloudExadataInfrastructure', 'listCloudVmClusters', 'getCloudVmCluster', 'createCloudVmCluster', 'deleteCloudVmCluster', 'listEntitlements', 'listDbServers', 'listDbNodes', 'listGiVersions', 'listMinorVersions', 'listDbSystemShapes', 'listAutonomousDatabases', 'getAutonomousDatabase', 'createAutonomousDatabase', 'updateAutonomousDatabase', 'deleteAutonomousDatabase', 'restoreAutonomousDatabase', 'generateAutonomousDatabaseWallet', 'listAutonomousDbVersions', 'listAutonomousDatabaseCharacterSets', 'listAutonomousDatabaseBackups', 'stopAutonomousDatabase', 'startAutonomousDatabase', 'restartAutonomousDatabase', 'switchoverAutonomousDatabase', 'failoverAutonomousDatabase', 'listOdbNetworks', 'getOdbNetwork', 'createOdbNetwork', 'deleteOdbNetwork', 'listOdbSubnets', 'getOdbSubnet', 'createOdbSubnet', 'deleteOdbSubnet', 'listExadbVmClusters', 'getExadbVmCluster', 'createExadbVmCluster', 'deleteExadbVmCluster', 'updateExadbVmCluster', 'removeVirtualMachineExadbVmCluster', 'listExascaleDbStorageVaults', 'getExascaleDbStorageVault', 'createExascaleDbStorageVault', 'deleteExascaleDbStorageVault', 'listDbSystemInitialStorageSizes', 'listDatabases', 'getDatabase', 'listPluggableDatabases', 'getPluggableDatabase', 'listDbSystems', 'getDbSystem', 'createDbSystem', 'deleteDbSystem', 'listDbVersions', 'listDatabaseCharacterSets'];
    for (const methodName of oracleDatabaseStubMethods) {
      const callPromise = this.oracleDatabaseStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.oracleDatabaseStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'oracledatabase.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'oracledatabase.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Exadata Infrastructure.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Cloud Exadata Infrastructure in the following
 *   format:
 *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_cloud_exadata_infrastructure.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetCloudExadataInfrastructure_async
 */
  getCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|undefined, {}|undefined
      ]>;
  getCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
          protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
          protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
          protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
          protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCloudExadataInfrastructure request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCloudExadataInfrastructure response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCloudExadataInfrastructure(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure,
        protos.google.cloud.oracledatabase.v1.IGetCloudExadataInfrastructureRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCloudExadataInfrastructure response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single VM Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Cloud VM Cluster in the following format:
 *   projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_cloud_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetCloudVmCluster_async
 */
  getCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|undefined, {}|undefined
      ]>;
  getCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCloudVmCluster request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCloudVmCluster response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCloudVmCluster(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetCloudVmClusterRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCloudVmCluster response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets the details of a single Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetAutonomousDatabase_async
 */
  getAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|undefined, {}|undefined
      ]>;
  getAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
          protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
          protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
          protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
          protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getAutonomousDatabase request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getAutonomousDatabase response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getAutonomousDatabase(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase,
        protos.google.cloud.oracledatabase.v1.IGetAutonomousDatabaseRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getAutonomousDatabase response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Generates a wallet for an Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {google.cloud.oracledatabase.v1.GenerateType} [request.type]
 *   Optional. The type of wallet generation for the Autonomous Database. The
 *   default value is SINGLE.
 * @param {boolean} [request.isRegional]
 *   Optional. True when requesting regional connection strings in PDB connect
 *   info, applicable to cross-region Data Guard only.
 * @param {string} request.password
 *   Required. The password used to encrypt the keys inside the wallet. The
 *   password must be a minimum of 8 characters.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse|GenerateAutonomousDatabaseWalletResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.generate_autonomous_database_wallet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GenerateAutonomousDatabaseWallet_async
 */
  generateAutonomousDatabaseWallet(
      request?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|undefined, {}|undefined
      ]>;
  generateAutonomousDatabaseWallet(
      request: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|null|undefined,
          {}|null|undefined>): void;
  generateAutonomousDatabaseWallet(
      request: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|null|undefined,
          {}|null|undefined>): void;
  generateAutonomousDatabaseWallet(
      request?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
          protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('generateAutonomousDatabaseWallet request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('generateAutonomousDatabaseWallet response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.generateAutonomousDatabaseWallet(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse,
        protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('generateAutonomousDatabaseWallet response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single ODB Network.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the OdbNetwork in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.OdbNetwork|OdbNetwork}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_odb_network.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetOdbNetwork_async
 */
  getOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbNetwork,
        protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|undefined, {}|undefined
      ]>;
  getOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbNetwork,
          protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|null|undefined,
          {}|null|undefined>): void;
  getOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbNetwork,
          protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|null|undefined,
          {}|null|undefined>): void;
  getOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IOdbNetwork,
          protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbNetwork,
          protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbNetwork,
        protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getOdbNetwork request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IOdbNetwork,
        protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getOdbNetwork response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getOdbNetwork(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IOdbNetwork,
        protos.google.cloud.oracledatabase.v1.IGetOdbNetworkRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getOdbNetwork response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single ODB Subnet.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the OdbSubnet in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.OdbSubnet|OdbSubnet}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_odb_subnet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetOdbSubnet_async
 */
  getOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbSubnet,
        protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|undefined, {}|undefined
      ]>;
  getOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbSubnet,
          protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|null|undefined,
          {}|null|undefined>): void;
  getOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbSubnet,
          protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|null|undefined,
          {}|null|undefined>): void;
  getOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IOdbSubnet,
          protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IOdbSubnet,
          protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbSubnet,
        protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getOdbSubnet request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IOdbSubnet,
        protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getOdbSubnet response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getOdbSubnet(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IOdbSubnet,
        protos.google.cloud.oracledatabase.v1.IGetOdbSubnetRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getOdbSubnet response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single Exadb (Exascale) VM Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the ExadbVmCluster in the following format:
 *   projects/{project}/locations/{location}/exadbVmClusters/{exadb_vm_cluster}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.ExadbVmCluster|ExadbVmCluster}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetExadbVmCluster_async
 */
  getExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|undefined, {}|undefined
      ]>;
  getExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|null|undefined,
          {}|null|undefined>): void;
  getExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
          protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getExadbVmCluster request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getExadbVmCluster response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getExadbVmCluster(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster,
        protos.google.cloud.oracledatabase.v1.IGetExadbVmClusterRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getExadbVmCluster response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single ExascaleDB Storage Vault.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the ExascaleDbStorageVault in the following format:
 *   projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault|ExascaleDbStorageVault}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_exascale_db_storage_vault.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetExascaleDbStorageVault_async
 */
  getExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
        protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|undefined, {}|undefined
      ]>;
  getExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
          protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|null|undefined,
          {}|null|undefined>): void;
  getExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
          protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|null|undefined,
          {}|null|undefined>): void;
  getExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
          protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
          protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
        protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getExascaleDbStorageVault request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
        protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getExascaleDbStorageVault response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getExascaleDbStorageVault(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault,
        protos.google.cloud.oracledatabase.v1.IGetExascaleDbStorageVaultRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getExascaleDbStorageVault response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Database resource in the following format:
 *   projects/{project}/locations/{region}/databases/{database}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.Database|Database}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetDatabase_async
 */
  getDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabase,
        protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|undefined, {}|undefined
      ]>;
  getDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IDatabase,
          protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IDatabase,
          protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IDatabase,
          protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IDatabase,
          protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabase,
        protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getDatabase request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IDatabase,
        protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getDatabase response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getDatabase(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IDatabase,
        protos.google.cloud.oracledatabase.v1.IGetDatabaseRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getDatabase response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single PluggableDatabase.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the PluggableDatabase resource in the following
 *   format:
 *   projects/{project}/locations/{region}/pluggableDatabases/{pluggable_database}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.PluggableDatabase|PluggableDatabase}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_pluggable_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetPluggableDatabase_async
 */
  getPluggableDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
        protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|undefined, {}|undefined
      ]>;
  getPluggableDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
          protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getPluggableDatabase(
      request: protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
          protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|null|undefined,
          {}|null|undefined>): void;
  getPluggableDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
          protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
          protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
        protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getPluggableDatabase request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
        protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getPluggableDatabase response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getPluggableDatabase(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase,
        protos.google.cloud.oracledatabase.v1.IGetPluggableDatabaseRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getPluggableDatabase response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single DbSystem.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the DbSystem in the following format:
 *   projects/{project}/locations/{location}/dbSystems/{db_system}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.oracledatabase.v1.DbSystem|DbSystem}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.get_db_system.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_GetDbSystem_async
 */
  getDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystem,
        protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|undefined, {}|undefined
      ]>;
  getDbSystem(
      request: protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IDbSystem,
          protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|null|undefined,
          {}|null|undefined>): void;
  getDbSystem(
      request: protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest,
      callback: Callback<
          protos.google.cloud.oracledatabase.v1.IDbSystem,
          protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|null|undefined,
          {}|null|undefined>): void;
  getDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.oracledatabase.v1.IDbSystem,
          protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.oracledatabase.v1.IDbSystem,
          protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystem,
        protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getDbSystem request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.oracledatabase.v1.IDbSystem,
        protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getDbSystem response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getDbSystem(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.oracledatabase.v1.IDbSystem,
        protos.google.cloud.oracledatabase.v1.IGetDbSystemRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getDbSystem response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Creates a new Exadata Infrastructure in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for CloudExadataInfrastructure in the following
 *   format: projects/{project}/locations/{location}.
 * @param {string} request.cloudExadataInfrastructureId
 *   Required. The ID of the Exadata Infrastructure to create. This value is
 *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
 *   63 characters in length. The value must start with a letter and end with a
 *   letter or a number.
 * @param {google.cloud.oracledatabase.v1.CloudExadataInfrastructure} request.cloudExadataInfrastructure
 *   Required. Details of the Exadata Infrastructure instance to create.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_exadata_infrastructure.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudExadataInfrastructure_async
 */
  createCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.ICreateCloudExadataInfrastructureRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createCloudExadataInfrastructure response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createCloudExadataInfrastructure request %j', request);
    return this.innerApiCalls.createCloudExadataInfrastructure(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createCloudExadataInfrastructure response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createCloudExadataInfrastructure()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_exadata_infrastructure.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudExadataInfrastructure_async
 */
  async checkCreateCloudExadataInfrastructureProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createCloudExadataInfrastructure long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCloudExadataInfrastructure, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single Exadata Infrastructure.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Cloud Exadata Infrastructure in the following
 *   format:
 *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloud_exadata_infrastructure}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.force]
 *   Optional. If set to true, all VM clusters for this Exadata Infrastructure
 *   will be deleted. An Exadata Infrastructure can only be deleted once all its
 *   VM clusters have been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_exadata_infrastructure.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudExadataInfrastructure_async
 */
  deleteCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCloudExadataInfrastructure(
      request: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCloudExadataInfrastructure(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudExadataInfrastructureRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteCloudExadataInfrastructure response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteCloudExadataInfrastructure request %j', request);
    return this.innerApiCalls.deleteCloudExadataInfrastructure(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteCloudExadataInfrastructure response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteCloudExadataInfrastructure()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_exadata_infrastructure.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudExadataInfrastructure_async
 */
  async checkDeleteCloudExadataInfrastructureProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteCloudExadataInfrastructure long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCloudExadataInfrastructure, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new VM Cluster in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in the following format:
 *   projects/{project}/locations/{location}.
 * @param {string} request.cloudVmClusterId
 *   Required. The ID of the VM Cluster to create. This value is restricted
 *   to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
 *   characters in length. The value must start with a letter and end with
 *   a letter or a number.
 * @param {google.cloud.oracledatabase.v1.CloudVmCluster} request.cloudVmCluster
 *   Required. The resource being created
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudVmCluster_async
 */
  createCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.ICreateCloudVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createCloudVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createCloudVmCluster request %j', request);
    return this.innerApiCalls.createCloudVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createCloudVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createCloudVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_cloud_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateCloudVmCluster_async
 */
  async checkCreateCloudVmClusterProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.CloudVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createCloudVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCloudVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.CloudVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single VM Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Cloud VM Cluster in the following format:
 *   projects/{project}/locations/{location}/cloudVmClusters/{cloud_vm_cluster}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {boolean} [request.force]
 *   Optional. If set to true, all child resources for the VM Cluster will be
 *   deleted. A VM Cluster can only be deleted once all its child resources have
 *   been deleted.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudVmCluster_async
 */
  deleteCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCloudVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteCloudVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteCloudVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteCloudVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteCloudVmCluster request %j', request);
    return this.innerApiCalls.deleteCloudVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteCloudVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteCloudVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_cloud_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteCloudVmCluster_async
 */
  async checkDeleteCloudVmClusterProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteCloudVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCloudVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new Autonomous Database in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in the following format:
 *   projects/{project}/locations/{location}.
 * @param {string} request.autonomousDatabaseId
 *   Required. The ID of the Autonomous Database to create. This value is
 *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
 *   63 characters in length. The value must start with a letter and end with a
 *   letter or a number.
 * @param {google.cloud.oracledatabase.v1.AutonomousDatabase} request.autonomousDatabase
 *   Required. The Autonomous Database being created.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateAutonomousDatabase_async
 */
  createAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.ICreateAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createAutonomousDatabase request %j', request);
    return this.innerApiCalls.createAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateAutonomousDatabase_async
 */
  async checkCreateAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Updates the parameters of a single Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   Exadata resource by the update. The fields specified in the update_mask are
 *   relative to the resource, not the full request. A field will be overwritten
 *   if it is in the mask. If the user does not provide a mask then all fields
 *   will be overwritten.
 * @param {google.cloud.oracledatabase.v1.AutonomousDatabase} request.autonomousDatabase
 *   Required. The resource being updated
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.update_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_UpdateAutonomousDatabase_async
 */
  updateAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IUpdateAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IUpdateAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IUpdateAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IUpdateAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'autonomous_database.name': request.autonomousDatabase!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateAutonomousDatabase request %j', request);
    return this.innerApiCalls.updateAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.update_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_UpdateAutonomousDatabase_async
 */
  async checkUpdateAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('updateAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the resource in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteAutonomousDatabase_async
 */
  deleteAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteAutonomousDatabase request %j', request);
    return this.innerApiCalls.deleteAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteAutonomousDatabase_async
 */
  async checkDeleteAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Restores a single Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {google.protobuf.Timestamp} request.restoreTime
 *   Required. The time and date to restore the database to.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.restore_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RestoreAutonomousDatabase_async
 */
  restoreAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  restoreAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restoreAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restoreAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IRestoreAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('restoreAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('restoreAutonomousDatabase request %j', request);
    return this.innerApiCalls.restoreAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('restoreAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `restoreAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.restore_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RestoreAutonomousDatabase_async
 */
  async checkRestoreAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('restoreAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Stops an Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.stop_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_StopAutonomousDatabase_async
 */
  stopAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IStopAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  stopAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IStopAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  stopAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IStopAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  stopAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IStopAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('stopAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('stopAutonomousDatabase request %j', request);
    return this.innerApiCalls.stopAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('stopAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `stopAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.stop_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_StopAutonomousDatabase_async
 */
  async checkStopAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('stopAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.stopAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Starts an Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.start_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_StartAutonomousDatabase_async
 */
  startAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IStartAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  startAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IStartAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  startAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IStartAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  startAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IStartAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('startAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('startAutonomousDatabase request %j', request);
    return this.innerApiCalls.startAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('startAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `startAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.start_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_StartAutonomousDatabase_async
 */
  async checkStartAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('startAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.startAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Restarts an Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.restart_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RestartAutonomousDatabase_async
 */
  restartAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IRestartAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  restartAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IRestartAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restartAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IRestartAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  restartAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IRestartAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('restartAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('restartAutonomousDatabase request %j', request);
    return this.innerApiCalls.restartAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('restartAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `restartAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.restart_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RestartAutonomousDatabase_async
 */
  async checkRestartAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('restartAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restartAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Initiates a switchover of specified autonomous database to the associated
 * peer database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {string} request.peerAutonomousDatabase
 *   Required. The peer database name to switch over to.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.switchover_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_SwitchoverAutonomousDatabase_async
 */
  switchoverAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.ISwitchoverAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  switchoverAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.ISwitchoverAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  switchoverAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.ISwitchoverAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  switchoverAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.ISwitchoverAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('switchoverAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('switchoverAutonomousDatabase request %j', request);
    return this.innerApiCalls.switchoverAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('switchoverAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `switchoverAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.switchover_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_SwitchoverAutonomousDatabase_async
 */
  async checkSwitchoverAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('switchoverAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.switchoverAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Initiates a failover to target autonomous database from the associated
 * primary database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Autonomous Database in the following format:
 *   projects/{project}/locations/{location}/autonomousDatabases/{autonomous_database}.
 * @param {string} request.peerAutonomousDatabase
 *   Required. The peer database name to fail over to.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.failover_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_FailoverAutonomousDatabase_async
 */
  failoverAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IFailoverAutonomousDatabaseRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  failoverAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IFailoverAutonomousDatabaseRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  failoverAutonomousDatabase(
      request: protos.google.cloud.oracledatabase.v1.IFailoverAutonomousDatabaseRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  failoverAutonomousDatabase(
      request?: protos.google.cloud.oracledatabase.v1.IFailoverAutonomousDatabaseRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('failoverAutonomousDatabase response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('failoverAutonomousDatabase request %j', request);
    return this.innerApiCalls.failoverAutonomousDatabase(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('failoverAutonomousDatabase response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `failoverAutonomousDatabase()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.failover_autonomous_database.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_FailoverAutonomousDatabase_async
 */
  async checkFailoverAutonomousDatabaseProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('failoverAutonomousDatabase long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.failoverAutonomousDatabase, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.AutonomousDatabase, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new ODB Network in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the OdbNetwork in the following format:
 *   projects/{project}/locations/{location}.
 * @param {string} request.odbNetworkId
 *   Required. The ID of the OdbNetwork to create. This value is restricted
 *   to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
 *   characters in length. The value must start with a letter and end with
 *   a letter or a number.
 * @param {google.cloud.oracledatabase.v1.OdbNetwork} request.odbNetwork
 *   Required. Details of the OdbNetwork instance to create.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_odb_network.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateOdbNetwork_async
 */
  createOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.ICreateOdbNetworkRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.ICreateOdbNetworkRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.ICreateOdbNetworkRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.ICreateOdbNetworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createOdbNetwork response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createOdbNetwork request %j', request);
    return this.innerApiCalls.createOdbNetwork(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createOdbNetwork response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createOdbNetwork()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_odb_network.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateOdbNetwork_async
 */
  async checkCreateOdbNetworkProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.OdbNetwork, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createOdbNetwork long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createOdbNetwork, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.OdbNetwork, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single ODB Network.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the resource in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_odb_network.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteOdbNetwork_async
 */
  deleteOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteOdbNetworkRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.IDeleteOdbNetworkRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteOdbNetwork(
      request: protos.google.cloud.oracledatabase.v1.IDeleteOdbNetworkRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteOdbNetwork(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteOdbNetworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteOdbNetwork response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteOdbNetwork request %j', request);
    return this.innerApiCalls.deleteOdbNetwork(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteOdbNetwork response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteOdbNetwork()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_odb_network.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteOdbNetwork_async
 */
  async checkDeleteOdbNetworkProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteOdbNetwork long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteOdbNetwork, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new ODB Subnet in a given ODB Network.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the OdbSubnet in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {string} request.odbSubnetId
 *   Required. The ID of the OdbSubnet to create. This value is restricted
 *   to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of 63
 *   characters in length. The value must start with a letter and end with
 *   a letter or a number.
 * @param {google.cloud.oracledatabase.v1.OdbSubnet} request.odbSubnet
 *   Required. Details of the OdbSubnet instance to create.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_odb_subnet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateOdbSubnet_async
 */
  createOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.ICreateOdbSubnetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.ICreateOdbSubnetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.ICreateOdbSubnetRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.ICreateOdbSubnetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createOdbSubnet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createOdbSubnet request %j', request);
    return this.innerApiCalls.createOdbSubnet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createOdbSubnet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createOdbSubnet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_odb_subnet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateOdbSubnet_async
 */
  async checkCreateOdbSubnetProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.OdbSubnet, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createOdbSubnet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createOdbSubnet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.OdbSubnet, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single ODB Subnet.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the resource in the following format:
 *   projects/{project}/locations/{region}/odbNetworks/{odb_network}/odbSubnets/{odb_subnet}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_odb_subnet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteOdbSubnet_async
 */
  deleteOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteOdbSubnetRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.IDeleteOdbSubnetRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteOdbSubnet(
      request: protos.google.cloud.oracledatabase.v1.IDeleteOdbSubnetRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteOdbSubnet(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteOdbSubnetRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteOdbSubnet response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteOdbSubnet request %j', request);
    return this.innerApiCalls.deleteOdbSubnet(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteOdbSubnet response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteOdbSubnet()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_odb_subnet.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteOdbSubnet_async
 */
  async checkDeleteOdbSubnetProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteOdbSubnet long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteOdbSubnet, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new Exadb (Exascale) VM Cluster resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The value for parent of the ExadbVmCluster in the following
 *   format: projects/{project}/locations/{location}.
 * @param {string} request.exadbVmClusterId
 *   Required. The ID of the ExadbVmCluster to create. This value is
 *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
 *   63 characters in length. The value must start with a letter and end with a
 *   letter or a number.
 * @param {google.cloud.oracledatabase.v1.ExadbVmCluster} request.exadbVmCluster
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateExadbVmCluster_async
 */
  createExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.ICreateExadbVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.ICreateExadbVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.ICreateExadbVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.ICreateExadbVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createExadbVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createExadbVmCluster request %j', request);
    return this.innerApiCalls.createExadbVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createExadbVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createExadbVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateExadbVmCluster_async
 */
  async checkCreateExadbVmClusterProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createExadbVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createExadbVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single Exadb (Exascale) VM Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the ExadbVmCluster in the following format:
 *   projects/{project}/locations/{location}/exadbVmClusters/{exadb_vm_cluster}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteExadbVmCluster_async
 */
  deleteExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteExadbVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IDeleteExadbVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IDeleteExadbVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteExadbVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteExadbVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteExadbVmCluster request %j', request);
    return this.innerApiCalls.deleteExadbVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteExadbVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteExadbVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteExadbVmCluster_async
 */
  async checkDeleteExadbVmClusterProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteExadbVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteExadbVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Updates a single Exadb (Exascale) VM Cluster. To add virtual machines to
 * existing exadb vm cluster, only pass the node count.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. A mask specifying which fields in th VM Cluster should be
 *   updated. A field specified in the mask is overwritten. If a mask isn't
 *   provided then all the fields in the VM Cluster are overwritten.
 * @param {google.cloud.oracledatabase.v1.ExadbVmCluster} request.exadbVmCluster
 *   Required. The resource being updated.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.update_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_UpdateExadbVmCluster_async
 */
  updateExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IUpdateExadbVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IUpdateExadbVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IUpdateExadbVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IUpdateExadbVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'exadb_vm_cluster.name': request.exadbVmCluster!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateExadbVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateExadbVmCluster request %j', request);
    return this.innerApiCalls.updateExadbVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateExadbVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateExadbVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.update_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_UpdateExadbVmCluster_async
 */
  async checkUpdateExadbVmClusterProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('updateExadbVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateExadbVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Removes virtual machines from an existing exadb vm cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the ExadbVmCluster in the following format:
 *   projects/{project}/locations/{location}/exadbVmClusters/{exadb_vm_cluster}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {string[]} request.hostnames
 *   Required. The list of host names of db nodes to be removed from the
 *   ExadbVmCluster.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.remove_virtual_machine_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RemoveVirtualMachineExadbVmCluster_async
 */
  removeVirtualMachineExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IRemoveVirtualMachineExadbVmClusterRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  removeVirtualMachineExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IRemoveVirtualMachineExadbVmClusterRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  removeVirtualMachineExadbVmCluster(
      request: protos.google.cloud.oracledatabase.v1.IRemoveVirtualMachineExadbVmClusterRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  removeVirtualMachineExadbVmCluster(
      request?: protos.google.cloud.oracledatabase.v1.IRemoveVirtualMachineExadbVmClusterRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('removeVirtualMachineExadbVmCluster response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('removeVirtualMachineExadbVmCluster request %j', request);
    return this.innerApiCalls.removeVirtualMachineExadbVmCluster(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('removeVirtualMachineExadbVmCluster response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `removeVirtualMachineExadbVmCluster()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.remove_virtual_machine_exadb_vm_cluster.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_RemoveVirtualMachineExadbVmCluster_async
 */
  async checkRemoveVirtualMachineExadbVmClusterProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('removeVirtualMachineExadbVmCluster long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.removeVirtualMachineExadbVmCluster, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.ExadbVmCluster, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new ExascaleDB Storage Vault resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The value for parent of the ExascaleDbStorageVault in the
 *   following format: projects/{project}/locations/{location}.
 * @param {string} request.exascaleDbStorageVaultId
 *   Required. The ID of the ExascaleDbStorageVault to create. This value is
 *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
 *   63 characters in length. The value must start with a letter and end with a
 *   letter or a number.
 * @param {google.cloud.oracledatabase.v1.ExascaleDbStorageVault} request.exascaleDbStorageVault
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_exascale_db_storage_vault.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateExascaleDbStorageVault_async
 */
  createExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.ICreateExascaleDbStorageVaultRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.ICreateExascaleDbStorageVaultRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.ICreateExascaleDbStorageVaultRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.ICreateExascaleDbStorageVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createExascaleDbStorageVault response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createExascaleDbStorageVault request %j', request);
    return this.innerApiCalls.createExascaleDbStorageVault(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createExascaleDbStorageVault response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createExascaleDbStorageVault()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_exascale_db_storage_vault.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateExascaleDbStorageVault_async
 */
  async checkCreateExascaleDbStorageVaultProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createExascaleDbStorageVault long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createExascaleDbStorageVault, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single ExascaleDB Storage Vault.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the ExascaleDbStorageVault in the following format:
 *   projects/{project}/locations/{location}/exascaleDbStorageVaults/{exascale_db_storage_vault}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_exascale_db_storage_vault.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteExascaleDbStorageVault_async
 */
  deleteExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteExascaleDbStorageVaultRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.IDeleteExascaleDbStorageVaultRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteExascaleDbStorageVault(
      request: protos.google.cloud.oracledatabase.v1.IDeleteExascaleDbStorageVaultRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteExascaleDbStorageVault(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteExascaleDbStorageVaultRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteExascaleDbStorageVault response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteExascaleDbStorageVault request %j', request);
    return this.innerApiCalls.deleteExascaleDbStorageVault(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteExascaleDbStorageVault response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteExascaleDbStorageVault()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_exascale_db_storage_vault.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteExascaleDbStorageVault_async
 */
  async checkDeleteExascaleDbStorageVaultProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteExascaleDbStorageVault long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteExascaleDbStorageVault, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Creates a new DbSystem in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The value for parent of the DbSystem in the following format:
 *   projects/{project}/locations/{location}.
 * @param {string} request.dbSystemId
 *   Required. The ID of the DbSystem to create. This value is
 *   restricted to (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$) and must be a maximum of
 *   63 characters in length. The value must start with a letter and end with a
 *   letter or a number.
 * @param {google.cloud.oracledatabase.v1.DbSystem} request.dbSystem
 *   Required. The resource being created.
 * @param {string} [request.requestId]
 *   Optional. An optional request ID to identify requests. Specify a unique
 *   request ID so that if you must retry your request, the server will know to
 *   ignore the request if it has already been completed. The server will
 *   guarantee that for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and the
 *   request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, will ignore the second request. This prevents
 *   clients from accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_db_system.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateDbSystem_async
 */
  createDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.ICreateDbSystemRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createDbSystem(
      request: protos.google.cloud.oracledatabase.v1.ICreateDbSystemRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDbSystem(
      request: protos.google.cloud.oracledatabase.v1.ICreateDbSystemRequest,
      callback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.ICreateDbSystemRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createDbSystem response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createDbSystem request %j', request);
    return this.innerApiCalls.createDbSystem(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createDbSystem response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createDbSystem()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.create_db_system.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_CreateDbSystem_async
 */
  async checkCreateDbSystemProgress(name: string): Promise<LROperation<protos.google.cloud.oracledatabase.v1.DbSystem, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('createDbSystem long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDbSystem, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.oracledatabase.v1.DbSystem, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
/**
 * Deletes a single DbSystem.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the DbSystem in the following format:
 *   projects/{project}/locations/{location}/dbSystems/{db_system}.
 * @param {string} [request.requestId]
 *   Optional. An optional ID to identify the request. This value is used to
 *   identify duplicate requests. If you make a request with the same request ID
 *   and the original request is still in progress or completed, the server
 *   ignores the second request. This prevents clients from
 *   accidentally creating duplicate commitments.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID is
 *   not supported (00000000-0000-0000-0000-000000000000).
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_db_system.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteDbSystem_async
 */
  deleteDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteDbSystemRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteDbSystem(
      request: protos.google.cloud.oracledatabase.v1.IDeleteDbSystemRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDbSystem(
      request: protos.google.cloud.oracledatabase.v1.IDeleteDbSystemRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDbSystem(
      request?: protos.google.cloud.oracledatabase.v1.IDeleteDbSystemRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteDbSystem response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteDbSystem request %j', request);
    return this.innerApiCalls.deleteDbSystem(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteDbSystem response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteDbSystem()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.delete_db_system.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_DeleteDbSystem_async
 */
  async checkDeleteDbSystemProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>>{
    this._log.info('deleteDbSystem long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDbSystem, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.oracledatabase.v1.OperationMetadata>;
  }
 /**
 * Lists Exadata Infrastructures in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for CloudExadataInfrastructure in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Exadata infrastructures will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCloudExadataInfrastructuresAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudExadataInfrastructures(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[],
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      ]>;
  listCloudExadataInfrastructures(
      request: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>): void;
  listCloudExadataInfrastructures(
      request: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>): void;
  listCloudExadataInfrastructures(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[],
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listCloudExadataInfrastructures values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listCloudExadataInfrastructures request %j', request);
    return this.innerApiCalls
      .listCloudExadataInfrastructures(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[],
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresResponse
      ]) => {
        this._log.info('listCloudExadataInfrastructures values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listCloudExadataInfrastructures`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for CloudExadataInfrastructure in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Exadata infrastructures will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCloudExadataInfrastructuresAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudExadataInfrastructuresStream(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudExadataInfrastructures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudExadataInfrastructures stream %j', request);
    return this.descriptors.page.listCloudExadataInfrastructures.createStream(
      this.innerApiCalls.listCloudExadataInfrastructures as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCloudExadataInfrastructures`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for CloudExadataInfrastructure in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Exadata infrastructures will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure|CloudExadataInfrastructure}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_cloud_exadata_infrastructures.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListCloudExadataInfrastructures_async
 */
  listCloudExadataInfrastructuresAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudExadataInfrastructuresRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudExadataInfrastructures'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudExadataInfrastructures iterate %j', request);
    return this.descriptors.page.listCloudExadataInfrastructures.asyncIterate(
      this.innerApiCalls['listCloudExadataInfrastructures'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure>;
  }
 /**
 * Lists the VM Clusters in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The number of VM clusters to return.
 *   If unspecified, at most 50 VM clusters will be returned.
 *   The maximum value is 1,000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the page of results the server returns.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCloudVmClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudVmClusters(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      ]>;
  listCloudVmClusters(
      request: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster>): void;
  listCloudVmClusters(
      request: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster>): void;
  listCloudVmClusters(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.ICloudVmCluster>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.ICloudVmCluster>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listCloudVmClusters values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listCloudVmClusters request %j', request);
    return this.innerApiCalls
      .listCloudVmClusters(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.ICloudVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListCloudVmClustersResponse
      ]) => {
        this._log.info('listCloudVmClusters values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listCloudVmClusters`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The number of VM clusters to return.
 *   If unspecified, at most 50 VM clusters will be returned.
 *   The maximum value is 1,000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the page of results the server returns.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCloudVmClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudVmClustersStream(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudVmClusters stream %j', request);
    return this.descriptors.page.listCloudVmClusters.createStream(
      this.innerApiCalls.listCloudVmClusters as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCloudVmClusters`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The number of VM clusters to return.
 *   If unspecified, at most 50 VM clusters will be returned.
 *   The maximum value is 1,000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the page of results the server returns.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.CloudVmCluster|CloudVmCluster}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_cloud_vm_clusters.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListCloudVmClusters_async
 */
  listCloudVmClustersAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListCloudVmClustersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudVmCluster>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudVmClusters iterate %j', request);
    return this.descriptors.page.listCloudVmClusters.asyncIterate(
      this.innerApiCalls['listCloudVmClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.ICloudVmCluster>;
  }
 /**
 * Lists the entitlements in a given project.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the entitlement in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 entitlements will be returned.
 *   The maximum value is 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listEntitlementsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listEntitlements(
      request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IEntitlement[],
        protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      ]>;
  listEntitlements(
      request: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
          protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IEntitlement>): void;
  listEntitlements(
      request: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
          protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IEntitlement>): void;
  listEntitlements(
      request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
          protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IEntitlement>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
          protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IEntitlement>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IEntitlement[],
        protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IEntitlement>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listEntitlements values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listEntitlements request %j', request);
    return this.innerApiCalls
      .listEntitlements(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IEntitlement[],
        protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListEntitlementsResponse
      ]) => {
        this._log.info('listEntitlements values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listEntitlements`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the entitlement in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 entitlements will be returned.
 *   The maximum value is 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listEntitlementsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listEntitlementsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listEntitlements stream %j', request);
    return this.descriptors.page.listEntitlements.createStream(
      this.innerApiCalls.listEntitlements as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listEntitlements`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the entitlement in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 entitlements will be returned.
 *   The maximum value is 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.Entitlement|Entitlement}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_entitlements.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListEntitlements_async
 */
  listEntitlementsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListEntitlementsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IEntitlement>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listEntitlements iterate %j', request);
    return this.descriptors.page.listEntitlements.asyncIterate(
      this.innerApiCalls['listEntitlements'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IEntitlement>;
  }
 /**
 * Lists the database servers of an Exadata Infrastructure instance.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database server in the following format:
 *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 db servers will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbServersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbServers(
      request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbServer[],
        protos.google.cloud.oracledatabase.v1.IListDbServersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      ]>;
  listDbServers(
      request: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
          protos.google.cloud.oracledatabase.v1.IListDbServersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbServer>): void;
  listDbServers(
      request: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
          protos.google.cloud.oracledatabase.v1.IListDbServersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbServer>): void;
  listDbServers(
      request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
          protos.google.cloud.oracledatabase.v1.IListDbServersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbServer>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
          protos.google.cloud.oracledatabase.v1.IListDbServersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbServer>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbServer[],
        protos.google.cloud.oracledatabase.v1.IListDbServersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      protos.google.cloud.oracledatabase.v1.IListDbServersResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbServer>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbServers values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbServers request %j', request);
    return this.innerApiCalls
      .listDbServers(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbServer[],
        protos.google.cloud.oracledatabase.v1.IListDbServersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbServersResponse
      ]) => {
        this._log.info('listDbServers values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbServers`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database server in the following format:
 *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 db servers will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbServersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbServersStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbServers stream %j', request);
    return this.descriptors.page.listDbServers.createStream(
      this.innerApiCalls.listDbServers as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbServers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database server in the following format:
 *   projects/{project}/locations/{location}/cloudExadataInfrastructures/{cloudExadataInfrastructure}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 db servers will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbServer|DbServer}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_servers.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbServers_async
 */
  listDbServersAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbServersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbServer>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbServers'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbServers iterate %j', request);
    return this.descriptors.page.listDbServers.asyncIterate(
      this.innerApiCalls['listDbServers'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbServer>;
  }
 /**
 * Lists the database nodes of a VM Cluster.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database node in the following format:
 *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
 *   .
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 db nodes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the node should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbNodesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbNodes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbNode[],
        protos.google.cloud.oracledatabase.v1.IListDbNodesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      ]>;
  listDbNodes(
      request: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbNodesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbNode>): void;
  listDbNodes(
      request: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbNodesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbNode>): void;
  listDbNodes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbNodesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbNode>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbNodesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbNode>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbNode[],
        protos.google.cloud.oracledatabase.v1.IListDbNodesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      protos.google.cloud.oracledatabase.v1.IListDbNodesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbNode>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbNodes values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbNodes request %j', request);
    return this.innerApiCalls
      .listDbNodes(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbNode[],
        protos.google.cloud.oracledatabase.v1.IListDbNodesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbNodesResponse
      ]) => {
        this._log.info('listDbNodes values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbNodes`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database node in the following format:
 *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
 *   .
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 db nodes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the node should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbNodesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbNodesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbNodes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbNodes stream %j', request);
    return this.descriptors.page.listDbNodes.createStream(
      this.innerApiCalls.listDbNodes as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbNodes`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for database node in the following format:
 *   projects/{project}/locations/{location}/cloudVmClusters/{cloudVmCluster}.
 *   .
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 db nodes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the node should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbNode|DbNode}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_nodes.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbNodes_async
 */
  listDbNodesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbNodesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbNode>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbNodes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbNodes iterate %j', request);
    return this.descriptors.page.listDbNodes.asyncIterate(
      this.innerApiCalls['listDbNodes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbNode>;
  }
 /**
 * Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
 * project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Grid Infrastructure Version in the following
 *   format: Format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
 *   will be returned. The maximum value is 1000; values above 1000 will be
 *   reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   shape, gcp_oracle_zone and gi_version fields are supported in this format:
 *   `shape="{shape}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGiVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGiVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IGiVersion[],
        protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      ]>;
  listGiVersions(
      request: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IGiVersion>): void;
  listGiVersions(
      request: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IGiVersion>): void;
  listGiVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IGiVersion>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IGiVersion>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IGiVersion[],
        protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IGiVersion>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listGiVersions values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listGiVersions request %j', request);
    return this.innerApiCalls
      .listGiVersions(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IGiVersion[],
        protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListGiVersionsResponse
      ]) => {
        this._log.info('listGiVersions values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listGiVersions`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Grid Infrastructure Version in the following
 *   format: Format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
 *   will be returned. The maximum value is 1000; values above 1000 will be
 *   reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   shape, gcp_oracle_zone and gi_version fields are supported in this format:
 *   `shape="{shape}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGiVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGiVersionsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGiVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGiVersions stream %j', request);
    return this.descriptors.page.listGiVersions.createStream(
      this.innerApiCalls.listGiVersions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGiVersions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Grid Infrastructure Version in the following
 *   format: Format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Oracle Grid Infrastructure (GI) versions
 *   will be returned. The maximum value is 1000; values above 1000 will be
 *   reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   shape, gcp_oracle_zone and gi_version fields are supported in this format:
 *   `shape="{shape}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.GiVersion|GiVersion}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_gi_versions.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListGiVersions_async
 */
  listGiVersionsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListGiVersionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IGiVersion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGiVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGiVersions iterate %j', request);
    return this.descriptors.page.listGiVersions.asyncIterate(
      this.innerApiCalls['listGiVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IGiVersion>;
  }
 /**
 * Lists all the valid minor versions for the given
 * project, location, gi version and shape family.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the MinorVersion resource with the format:
 *   projects/{project}/locations/{location}/giVersions/{gi_version}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 System Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 *   Only shapeFamily and gcp_oracle_zone_id are supported in this format:
 *   `shape_family="{shapeFamily}" AND
 *   gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.MinorVersion|MinorVersion}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listMinorVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMinorVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IMinorVersion[],
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse
      ]>;
  listMinorVersions(
      request: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IMinorVersion>): void;
  listMinorVersions(
      request: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IMinorVersion>): void;
  listMinorVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IMinorVersion>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IMinorVersion>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IMinorVersion[],
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IMinorVersion>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listMinorVersions values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listMinorVersions request %j', request);
    return this.innerApiCalls
      .listMinorVersions(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IMinorVersion[],
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListMinorVersionsResponse
      ]) => {
        this._log.info('listMinorVersions values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listMinorVersions`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the MinorVersion resource with the format:
 *   projects/{project}/locations/{location}/giVersions/{gi_version}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 System Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 *   Only shapeFamily and gcp_oracle_zone_id are supported in this format:
 *   `shape_family="{shapeFamily}" AND
 *   gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.MinorVersion|MinorVersion} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listMinorVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMinorVersionsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMinorVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMinorVersions stream %j', request);
    return this.descriptors.page.listMinorVersions.createStream(
      this.innerApiCalls.listMinorVersions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listMinorVersions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the MinorVersion resource with the format:
 *   projects/{project}/locations/{location}/giVersions/{gi_version}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 System Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 *   Only shapeFamily and gcp_oracle_zone_id are supported in this format:
 *   `shape_family="{shapeFamily}" AND
 *   gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.MinorVersion|MinorVersion}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_minor_versions.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListMinorVersions_async
 */
  listMinorVersionsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListMinorVersionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IMinorVersion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMinorVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMinorVersions iterate %j', request);
    return this.descriptors.page.listMinorVersions.asyncIterate(
      this.innerApiCalls['listMinorVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IMinorVersion>;
  }
 /**
 * Lists the database system shapes available for the project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Database System Shapes in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 database system shapes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   gcp_oracle_zone_id field is supported in this format:
 *   `gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbSystemShapesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystemShapes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystemShape[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      ]>;
  listDbSystemShapes(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemShape>): void;
  listDbSystemShapes(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemShape>): void;
  listDbSystemShapes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemShape>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemShape>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystemShape[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystemShape>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbSystemShapes values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbSystemShapes request %j', request);
    return this.innerApiCalls
      .listDbSystemShapes(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbSystemShape[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemShapesResponse
      ]) => {
        this._log.info('listDbSystemShapes values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbSystemShapes`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Database System Shapes in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 database system shapes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   gcp_oracle_zone_id field is supported in this format:
 *   `gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbSystemShapesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystemShapesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystemShapes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystemShapes stream %j', request);
    return this.descriptors.page.listDbSystemShapes.createStream(
      this.innerApiCalls.listDbSystemShapes as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbSystemShapes`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for Database System Shapes in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 database system shapes will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   gcp_oracle_zone_id field is supported in this format:
 *   `gcp_oracle_zone_id="{gcp_oracle_zone_id}"`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbSystemShape|DbSystemShape}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_system_shapes.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbSystemShapes_async
 */
  listDbSystemShapesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemShapesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemShape>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystemShapes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystemShapes iterate %j', request);
    return this.descriptors.page.listDbSystemShapes.asyncIterate(
      this.innerApiCalls['listDbSystemShapes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemShape>;
  }
 /**
 * Lists the Autonomous Databases in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous Database will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      ]>;
  listAutonomousDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>): void;
  listAutonomousDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>): void;
  listAutonomousDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAutonomousDatabases values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAutonomousDatabases request %j', request);
    return this.innerApiCalls
      .listAutonomousDatabases(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesResponse
      ]) => {
        this._log.info('listAutonomousDatabases values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAutonomousDatabases`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous Database will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabasesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabases stream %j', request);
    return this.descriptors.page.listAutonomousDatabases.createStream(
      this.innerApiCalls.listAutonomousDatabases as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAutonomousDatabases`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous Database will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabase|AutonomousDatabase}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_databases.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabases_async
 */
  listAutonomousDatabasesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabasesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabases iterate %j', request);
    return this.descriptors.page.listAutonomousDatabases.asyncIterate(
      this.innerApiCalls['listAutonomousDatabases'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase>;
  }
 /**
 * Lists all the available Autonomous Database versions for a project and
 * location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAutonomousDbVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDbVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      ]>;
  listAutonomousDbVersions(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>): void;
  listAutonomousDbVersions(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>): void;
  listAutonomousDbVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAutonomousDbVersions values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAutonomousDbVersions request %j', request);
    return this.innerApiCalls
      .listAutonomousDbVersions(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsResponse
      ]) => {
        this._log.info('listAutonomousDbVersions values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAutonomousDbVersions`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAutonomousDbVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDbVersionsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDbVersions stream %j', request);
    return this.descriptors.page.listAutonomousDbVersions.createStream(
      this.innerApiCalls.listAutonomousDbVersions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAutonomousDbVersions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Versions will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDbVersion|AutonomousDbVersion}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_db_versions.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDbVersions_async
 */
  listAutonomousDbVersionsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDbVersionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDbVersions iterate %j', request);
    return this.descriptors.page.listAutonomousDbVersions.asyncIterate(
      this.innerApiCalls['listAutonomousDbVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion>;
  }
 /**
 * Lists Autonomous Database Character Sets in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabaseCharacterSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabaseCharacterSets(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      ]>;
  listAutonomousDatabaseCharacterSets(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>): void;
  listAutonomousDatabaseCharacterSets(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>): void;
  listAutonomousDatabaseCharacterSets(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAutonomousDatabaseCharacterSets values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAutonomousDatabaseCharacterSets request %j', request);
    return this.innerApiCalls
      .listAutonomousDatabaseCharacterSets(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsResponse
      ]) => {
        this._log.info('listAutonomousDatabaseCharacterSets values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAutonomousDatabaseCharacterSets`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabaseCharacterSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabaseCharacterSetsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabaseCharacterSets stream %j', request);
    return this.descriptors.page.listAutonomousDatabaseCharacterSets.createStream(
      this.innerApiCalls.listAutonomousDatabaseCharacterSets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAutonomousDatabaseCharacterSets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the Autonomous Database in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Character Sets will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet|AutonomousDatabaseCharacterSet}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_database_character_sets.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabaseCharacterSets_async
 */
  listAutonomousDatabaseCharacterSetsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseCharacterSetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabaseCharacterSets iterate %j', request);
    return this.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate(
      this.innerApiCalls['listAutonomousDatabaseCharacterSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet>;
  }
 /**
 * Lists the long-term and automatic backups of an Autonomous Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ListAutonomousDatabaseBackups in the
 *   following format: projects/{project}/locations/{location}.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **autonomous_database_id** field is supported in the following format:
 *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
 *   must be a valid Autonomous Database ID, limited to the naming
 *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
 *   The ID must start with a letter, end with a letter or a number, and be
 *   a maximum of 63 characters.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Backups will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabaseBackupsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabaseBackups(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      ]>;
  listAutonomousDatabaseBackups(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>): void;
  listAutonomousDatabaseBackups(
      request: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>): void;
  listAutonomousDatabaseBackups(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
          protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listAutonomousDatabaseBackups values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listAutonomousDatabaseBackups request %j', request);
    return this.innerApiCalls
      .listAutonomousDatabaseBackups(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[],
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsResponse
      ]) => {
        this._log.info('listAutonomousDatabaseBackups values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listAutonomousDatabaseBackups`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ListAutonomousDatabaseBackups in the
 *   following format: projects/{project}/locations/{location}.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **autonomous_database_id** field is supported in the following format:
 *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
 *   must be a valid Autonomous Database ID, limited to the naming
 *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
 *   The ID must start with a letter, end with a letter or a number, and be
 *   a maximum of 63 characters.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Backups will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAutonomousDatabaseBackupsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listAutonomousDatabaseBackupsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabaseBackups stream %j', request);
    return this.descriptors.page.listAutonomousDatabaseBackups.createStream(
      this.innerApiCalls.listAutonomousDatabaseBackups as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAutonomousDatabaseBackups`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ListAutonomousDatabaseBackups in the
 *   following format: projects/{project}/locations/{location}.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **autonomous_database_id** field is supported in the following format:
 *   `autonomous_database_id="{autonomous_database_id}"`. The accepted values
 *   must be a valid Autonomous Database ID, limited to the naming
 *   restrictions of the ID: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
 *   The ID must start with a letter, end with a letter or a number, and be
 *   a maximum of 63 characters.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 Autonomous DB Backups will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup|AutonomousDatabaseBackup}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_autonomous_database_backups.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListAutonomousDatabaseBackups_async
 */
  listAutonomousDatabaseBackupsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListAutonomousDatabaseBackupsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listAutonomousDatabaseBackups'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listAutonomousDatabaseBackups iterate %j', request);
    return this.descriptors.page.listAutonomousDatabaseBackups.asyncIterate(
      this.innerApiCalls['listAutonomousDatabaseBackups'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup>;
  }
 /**
 * Lists the ODB Networks in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the ODB Network in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.OdbNetwork|OdbNetwork}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOdbNetworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOdbNetworks(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbNetwork[],
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse
      ]>;
  listOdbNetworks(
      request: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbNetwork>): void;
  listOdbNetworks(
      request: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbNetwork>): void;
  listOdbNetworks(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbNetwork>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbNetwork>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbNetwork[],
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IOdbNetwork>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listOdbNetworks values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listOdbNetworks request %j', request);
    return this.innerApiCalls
      .listOdbNetworks(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IOdbNetwork[],
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbNetworksResponse
      ]) => {
        this._log.info('listOdbNetworks values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listOdbNetworks`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the ODB Network in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.OdbNetwork|OdbNetwork} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOdbNetworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOdbNetworksStream(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOdbNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOdbNetworks stream %j', request);
    return this.descriptors.page.listOdbNetworks.createStream(
      this.innerApiCalls.listOdbNetworks as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOdbNetworks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the ODB Network in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.OdbNetwork|OdbNetwork}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_odb_networks.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListOdbNetworks_async
 */
  listOdbNetworksAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbNetworksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IOdbNetwork>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOdbNetworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOdbNetworks iterate %j', request);
    return this.descriptors.page.listOdbNetworks.asyncIterate(
      this.innerApiCalls['listOdbNetworks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IOdbNetwork>;
  }
 /**
 * Lists all the ODB Subnets in a given ODB Network.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the OdbSubnet in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.OdbSubnet|OdbSubnet}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listOdbSubnetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOdbSubnets(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbSubnet[],
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse
      ]>;
  listOdbSubnets(
      request: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbSubnet>): void;
  listOdbSubnets(
      request: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbSubnet>): void;
  listOdbSubnets(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbSubnet>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
          protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IOdbSubnet>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IOdbSubnet[],
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IOdbSubnet>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listOdbSubnets values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listOdbSubnets request %j', request);
    return this.innerApiCalls
      .listOdbSubnets(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IOdbSubnet[],
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListOdbSubnetsResponse
      ]) => {
        this._log.info('listOdbSubnets values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listOdbSubnets`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the OdbSubnet in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.OdbSubnet|OdbSubnet} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listOdbSubnetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listOdbSubnetsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOdbSubnets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOdbSubnets stream %j', request);
    return this.descriptors.page.listOdbSubnets.createStream(
      this.innerApiCalls.listOdbSubnets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listOdbSubnets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the OdbSubnet in the following format:
 *   projects/{project}/locations/{location}/odbNetworks/{odb_network}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ODB Networks will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.OdbSubnet|OdbSubnet}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_odb_subnets.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListOdbSubnets_async
 */
  listOdbSubnetsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListOdbSubnetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IOdbSubnet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listOdbSubnets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listOdbSubnets iterate %j', request);
    return this.descriptors.page.listOdbSubnets.asyncIterate(
      this.innerApiCalls['listOdbSubnets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IOdbSubnet>;
  }
 /**
 * Lists all the Exadb (Exascale) VM Clusters for the given project and
 * location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExadbVmClusters in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExadbVmClusters will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.ExadbVmCluster|ExadbVmCluster}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listExadbVmClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExadbVmClusters(
      request?: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse
      ]>;
  listExadbVmClusters(
      request: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster>): void;
  listExadbVmClusters(
      request: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster>): void;
  listExadbVmClusters(
      request?: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
          protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExadbVmCluster>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IExadbVmCluster>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listExadbVmClusters values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listExadbVmClusters request %j', request);
    return this.innerApiCalls
      .listExadbVmClusters(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IExadbVmCluster[],
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExadbVmClustersResponse
      ]) => {
        this._log.info('listExadbVmClusters values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listExadbVmClusters`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExadbVmClusters in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExadbVmClusters will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.ExadbVmCluster|ExadbVmCluster} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listExadbVmClustersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExadbVmClustersStream(
      request?: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExadbVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listExadbVmClusters stream %j', request);
    return this.descriptors.page.listExadbVmClusters.createStream(
      this.innerApiCalls.listExadbVmClusters as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listExadbVmClusters`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExadbVmClusters in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExadbVmClusters will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.ExadbVmCluster|ExadbVmCluster}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_exadb_vm_clusters.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListExadbVmClusters_async
 */
  listExadbVmClustersAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListExadbVmClustersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IExadbVmCluster>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExadbVmClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listExadbVmClusters iterate %j', request);
    return this.descriptors.page.listExadbVmClusters.asyncIterate(
      this.innerApiCalls['listExadbVmClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IExadbVmCluster>;
  }
 /**
 * Lists all the ExascaleDB Storage Vaults for the given project and
 * location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExascaleDbStorageVault in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExascaleDbStorageVaults will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Filter
 *   the list as specified in https://google.aip.dev/160.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request. Order
 *   results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault|ExascaleDbStorageVault}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listExascaleDbStorageVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExascaleDbStorageVaults(
      request?: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[],
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse
      ]>;
  listExascaleDbStorageVaults(
      request: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>): void;
  listExascaleDbStorageVaults(
      request: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>): void;
  listExascaleDbStorageVaults(
      request?: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
          protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[],
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listExascaleDbStorageVaults values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listExascaleDbStorageVaults request %j', request);
    return this.innerApiCalls
      .listExascaleDbStorageVaults(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[],
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsResponse
      ]) => {
        this._log.info('listExascaleDbStorageVaults values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listExascaleDbStorageVaults`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExascaleDbStorageVault in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExascaleDbStorageVaults will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Filter
 *   the list as specified in https://google.aip.dev/160.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request. Order
 *   results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault|ExascaleDbStorageVault} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listExascaleDbStorageVaultsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listExascaleDbStorageVaultsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExascaleDbStorageVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listExascaleDbStorageVaults stream %j', request);
    return this.descriptors.page.listExascaleDbStorageVaults.createStream(
      this.innerApiCalls.listExascaleDbStorageVaults as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listExascaleDbStorageVaults`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for ExascaleDbStorageVault in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 ExascaleDbStorageVaults will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Filter
 *   the list as specified in https://google.aip.dev/160.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request. Order
 *   results as specified in https://google.aip.dev/132.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault|ExascaleDbStorageVault}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_exascale_db_storage_vaults.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListExascaleDbStorageVaults_async
 */
  listExascaleDbStorageVaultsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListExascaleDbStorageVaultsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listExascaleDbStorageVaults'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listExascaleDbStorageVaults iterate %j', request);
    return this.descriptors.page.listExascaleDbStorageVaults.asyncIterate(
      this.innerApiCalls['listExascaleDbStorageVaults'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault>;
  }
 /**
 * Lists all the DbSystemInitialStorageSizes for the given project and
 * location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbSystemInitialStorageSize resource with
 *   the format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbSystemInitialStorageSizes will be
 *   returned. The maximum value is 1000; values above 1000 will be reset to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize|DbSystemInitialStorageSize}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbSystemInitialStorageSizesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystemInitialStorageSizes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse
      ]>;
  listDbSystemInitialStorageSizes(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>): void;
  listDbSystemInitialStorageSizes(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>): void;
  listDbSystemInitialStorageSizes(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbSystemInitialStorageSizes values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbSystemInitialStorageSizes request %j', request);
    return this.innerApiCalls
      .listDbSystemInitialStorageSizes(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesResponse
      ]) => {
        this._log.info('listDbSystemInitialStorageSizes values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbSystemInitialStorageSizes`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbSystemInitialStorageSize resource with
 *   the format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbSystemInitialStorageSizes will be
 *   returned. The maximum value is 1000; values above 1000 will be reset to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize|DbSystemInitialStorageSize} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbSystemInitialStorageSizesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystemInitialStorageSizesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystemInitialStorageSizes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystemInitialStorageSizes stream %j', request);
    return this.descriptors.page.listDbSystemInitialStorageSizes.createStream(
      this.innerApiCalls.listDbSystemInitialStorageSizes as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbSystemInitialStorageSizes`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbSystemInitialStorageSize resource with
 *   the format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbSystemInitialStorageSizes will be
 *   returned. The maximum value is 1000; values above 1000 will be reset to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize|DbSystemInitialStorageSize}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_system_initial_storage_sizes.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbSystemInitialStorageSizes_async
 */
  listDbSystemInitialStorageSizesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemInitialStorageSizesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystemInitialStorageSizes'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystemInitialStorageSizes iterate %j', request);
    return this.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate(
      this.innerApiCalls['listDbSystemInitialStorageSizes'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize>;
  }
 /**
 * Lists all the Databases for the given project, location and DbSystem.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name in the following format:
 *   projects/{project}/locations/{region}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Databases will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. list for
 *   container databases is supported only with a valid dbSystem (full resource
 *   name) filter in this format:
 *   `dbSystem="projects/{project}/locations/{location}/dbSystems/{dbSystemId}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.Database|Database}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabase[],
        protos.google.cloud.oracledatabase.v1.IListDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabasesResponse
      ]>;
  listDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabase>): void;
  listDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabase>): void;
  listDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabase>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabase>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabase[],
        protos.google.cloud.oracledatabase.v1.IListDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabasesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      protos.google.cloud.oracledatabase.v1.IListDatabasesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDatabase>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDatabases values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDatabases request %j', request);
    return this.innerApiCalls
      .listDatabases(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDatabase[],
        protos.google.cloud.oracledatabase.v1.IListDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabasesResponse
      ]) => {
        this._log.info('listDatabases values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDatabases`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name in the following format:
 *   projects/{project}/locations/{region}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Databases will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. list for
 *   container databases is supported only with a valid dbSystem (full resource
 *   name) filter in this format:
 *   `dbSystem="projects/{project}/locations/{location}/dbSystems/{dbSystemId}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.Database|Database} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDatabasesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDatabases stream %j', request);
    return this.descriptors.page.listDatabases.createStream(
      this.innerApiCalls.listDatabases as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDatabases`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name in the following format:
 *   projects/{project}/locations/{region}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 Databases will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. list for
 *   container databases is supported only with a valid dbSystem (full resource
 *   name) filter in this format:
 *   `dbSystem="projects/{project}/locations/{location}/dbSystems/{dbSystemId}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.Database|Database}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_databases.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDatabases_async
 */
  listDatabasesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabasesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDatabase>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDatabases iterate %j', request);
    return this.descriptors.page.listDatabases.asyncIterate(
      this.innerApiCalls['listDatabases'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDatabase>;
  }
 /**
 * Lists all the PluggableDatabases for the given project, location and
 * Container Database.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of PluggableDatabases.
 *   Format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of PluggableDatabases to return. The service
 *   may return fewer than this value.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListPluggableDatabases`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListPluggableDatabases`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. List for
 *   pluggable databases is supported only with a valid container database (full
 *   resource name) filter in this format:
 *   `database="projects/{project}/locations/{location}/databases/{database}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.PluggableDatabase|PluggableDatabase}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPluggableDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPluggableDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase[],
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse
      ]>;
  listPluggableDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase>): void;
  listPluggableDatabases(
      request: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase>): void;
  listPluggableDatabases(
      request?: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
          protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IPluggableDatabase>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase[],
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IPluggableDatabase>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listPluggableDatabases values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listPluggableDatabases request %j', request);
    return this.innerApiCalls
      .listPluggableDatabases(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IPluggableDatabase[],
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest|null,
        protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesResponse
      ]) => {
        this._log.info('listPluggableDatabases values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listPluggableDatabases`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of PluggableDatabases.
 *   Format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of PluggableDatabases to return. The service
 *   may return fewer than this value.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListPluggableDatabases`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListPluggableDatabases`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. List for
 *   pluggable databases is supported only with a valid container database (full
 *   resource name) filter in this format:
 *   `database="projects/{project}/locations/{location}/databases/{database}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.PluggableDatabase|PluggableDatabase} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPluggableDatabasesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listPluggableDatabasesStream(
      request?: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPluggableDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPluggableDatabases stream %j', request);
    return this.descriptors.page.listPluggableDatabases.createStream(
      this.innerApiCalls.listPluggableDatabases as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listPluggableDatabases`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of PluggableDatabases.
 *   Format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of PluggableDatabases to return. The service
 *   may return fewer than this value.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListPluggableDatabases`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListPluggableDatabases`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. List for
 *   pluggable databases is supported only with a valid container database (full
 *   resource name) filter in this format:
 *   `database="projects/{project}/locations/{location}/databases/{database}"`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.PluggableDatabase|PluggableDatabase}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_pluggable_databases.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListPluggableDatabases_async
 */
  listPluggableDatabasesAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListPluggableDatabasesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IPluggableDatabase>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listPluggableDatabases'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listPluggableDatabases iterate %j', request);
    return this.descriptors.page.listPluggableDatabases.asyncIterate(
      this.innerApiCalls['listPluggableDatabases'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IPluggableDatabase>;
  }
 /**
 * Lists all the DbSystems for the given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DbSystems in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 DbSystems will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbSystem|DbSystem}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbSystemsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystems(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystem[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse
      ]>;
  listDbSystems(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystem>): void;
  listDbSystems(
      request: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystem>): void;
  listDbSystems(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystem>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbSystem>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbSystem[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbSystem>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbSystems values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbSystems request %j', request);
    return this.innerApiCalls
      .listDbSystems(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbSystem[],
        protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbSystemsResponse
      ]) => {
        this._log.info('listDbSystems values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbSystems`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DbSystems in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 DbSystems will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbSystem|DbSystem} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbSystemsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbSystemsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystems'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystems stream %j', request);
    return this.descriptors.page.listDbSystems.createStream(
      this.innerApiCalls.listDbSystems as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbSystems`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DbSystems in the following format:
 *   projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, at most 50 DbSystems will be returned.
 *   The maximum value is 1000; values above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying a page of results the server should return.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request.
 * @param {string} [request.orderBy]
 *   Optional. An expression for ordering the results of the request.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbSystem|DbSystem}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_systems.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbSystems_async
 */
  listDbSystemsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbSystemsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystem>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbSystems'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbSystems iterate %j', request);
    return this.descriptors.page.listDbSystems.asyncIterate(
      this.innerApiCalls['listDbSystems'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbSystem>;
  }
 /**
 * List DbVersions for the given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbVersion resource with the
 *   format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbVersions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that matches a subset of the DbVersions to
 *   show. The supported filter for dbSystem creation is `db_system_shape =
 *   {db_system_shape} AND storage_management = {storage_management}`. If no
 *   filter is provided, all DbVersions will be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DbVersion|DbVersion}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDbVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse
      ]>;
  listDbVersions(
      request: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbVersion>): void;
  listDbVersions(
      request: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbVersion>): void;
  listDbVersions(
      request?: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbVersion>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
          protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDbVersion>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDbVersion>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDbVersions values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDbVersions request %j', request);
    return this.innerApiCalls
      .listDbVersions(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDbVersion[],
        protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDbVersionsResponse
      ]) => {
        this._log.info('listDbVersions values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDbVersions`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbVersion resource with the
 *   format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbVersions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that matches a subset of the DbVersions to
 *   show. The supported filter for dbSystem creation is `db_system_shape =
 *   {db_system_shape} AND storage_management = {storage_management}`. If no
 *   filter is provided, all DbVersions will be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DbVersion|DbVersion} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDbVersionsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDbVersionsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbVersions stream %j', request);
    return this.descriptors.page.listDbVersions.createStream(
      this.innerApiCalls.listDbVersions as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDbVersions`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for the DbVersion resource with the
 *   format: projects/{project}/locations/{location}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of items to return.
 *   If unspecified, a maximum of 50 DbVersions will be returned.
 *   The maximum value is 1000; values above 1000 will be reset to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A token identifying the requested page of results to return. All
 *   fields except the filter should remain the same as in the request that
 *   provided this page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that matches a subset of the DbVersions to
 *   show. The supported filter for dbSystem creation is `db_system_shape =
 *   {db_system_shape} AND storage_management = {storage_management}`. If no
 *   filter is provided, all DbVersions will be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DbVersion|DbVersion}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_db_versions.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDbVersions_async
 */
  listDbVersionsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDbVersionsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbVersion>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDbVersions'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDbVersions iterate %j', request);
    return this.descriptors.page.listDbVersions.asyncIterate(
      this.innerApiCalls['listDbVersions'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDbVersion>;
  }
 /**
 * List DatabaseCharacterSets for the given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DatabaseCharacterSets in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of DatabaseCharacterSets to return. The
 *   service may return fewer than this value. If unspecified, at most 50
 *   DatabaseCharacterSets will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListDatabaseCharacterSets` call. Provide this to retrieve the subsequent
 *   page.
 *
 *   When paginating, all other parameters provided to
 *   `ListDatabaseCharacterSets` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet|DatabaseCharacterSet}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDatabaseCharacterSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDatabaseCharacterSets(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse
      ]>;
  listDatabaseCharacterSets(
      request: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>): void;
  listDatabaseCharacterSets(
      request: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      callback: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>): void;
  listDatabaseCharacterSets(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>,
      callback?: PaginationCallback<
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
          protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse|null|undefined,
          protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>):
      Promise<[
        protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse|null|undefined,
      protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDatabaseCharacterSets values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDatabaseCharacterSets request %j', request);
    return this.innerApiCalls
      .listDatabaseCharacterSets(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[],
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest|null,
        protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsResponse
      ]) => {
        this._log.info('listDatabaseCharacterSets values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDatabaseCharacterSets`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DatabaseCharacterSets in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of DatabaseCharacterSets to return. The
 *   service may return fewer than this value. If unspecified, at most 50
 *   DatabaseCharacterSets will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListDatabaseCharacterSets` call. Provide this to retrieve the subsequent
 *   page.
 *
 *   When paginating, all other parameters provided to
 *   `ListDatabaseCharacterSets` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet|DatabaseCharacterSet} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDatabaseCharacterSetsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDatabaseCharacterSetsStream(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDatabaseCharacterSets stream %j', request);
    return this.descriptors.page.listDatabaseCharacterSets.createStream(
      this.innerApiCalls.listDatabaseCharacterSets as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDatabaseCharacterSets`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent value for DatabaseCharacterSets in the following
 *   format: projects/{project}/locations/{location}.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of DatabaseCharacterSets to return. The
 *   service may return fewer than this value. If unspecified, at most 50
 *   DatabaseCharacterSets will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous
 *   `ListDatabaseCharacterSets` call. Provide this to retrieve the subsequent
 *   page.
 *
 *   When paginating, all other parameters provided to
 *   `ListDatabaseCharacterSets` must match the call that provided the page
 *   token.
 * @param {string} [request.filter]
 *   Optional. An expression for filtering the results of the request. Only the
 *   **character_set_type** field is supported in the following format:
 *   `character_set_type="{characterSetType}"`. Accepted values include
 *   `DATABASE` and `NATIONAL`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet|DatabaseCharacterSet}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/oracle_database.list_database_character_sets.js</caption>
 * region_tag:oracledatabase_v1_generated_OracleDatabase_ListDatabaseCharacterSets_async
 */
  listDatabaseCharacterSetsAsync(
      request?: protos.google.cloud.oracledatabase.v1.IListDatabaseCharacterSetsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDatabaseCharacterSets'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDatabaseCharacterSets iterate %j', request);
    return this.descriptors.page.listDatabaseCharacterSets.asyncIterate(
      this.innerApiCalls['listDatabaseCharacterSets'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified autonomousDatabase resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database
   * @returns {string} Resource name string.
   */
  autonomousDatabasePath(project:string,location:string,autonomousDatabase:string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.render({
      project: project,
      location: location,
      autonomous_database: autonomousDatabase,
    });
  }

  /**
   * Parse the project from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseName(autonomousDatabaseName: string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(autonomousDatabaseName).project;
  }

  /**
   * Parse the location from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseName(autonomousDatabaseName: string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(autonomousDatabaseName).location;
  }

  /**
   * Parse the autonomous_database from AutonomousDatabase resource.
   *
   * @param {string} autonomousDatabaseName
   *   A fully-qualified path representing AutonomousDatabase resource.
   * @returns {string} A string representing the autonomous_database.
   */
  matchAutonomousDatabaseFromAutonomousDatabaseName(autonomousDatabaseName: string) {
    return this.pathTemplates.autonomousDatabasePathTemplate.match(autonomousDatabaseName).autonomous_database;
  }

  /**
   * Return a fully-qualified autonomousDatabaseBackup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database_backup
   * @returns {string} Resource name string.
   */
  autonomousDatabaseBackupPath(project:string,location:string,autonomousDatabaseBackup:string) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.render({
      project: project,
      location: location,
      autonomous_database_backup: autonomousDatabaseBackup,
    });
  }

  /**
   * Parse the project from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseBackupName(autonomousDatabaseBackupName: string) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(autonomousDatabaseBackupName).project;
  }

  /**
   * Parse the location from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseBackupName(autonomousDatabaseBackupName: string) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(autonomousDatabaseBackupName).location;
  }

  /**
   * Parse the autonomous_database_backup from AutonomousDatabaseBackup resource.
   *
   * @param {string} autonomousDatabaseBackupName
   *   A fully-qualified path representing AutonomousDatabaseBackup resource.
   * @returns {string} A string representing the autonomous_database_backup.
   */
  matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName(autonomousDatabaseBackupName: string) {
    return this.pathTemplates.autonomousDatabaseBackupPathTemplate.match(autonomousDatabaseBackupName).autonomous_database_backup;
  }

  /**
   * Return a fully-qualified autonomousDatabaseCharacterSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_database_character_set
   * @returns {string} Resource name string.
   */
  autonomousDatabaseCharacterSetPath(project:string,location:string,autonomousDatabaseCharacterSet:string) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.render({
      project: project,
      location: location,
      autonomous_database_character_set: autonomousDatabaseCharacterSet,
    });
  }

  /**
   * Parse the project from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDatabaseCharacterSetName(autonomousDatabaseCharacterSetName: string) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(autonomousDatabaseCharacterSetName).project;
  }

  /**
   * Parse the location from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDatabaseCharacterSetName(autonomousDatabaseCharacterSetName: string) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(autonomousDatabaseCharacterSetName).location;
  }

  /**
   * Parse the autonomous_database_character_set from AutonomousDatabaseCharacterSet resource.
   *
   * @param {string} autonomousDatabaseCharacterSetName
   *   A fully-qualified path representing AutonomousDatabaseCharacterSet resource.
   * @returns {string} A string representing the autonomous_database_character_set.
   */
  matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName(autonomousDatabaseCharacterSetName: string) {
    return this.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match(autonomousDatabaseCharacterSetName).autonomous_database_character_set;
  }

  /**
   * Return a fully-qualified autonomousDbVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} autonomous_db_version
   * @returns {string} Resource name string.
   */
  autonomousDbVersionPath(project:string,location:string,autonomousDbVersion:string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.render({
      project: project,
      location: location,
      autonomous_db_version: autonomousDbVersion,
    });
  }

  /**
   * Parse the project from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAutonomousDbVersionName(autonomousDbVersionName: string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(autonomousDbVersionName).project;
  }

  /**
   * Parse the location from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAutonomousDbVersionName(autonomousDbVersionName: string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(autonomousDbVersionName).location;
  }

  /**
   * Parse the autonomous_db_version from AutonomousDbVersion resource.
   *
   * @param {string} autonomousDbVersionName
   *   A fully-qualified path representing AutonomousDbVersion resource.
   * @returns {string} A string representing the autonomous_db_version.
   */
  matchAutonomousDbVersionFromAutonomousDbVersionName(autonomousDbVersionName: string) {
    return this.pathTemplates.autonomousDbVersionPathTemplate.match(autonomousDbVersionName).autonomous_db_version;
  }

  /**
   * Return a fully-qualified cloudExadataInfrastructure resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_exadata_infrastructure
   * @returns {string} Resource name string.
   */
  cloudExadataInfrastructurePath(project:string,location:string,cloudExadataInfrastructure:string) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.render({
      project: project,
      location: location,
      cloud_exadata_infrastructure: cloudExadataInfrastructure,
    });
  }

  /**
   * Parse the project from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCloudExadataInfrastructureName(cloudExadataInfrastructureName: string) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(cloudExadataInfrastructureName).project;
  }

  /**
   * Parse the location from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudExadataInfrastructureName(cloudExadataInfrastructureName: string) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(cloudExadataInfrastructureName).location;
  }

  /**
   * Parse the cloud_exadata_infrastructure from CloudExadataInfrastructure resource.
   *
   * @param {string} cloudExadataInfrastructureName
   *   A fully-qualified path representing CloudExadataInfrastructure resource.
   * @returns {string} A string representing the cloud_exadata_infrastructure.
   */
  matchCloudExadataInfrastructureFromCloudExadataInfrastructureName(cloudExadataInfrastructureName: string) {
    return this.pathTemplates.cloudExadataInfrastructurePathTemplate.match(cloudExadataInfrastructureName).cloud_exadata_infrastructure;
  }

  /**
   * Return a fully-qualified cloudVmCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_vm_cluster
   * @returns {string} Resource name string.
   */
  cloudVmClusterPath(project:string,location:string,cloudVmCluster:string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.render({
      project: project,
      location: location,
      cloud_vm_cluster: cloudVmCluster,
    });
  }

  /**
   * Parse the project from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(cloudVmClusterName).project;
  }

  /**
   * Parse the location from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(cloudVmClusterName).location;
  }

  /**
   * Parse the cloud_vm_cluster from CloudVmCluster resource.
   *
   * @param {string} cloudVmClusterName
   *   A fully-qualified path representing CloudVmCluster resource.
   * @returns {string} A string representing the cloud_vm_cluster.
   */
  matchCloudVmClusterFromCloudVmClusterName(cloudVmClusterName: string) {
    return this.pathTemplates.cloudVmClusterPathTemplate.match(cloudVmClusterName).cloud_vm_cluster;
  }

  /**
   * Return a fully-qualified database resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} database
   * @returns {string} Resource name string.
   */
  databasePath(project:string,location:string,database:string) {
    return this.pathTemplates.databasePathTemplate.render({
      project: project,
      location: location,
      database: database,
    });
  }

  /**
   * Parse the project from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatabaseName(databaseName: string) {
    return this.pathTemplates.databasePathTemplate.match(databaseName).project;
  }

  /**
   * Parse the location from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatabaseName(databaseName: string) {
    return this.pathTemplates.databasePathTemplate.match(databaseName).location;
  }

  /**
   * Parse the database from Database resource.
   *
   * @param {string} databaseName
   *   A fully-qualified path representing Database resource.
   * @returns {string} A string representing the database.
   */
  matchDatabaseFromDatabaseName(databaseName: string) {
    return this.pathTemplates.databasePathTemplate.match(databaseName).database;
  }

  /**
   * Return a fully-qualified databaseCharacterSet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} database_character_set
   * @returns {string} Resource name string.
   */
  databaseCharacterSetPath(project:string,location:string,databaseCharacterSet:string) {
    return this.pathTemplates.databaseCharacterSetPathTemplate.render({
      project: project,
      location: location,
      database_character_set: databaseCharacterSet,
    });
  }

  /**
   * Parse the project from DatabaseCharacterSet resource.
   *
   * @param {string} databaseCharacterSetName
   *   A fully-qualified path representing DatabaseCharacterSet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDatabaseCharacterSetName(databaseCharacterSetName: string) {
    return this.pathTemplates.databaseCharacterSetPathTemplate.match(databaseCharacterSetName).project;
  }

  /**
   * Parse the location from DatabaseCharacterSet resource.
   *
   * @param {string} databaseCharacterSetName
   *   A fully-qualified path representing DatabaseCharacterSet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDatabaseCharacterSetName(databaseCharacterSetName: string) {
    return this.pathTemplates.databaseCharacterSetPathTemplate.match(databaseCharacterSetName).location;
  }

  /**
   * Parse the database_character_set from DatabaseCharacterSet resource.
   *
   * @param {string} databaseCharacterSetName
   *   A fully-qualified path representing DatabaseCharacterSet resource.
   * @returns {string} A string representing the database_character_set.
   */
  matchDatabaseCharacterSetFromDatabaseCharacterSetName(databaseCharacterSetName: string) {
    return this.pathTemplates.databaseCharacterSetPathTemplate.match(databaseCharacterSetName).database_character_set;
  }

  /**
   * Return a fully-qualified dbServer resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_exadata_infrastructure
   * @param {string} db_server
   * @returns {string} Resource name string.
   */
  dbServerPath(project:string,location:string,cloudExadataInfrastructure:string,dbServer:string) {
    return this.pathTemplates.dbServerPathTemplate.render({
      project: project,
      location: location,
      cloud_exadata_infrastructure: cloudExadataInfrastructure,
      db_server: dbServer,
    });
  }

  /**
   * Parse the project from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).project;
  }

  /**
   * Parse the location from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).location;
  }

  /**
   * Parse the cloud_exadata_infrastructure from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the cloud_exadata_infrastructure.
   */
  matchCloudExadataInfrastructureFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).cloud_exadata_infrastructure;
  }

  /**
   * Parse the db_server from DbServer resource.
   *
   * @param {string} dbServerName
   *   A fully-qualified path representing DbServer resource.
   * @returns {string} A string representing the db_server.
   */
  matchDbServerFromDbServerName(dbServerName: string) {
    return this.pathTemplates.dbServerPathTemplate.match(dbServerName).db_server;
  }

  /**
   * Return a fully-qualified dbSystem resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} db_system
   * @returns {string} Resource name string.
   */
  dbSystemPath(project:string,location:string,dbSystem:string) {
    return this.pathTemplates.dbSystemPathTemplate.render({
      project: project,
      location: location,
      db_system: dbSystem,
    });
  }

  /**
   * Parse the project from DbSystem resource.
   *
   * @param {string} dbSystemName
   *   A fully-qualified path representing DbSystem resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbSystemName(dbSystemName: string) {
    return this.pathTemplates.dbSystemPathTemplate.match(dbSystemName).project;
  }

  /**
   * Parse the location from DbSystem resource.
   *
   * @param {string} dbSystemName
   *   A fully-qualified path representing DbSystem resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbSystemName(dbSystemName: string) {
    return this.pathTemplates.dbSystemPathTemplate.match(dbSystemName).location;
  }

  /**
   * Parse the db_system from DbSystem resource.
   *
   * @param {string} dbSystemName
   *   A fully-qualified path representing DbSystem resource.
   * @returns {string} A string representing the db_system.
   */
  matchDbSystemFromDbSystemName(dbSystemName: string) {
    return this.pathTemplates.dbSystemPathTemplate.match(dbSystemName).db_system;
  }

  /**
   * Return a fully-qualified dbSystemInitialStorageSize resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} db_system_initial_storage_size
   * @returns {string} Resource name string.
   */
  dbSystemInitialStorageSizePath(project:string,location:string,dbSystemInitialStorageSize:string) {
    return this.pathTemplates.dbSystemInitialStorageSizePathTemplate.render({
      project: project,
      location: location,
      db_system_initial_storage_size: dbSystemInitialStorageSize,
    });
  }

  /**
   * Parse the project from DbSystemInitialStorageSize resource.
   *
   * @param {string} dbSystemInitialStorageSizeName
   *   A fully-qualified path representing DbSystemInitialStorageSize resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbSystemInitialStorageSizeName(dbSystemInitialStorageSizeName: string) {
    return this.pathTemplates.dbSystemInitialStorageSizePathTemplate.match(dbSystemInitialStorageSizeName).project;
  }

  /**
   * Parse the location from DbSystemInitialStorageSize resource.
   *
   * @param {string} dbSystemInitialStorageSizeName
   *   A fully-qualified path representing DbSystemInitialStorageSize resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbSystemInitialStorageSizeName(dbSystemInitialStorageSizeName: string) {
    return this.pathTemplates.dbSystemInitialStorageSizePathTemplate.match(dbSystemInitialStorageSizeName).location;
  }

  /**
   * Parse the db_system_initial_storage_size from DbSystemInitialStorageSize resource.
   *
   * @param {string} dbSystemInitialStorageSizeName
   *   A fully-qualified path representing DbSystemInitialStorageSize resource.
   * @returns {string} A string representing the db_system_initial_storage_size.
   */
  matchDbSystemInitialStorageSizeFromDbSystemInitialStorageSizeName(dbSystemInitialStorageSizeName: string) {
    return this.pathTemplates.dbSystemInitialStorageSizePathTemplate.match(dbSystemInitialStorageSizeName).db_system_initial_storage_size;
  }

  /**
   * Return a fully-qualified dbSystemShape resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} db_system_shape
   * @returns {string} Resource name string.
   */
  dbSystemShapePath(project:string,location:string,dbSystemShape:string) {
    return this.pathTemplates.dbSystemShapePathTemplate.render({
      project: project,
      location: location,
      db_system_shape: dbSystemShape,
    });
  }

  /**
   * Parse the project from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName).project;
  }

  /**
   * Parse the location from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName).location;
  }

  /**
   * Parse the db_system_shape from DbSystemShape resource.
   *
   * @param {string} dbSystemShapeName
   *   A fully-qualified path representing DbSystemShape resource.
   * @returns {string} A string representing the db_system_shape.
   */
  matchDbSystemShapeFromDbSystemShapeName(dbSystemShapeName: string) {
    return this.pathTemplates.dbSystemShapePathTemplate.match(dbSystemShapeName).db_system_shape;
  }

  /**
   * Return a fully-qualified dbVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} db_version
   * @returns {string} Resource name string.
   */
  dbVersionPath(project:string,location:string,dbVersion:string) {
    return this.pathTemplates.dbVersionPathTemplate.render({
      project: project,
      location: location,
      db_version: dbVersion,
    });
  }

  /**
   * Parse the project from DbVersion resource.
   *
   * @param {string} dbVersionName
   *   A fully-qualified path representing DbVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDbVersionName(dbVersionName: string) {
    return this.pathTemplates.dbVersionPathTemplate.match(dbVersionName).project;
  }

  /**
   * Parse the location from DbVersion resource.
   *
   * @param {string} dbVersionName
   *   A fully-qualified path representing DbVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDbVersionName(dbVersionName: string) {
    return this.pathTemplates.dbVersionPathTemplate.match(dbVersionName).location;
  }

  /**
   * Parse the db_version from DbVersion resource.
   *
   * @param {string} dbVersionName
   *   A fully-qualified path representing DbVersion resource.
   * @returns {string} A string representing the db_version.
   */
  matchDbVersionFromDbVersionName(dbVersionName: string) {
    return this.pathTemplates.dbVersionPathTemplate.match(dbVersionName).db_version;
  }

  /**
   * Return a fully-qualified entitlement resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  entitlementPath(project:string,location:string,entitlement:string) {
    return this.pathTemplates.entitlementPathTemplate.render({
      project: project,
      location: location,
      entitlement: entitlement,
    });
  }

  /**
   * Parse the project from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).project;
  }

  /**
   * Parse the location from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).location;
  }

  /**
   * Parse the entitlement from Entitlement resource.
   *
   * @param {string} entitlementName
   *   A fully-qualified path representing Entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromEntitlementName(entitlementName: string) {
    return this.pathTemplates.entitlementPathTemplate.match(entitlementName).entitlement;
  }

  /**
   * Return a fully-qualified exadbVmCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} exadb_vm_cluster
   * @returns {string} Resource name string.
   */
  exadbVmClusterPath(project:string,location:string,exadbVmCluster:string) {
    return this.pathTemplates.exadbVmClusterPathTemplate.render({
      project: project,
      location: location,
      exadb_vm_cluster: exadbVmCluster,
    });
  }

  /**
   * Parse the project from ExadbVmCluster resource.
   *
   * @param {string} exadbVmClusterName
   *   A fully-qualified path representing ExadbVmCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExadbVmClusterName(exadbVmClusterName: string) {
    return this.pathTemplates.exadbVmClusterPathTemplate.match(exadbVmClusterName).project;
  }

  /**
   * Parse the location from ExadbVmCluster resource.
   *
   * @param {string} exadbVmClusterName
   *   A fully-qualified path representing ExadbVmCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExadbVmClusterName(exadbVmClusterName: string) {
    return this.pathTemplates.exadbVmClusterPathTemplate.match(exadbVmClusterName).location;
  }

  /**
   * Parse the exadb_vm_cluster from ExadbVmCluster resource.
   *
   * @param {string} exadbVmClusterName
   *   A fully-qualified path representing ExadbVmCluster resource.
   * @returns {string} A string representing the exadb_vm_cluster.
   */
  matchExadbVmClusterFromExadbVmClusterName(exadbVmClusterName: string) {
    return this.pathTemplates.exadbVmClusterPathTemplate.match(exadbVmClusterName).exadb_vm_cluster;
  }

  /**
   * Return a fully-qualified exascaleDbStorageVault resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} exascale_db_storage_vault
   * @returns {string} Resource name string.
   */
  exascaleDbStorageVaultPath(project:string,location:string,exascaleDbStorageVault:string) {
    return this.pathTemplates.exascaleDbStorageVaultPathTemplate.render({
      project: project,
      location: location,
      exascale_db_storage_vault: exascaleDbStorageVault,
    });
  }

  /**
   * Parse the project from ExascaleDbStorageVault resource.
   *
   * @param {string} exascaleDbStorageVaultName
   *   A fully-qualified path representing ExascaleDbStorageVault resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromExascaleDbStorageVaultName(exascaleDbStorageVaultName: string) {
    return this.pathTemplates.exascaleDbStorageVaultPathTemplate.match(exascaleDbStorageVaultName).project;
  }

  /**
   * Parse the location from ExascaleDbStorageVault resource.
   *
   * @param {string} exascaleDbStorageVaultName
   *   A fully-qualified path representing ExascaleDbStorageVault resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromExascaleDbStorageVaultName(exascaleDbStorageVaultName: string) {
    return this.pathTemplates.exascaleDbStorageVaultPathTemplate.match(exascaleDbStorageVaultName).location;
  }

  /**
   * Parse the exascale_db_storage_vault from ExascaleDbStorageVault resource.
   *
   * @param {string} exascaleDbStorageVaultName
   *   A fully-qualified path representing ExascaleDbStorageVault resource.
   * @returns {string} A string representing the exascale_db_storage_vault.
   */
  matchExascaleDbStorageVaultFromExascaleDbStorageVaultName(exascaleDbStorageVaultName: string) {
    return this.pathTemplates.exascaleDbStorageVaultPathTemplate.match(exascaleDbStorageVaultName).exascale_db_storage_vault;
  }

  /**
   * Return a fully-qualified giVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gi_version
   * @returns {string} Resource name string.
   */
  giVersionPath(project:string,location:string,giVersion:string) {
    return this.pathTemplates.giVersionPathTemplate.render({
      project: project,
      location: location,
      gi_version: giVersion,
    });
  }

  /**
   * Parse the project from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName).project;
  }

  /**
   * Parse the location from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName).location;
  }

  /**
   * Parse the gi_version from GiVersion resource.
   *
   * @param {string} giVersionName
   *   A fully-qualified path representing GiVersion resource.
   * @returns {string} A string representing the gi_version.
   */
  matchGiVersionFromGiVersionName(giVersionName: string) {
    return this.pathTemplates.giVersionPathTemplate.match(giVersionName).gi_version;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified minorVersion resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} gi_version
   * @param {string} minor_version
   * @returns {string} Resource name string.
   */
  minorVersionPath(project:string,location:string,giVersion:string,minorVersion:string) {
    return this.pathTemplates.minorVersionPathTemplate.render({
      project: project,
      location: location,
      gi_version: giVersion,
      minor_version: minorVersion,
    });
  }

  /**
   * Parse the project from MinorVersion resource.
   *
   * @param {string} minorVersionName
   *   A fully-qualified path representing MinorVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMinorVersionName(minorVersionName: string) {
    return this.pathTemplates.minorVersionPathTemplate.match(minorVersionName).project;
  }

  /**
   * Parse the location from MinorVersion resource.
   *
   * @param {string} minorVersionName
   *   A fully-qualified path representing MinorVersion resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMinorVersionName(minorVersionName: string) {
    return this.pathTemplates.minorVersionPathTemplate.match(minorVersionName).location;
  }

  /**
   * Parse the gi_version from MinorVersion resource.
   *
   * @param {string} minorVersionName
   *   A fully-qualified path representing MinorVersion resource.
   * @returns {string} A string representing the gi_version.
   */
  matchGiVersionFromMinorVersionName(minorVersionName: string) {
    return this.pathTemplates.minorVersionPathTemplate.match(minorVersionName).gi_version;
  }

  /**
   * Parse the minor_version from MinorVersion resource.
   *
   * @param {string} minorVersionName
   *   A fully-qualified path representing MinorVersion resource.
   * @returns {string} A string representing the minor_version.
   */
  matchMinorVersionFromMinorVersionName(minorVersionName: string) {
    return this.pathTemplates.minorVersionPathTemplate.match(minorVersionName).minor_version;
  }

  /**
   * Return a fully-qualified odbNetwork resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} odb_network
   * @returns {string} Resource name string.
   */
  odbNetworkPath(project:string,location:string,odbNetwork:string) {
    return this.pathTemplates.odbNetworkPathTemplate.render({
      project: project,
      location: location,
      odb_network: odbNetwork,
    });
  }

  /**
   * Parse the project from OdbNetwork resource.
   *
   * @param {string} odbNetworkName
   *   A fully-qualified path representing OdbNetwork resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOdbNetworkName(odbNetworkName: string) {
    return this.pathTemplates.odbNetworkPathTemplate.match(odbNetworkName).project;
  }

  /**
   * Parse the location from OdbNetwork resource.
   *
   * @param {string} odbNetworkName
   *   A fully-qualified path representing OdbNetwork resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOdbNetworkName(odbNetworkName: string) {
    return this.pathTemplates.odbNetworkPathTemplate.match(odbNetworkName).location;
  }

  /**
   * Parse the odb_network from OdbNetwork resource.
   *
   * @param {string} odbNetworkName
   *   A fully-qualified path representing OdbNetwork resource.
   * @returns {string} A string representing the odb_network.
   */
  matchOdbNetworkFromOdbNetworkName(odbNetworkName: string) {
    return this.pathTemplates.odbNetworkPathTemplate.match(odbNetworkName).odb_network;
  }

  /**
   * Return a fully-qualified odbSubnet resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} odb_network
   * @param {string} odb_subnet
   * @returns {string} Resource name string.
   */
  odbSubnetPath(project:string,location:string,odbNetwork:string,odbSubnet:string) {
    return this.pathTemplates.odbSubnetPathTemplate.render({
      project: project,
      location: location,
      odb_network: odbNetwork,
      odb_subnet: odbSubnet,
    });
  }

  /**
   * Parse the project from OdbSubnet resource.
   *
   * @param {string} odbSubnetName
   *   A fully-qualified path representing OdbSubnet resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromOdbSubnetName(odbSubnetName: string) {
    return this.pathTemplates.odbSubnetPathTemplate.match(odbSubnetName).project;
  }

  /**
   * Parse the location from OdbSubnet resource.
   *
   * @param {string} odbSubnetName
   *   A fully-qualified path representing OdbSubnet resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOdbSubnetName(odbSubnetName: string) {
    return this.pathTemplates.odbSubnetPathTemplate.match(odbSubnetName).location;
  }

  /**
   * Parse the odb_network from OdbSubnet resource.
   *
   * @param {string} odbSubnetName
   *   A fully-qualified path representing OdbSubnet resource.
   * @returns {string} A string representing the odb_network.
   */
  matchOdbNetworkFromOdbSubnetName(odbSubnetName: string) {
    return this.pathTemplates.odbSubnetPathTemplate.match(odbSubnetName).odb_network;
  }

  /**
   * Parse the odb_subnet from OdbSubnet resource.
   *
   * @param {string} odbSubnetName
   *   A fully-qualified path representing OdbSubnet resource.
   * @returns {string} A string representing the odb_subnet.
   */
  matchOdbSubnetFromOdbSubnetName(odbSubnetName: string) {
    return this.pathTemplates.odbSubnetPathTemplate.match(odbSubnetName).odb_subnet;
  }

  /**
   * Return a fully-qualified pluggableDatabase resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} pluggable_database
   * @returns {string} Resource name string.
   */
  pluggableDatabasePath(project:string,location:string,pluggableDatabase:string) {
    return this.pathTemplates.pluggableDatabasePathTemplate.render({
      project: project,
      location: location,
      pluggable_database: pluggableDatabase,
    });
  }

  /**
   * Parse the project from PluggableDatabase resource.
   *
   * @param {string} pluggableDatabaseName
   *   A fully-qualified path representing PluggableDatabase resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPluggableDatabaseName(pluggableDatabaseName: string) {
    return this.pathTemplates.pluggableDatabasePathTemplate.match(pluggableDatabaseName).project;
  }

  /**
   * Parse the location from PluggableDatabase resource.
   *
   * @param {string} pluggableDatabaseName
   *   A fully-qualified path representing PluggableDatabase resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPluggableDatabaseName(pluggableDatabaseName: string) {
    return this.pathTemplates.pluggableDatabasePathTemplate.match(pluggableDatabaseName).location;
  }

  /**
   * Parse the pluggable_database from PluggableDatabase resource.
   *
   * @param {string} pluggableDatabaseName
   *   A fully-qualified path representing PluggableDatabase resource.
   * @returns {string} A string representing the pluggable_database.
   */
  matchPluggableDatabaseFromPluggableDatabaseName(pluggableDatabaseName: string) {
    return this.pathTemplates.pluggableDatabasePathTemplate.match(pluggableDatabaseName).pluggable_database;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationCloudVmClusterDbNodes resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} cloud_vm_cluster
   * @param {string} db_node
   * @returns {string} Resource name string.
   */
  projectLocationCloudVmClusterDbNodesPath(project:string,location:string,cloudVmCluster:string,dbNode:string) {
    return this.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.render({
      project: project,
      location: location,
      cloud_vm_cluster: cloudVmCluster,
      db_node: dbNode,
    });
  }

  /**
   * Parse the project from ProjectLocationCloudVmClusterDbNodes resource.
   *
   * @param {string} projectLocationCloudVmClusterDbNodesName
   *   A fully-qualified path representing project_location_cloud_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationCloudVmClusterDbNodesName(projectLocationCloudVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match(projectLocationCloudVmClusterDbNodesName).project;
  }

  /**
   * Parse the location from ProjectLocationCloudVmClusterDbNodes resource.
   *
   * @param {string} projectLocationCloudVmClusterDbNodesName
   *   A fully-qualified path representing project_location_cloud_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationCloudVmClusterDbNodesName(projectLocationCloudVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match(projectLocationCloudVmClusterDbNodesName).location;
  }

  /**
   * Parse the cloud_vm_cluster from ProjectLocationCloudVmClusterDbNodes resource.
   *
   * @param {string} projectLocationCloudVmClusterDbNodesName
   *   A fully-qualified path representing project_location_cloud_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the cloud_vm_cluster.
   */
  matchCloudVmClusterFromProjectLocationCloudVmClusterDbNodesName(projectLocationCloudVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match(projectLocationCloudVmClusterDbNodesName).cloud_vm_cluster;
  }

  /**
   * Parse the db_node from ProjectLocationCloudVmClusterDbNodes resource.
   *
   * @param {string} projectLocationCloudVmClusterDbNodesName
   *   A fully-qualified path representing project_location_cloud_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the db_node.
   */
  matchDbNodeFromProjectLocationCloudVmClusterDbNodesName(projectLocationCloudVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match(projectLocationCloudVmClusterDbNodesName).db_node;
  }

  /**
   * Return a fully-qualified projectLocationExadbVmClusterDbNodes resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} exadb_vm_cluster
   * @param {string} db_node
   * @returns {string} Resource name string.
   */
  projectLocationExadbVmClusterDbNodesPath(project:string,location:string,exadbVmCluster:string,dbNode:string) {
    return this.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.render({
      project: project,
      location: location,
      exadb_vm_cluster: exadbVmCluster,
      db_node: dbNode,
    });
  }

  /**
   * Parse the project from ProjectLocationExadbVmClusterDbNodes resource.
   *
   * @param {string} projectLocationExadbVmClusterDbNodesName
   *   A fully-qualified path representing project_location_exadb_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationExadbVmClusterDbNodesName(projectLocationExadbVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match(projectLocationExadbVmClusterDbNodesName).project;
  }

  /**
   * Parse the location from ProjectLocationExadbVmClusterDbNodes resource.
   *
   * @param {string} projectLocationExadbVmClusterDbNodesName
   *   A fully-qualified path representing project_location_exadb_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationExadbVmClusterDbNodesName(projectLocationExadbVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match(projectLocationExadbVmClusterDbNodesName).location;
  }

  /**
   * Parse the exadb_vm_cluster from ProjectLocationExadbVmClusterDbNodes resource.
   *
   * @param {string} projectLocationExadbVmClusterDbNodesName
   *   A fully-qualified path representing project_location_exadb_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the exadb_vm_cluster.
   */
  matchExadbVmClusterFromProjectLocationExadbVmClusterDbNodesName(projectLocationExadbVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match(projectLocationExadbVmClusterDbNodesName).exadb_vm_cluster;
  }

  /**
   * Parse the db_node from ProjectLocationExadbVmClusterDbNodes resource.
   *
   * @param {string} projectLocationExadbVmClusterDbNodesName
   *   A fully-qualified path representing project_location_exadb_vm_cluster_dbNodes resource.
   * @returns {string} A string representing the db_node.
   */
  matchDbNodeFromProjectLocationExadbVmClusterDbNodesName(projectLocationExadbVmClusterDbNodesName: string) {
    return this.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match(projectLocationExadbVmClusterDbNodesName).db_node;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.oracleDatabaseStub && !this._terminated) {
      return this.oracleDatabaseStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}