// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as oracledatabaseModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.OracleDatabaseClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'oracledatabase.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = oracledatabaseModule.v1.OracleDatabaseClient.servicePath;
                assert.strictEqual(servicePath, 'oracledatabase.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = oracledatabaseModule.v1.OracleDatabaseClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'oracledatabase.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'oracledatabase.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'oracledatabase.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new oracledatabaseModule.v1.OracleDatabaseClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'oracledatabase.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new oracledatabaseModule.v1.OracleDatabaseClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'oracledatabase.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new oracledatabaseModule.v1.OracleDatabaseClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = oracledatabaseModule.v1.OracleDatabaseClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.oracleDatabaseStub, undefined);
            await client.initialize();
            assert(client.oracleDatabaseStub);
        });

        it('has close method for the initialized client', done => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.oracleDatabaseStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.oracleDatabaseStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getCloudExadataInfrastructure', () => {
        it('invokes getCloudExadataInfrastructure without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
            );
            client.innerApiCalls.getCloudExadataInfrastructure = stubSimpleCall(expectedResponse);
            const [response] = await client.getCloudExadataInfrastructure(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudExadataInfrastructure without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()
            );
            client.innerApiCalls.getCloudExadataInfrastructure = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCloudExadataInfrastructure(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudExadataInfrastructure with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCloudExadataInfrastructure = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCloudExadataInfrastructure(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudExadataInfrastructure with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getCloudExadataInfrastructure(request), expectedError);
        });
    });

    describe('getCloudVmCluster', () => {
        it('invokes getCloudVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
            );
            client.innerApiCalls.getCloudVmCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.getCloudVmCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CloudVmCluster()
            );
            client.innerApiCalls.getCloudVmCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getCloudVmCluster(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.ICloudVmCluster|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudVmCluster with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getCloudVmCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getCloudVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getCloudVmCluster with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getCloudVmCluster(request), expectedError);
        });
    });

    describe('getAutonomousDatabase', () => {
        it('invokes getAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
            );
            client.innerApiCalls.getAutonomousDatabase = stubSimpleCall(expectedResponse);
            const [response] = await client.getAutonomousDatabase(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()
            );
            client.innerApiCalls.getAutonomousDatabase = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAutonomousDatabase(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAutonomousDatabase with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getAutonomousDatabase = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAutonomousDatabase with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getAutonomousDatabase(request), expectedError);
        });
    });

    describe('generateAutonomousDatabaseWallet', () => {
        it('invokes generateAutonomousDatabaseWallet without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse()
            );
            client.innerApiCalls.generateAutonomousDatabaseWallet = stubSimpleCall(expectedResponse);
            const [response] = await client.generateAutonomousDatabaseWallet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateAutonomousDatabaseWallet without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletResponse()
            );
            client.innerApiCalls.generateAutonomousDatabaseWallet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.generateAutonomousDatabaseWallet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IGenerateAutonomousDatabaseWalletResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateAutonomousDatabaseWallet with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.generateAutonomousDatabaseWallet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.generateAutonomousDatabaseWallet(request), expectedError);
            const actualRequest = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.generateAutonomousDatabaseWallet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes generateAutonomousDatabaseWallet with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GenerateAutonomousDatabaseWalletRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.generateAutonomousDatabaseWallet(request), expectedError);
        });
    });

    describe('getOdbNetwork', () => {
        it('invokes getOdbNetwork without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.OdbNetwork()
            );
            client.innerApiCalls.getOdbNetwork = stubSimpleCall(expectedResponse);
            const [response] = await client.getOdbNetwork(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbNetwork without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.OdbNetwork()
            );
            client.innerApiCalls.getOdbNetwork = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getOdbNetwork(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IOdbNetwork|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbNetwork with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getOdbNetwork = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOdbNetwork(request), expectedError);
            const actualRequest = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbNetwork with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getOdbNetwork(request), expectedError);
        });
    });

    describe('getOdbSubnet', () => {
        it('invokes getOdbSubnet without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.OdbSubnet()
            );
            client.innerApiCalls.getOdbSubnet = stubSimpleCall(expectedResponse);
            const [response] = await client.getOdbSubnet(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbSubnet without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.OdbSubnet()
            );
            client.innerApiCalls.getOdbSubnet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getOdbSubnet(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IOdbSubnet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbSubnet with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getOdbSubnet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOdbSubnet(request), expectedError);
            const actualRequest = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getOdbSubnet with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getOdbSubnet(request), expectedError);
        });
    });

    describe('getExadbVmCluster', () => {
        it('invokes getExadbVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()
            );
            client.innerApiCalls.getExadbVmCluster = stubSimpleCall(expectedResponse);
            const [response] = await client.getExadbVmCluster(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExadbVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()
            );
            client.innerApiCalls.getExadbVmCluster = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getExadbVmCluster(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IExadbVmCluster|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExadbVmCluster with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getExadbVmCluster = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getExadbVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExadbVmCluster with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getExadbVmCluster(request), expectedError);
        });
    });

    describe('getExascaleDbStorageVault', () => {
        it('invokes getExascaleDbStorageVault without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()
            );
            client.innerApiCalls.getExascaleDbStorageVault = stubSimpleCall(expectedResponse);
            const [response] = await client.getExascaleDbStorageVault(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExascaleDbStorageVault without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()
            );
            client.innerApiCalls.getExascaleDbStorageVault = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getExascaleDbStorageVault(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExascaleDbStorageVault with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getExascaleDbStorageVault = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getExascaleDbStorageVault(request), expectedError);
            const actualRequest = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getExascaleDbStorageVault with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getExascaleDbStorageVault(request), expectedError);
        });
    });

    describe('getDatabase', () => {
        it('invokes getDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.Database()
            );
            client.innerApiCalls.getDatabase = stubSimpleCall(expectedResponse);
            const [response] = await client.getDatabase(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.Database()
            );
            client.innerApiCalls.getDatabase = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDatabase(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDatabase|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDatabase with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDatabase = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDatabase with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getDatabase(request), expectedError);
        });
    });

    describe('getPluggableDatabase', () => {
        it('invokes getPluggableDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.PluggableDatabase()
            );
            client.innerApiCalls.getPluggableDatabase = stubSimpleCall(expectedResponse);
            const [response] = await client.getPluggableDatabase(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPluggableDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.PluggableDatabase()
            );
            client.innerApiCalls.getPluggableDatabase = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getPluggableDatabase(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IPluggableDatabase|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPluggableDatabase with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getPluggableDatabase = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getPluggableDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getPluggableDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getPluggableDatabase with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetPluggableDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getPluggableDatabase(request), expectedError);
        });
    });

    describe('getDbSystem', () => {
        it('invokes getDbSystem without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DbSystem()
            );
            client.innerApiCalls.getDbSystem = stubSimpleCall(expectedResponse);
            const [response] = await client.getDbSystem(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDbSystem without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DbSystem()
            );
            client.innerApiCalls.getDbSystem = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDbSystem(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbSystem|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDbSystem with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDbSystem = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDbSystem(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDbSystem with closed client', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.GetDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.GetDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getDbSystem(request), expectedError);
        });
    });

    describe('createCloudExadataInfrastructure', () => {
        it('invokes createCloudExadataInfrastructure without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCloudExadataInfrastructure = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCloudExadataInfrastructure(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudExadataInfrastructure without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCloudExadataInfrastructure = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCloudExadataInfrastructure(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudExadataInfrastructure with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCloudExadataInfrastructure = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCloudExadataInfrastructure(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudExadataInfrastructure with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudExadataInfrastructureRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCloudExadataInfrastructure = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCloudExadataInfrastructure(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateCloudExadataInfrastructureProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateCloudExadataInfrastructureProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateCloudExadataInfrastructureProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateCloudExadataInfrastructureProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteCloudExadataInfrastructure', () => {
        it('invokes deleteCloudExadataInfrastructure without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCloudExadataInfrastructure = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteCloudExadataInfrastructure(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudExadataInfrastructure without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCloudExadataInfrastructure = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCloudExadataInfrastructure(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudExadataInfrastructure with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCloudExadataInfrastructure = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteCloudExadataInfrastructure(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudExadataInfrastructure with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudExadataInfrastructureRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCloudExadataInfrastructure = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteCloudExadataInfrastructure(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudExadataInfrastructure as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteCloudExadataInfrastructureProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteCloudExadataInfrastructureProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteCloudExadataInfrastructureProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteCloudExadataInfrastructureProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createCloudVmCluster', () => {
        it('invokes createCloudVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCloudVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createCloudVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createCloudVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createCloudVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.ICloudVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCloudVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createCloudVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createCloudVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateCloudVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createCloudVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createCloudVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateCloudVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateCloudVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateCloudVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateCloudVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteCloudVmCluster', () => {
        it('invokes deleteCloudVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteCloudVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteCloudVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteCloudVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteCloudVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteCloudVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteCloudVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteCloudVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteCloudVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteCloudVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteCloudVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteCloudVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteCloudVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createAutonomousDatabase', () => {
        it('invokes createAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateAutonomousDatabaseRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateAutonomousDatabase', () => {
        it('invokes updateAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest()
            );
            request.autonomousDatabase ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest', ['autonomousDatabase', 'name']);
            request.autonomousDatabase.name = defaultValue1;
            const expectedHeaderRequestParams = `autonomous_database.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest()
            );
            request.autonomousDatabase ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest', ['autonomousDatabase', 'name']);
            request.autonomousDatabase.name = defaultValue1;
            const expectedHeaderRequestParams = `autonomous_database.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest()
            );
            request.autonomousDatabase ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest', ['autonomousDatabase', 'name']);
            request.autonomousDatabase.name = defaultValue1;
            const expectedHeaderRequestParams = `autonomous_database.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest()
            );
            request.autonomousDatabase ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateAutonomousDatabaseRequest', ['autonomousDatabase', 'name']);
            request.autonomousDatabase.name = defaultValue1;
            const expectedHeaderRequestParams = `autonomous_database.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteAutonomousDatabase', () => {
        it('invokes deleteAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('restoreAutonomousDatabase', () => {
        it('invokes restoreAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.restoreAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restoreAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.restoreAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restoreAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestoreAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.restoreAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.restoreAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restoreAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkRestoreAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRestoreAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRestoreAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRestoreAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('stopAutonomousDatabase', () => {
        it('invokes stopAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.stopAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.stopAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.stopAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.stopAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.stopAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.stopAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes stopAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StopAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.stopAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.stopAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.stopAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkStopAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStopAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStopAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStopAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('startAutonomousDatabase', () => {
        it('invokes startAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.startAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.startAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.startAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.startAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.startAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.startAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes startAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.StartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.startAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.startAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.startAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkStartAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkStartAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkStartAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkStartAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('restartAutonomousDatabase', () => {
        it('invokes restartAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.restartAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.restartAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restartAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.restartAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.restartAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restartAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.restartAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.restartAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes restartAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RestartAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.restartAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.restartAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.restartAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkRestartAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRestartAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRestartAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRestartAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('switchoverAutonomousDatabase', () => {
        it('invokes switchoverAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.switchoverAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.switchoverAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes switchoverAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.switchoverAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.switchoverAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes switchoverAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.switchoverAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.switchoverAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes switchoverAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.SwitchoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.switchoverAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.switchoverAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.switchoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkSwitchoverAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkSwitchoverAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkSwitchoverAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkSwitchoverAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('failoverAutonomousDatabase', () => {
        it('invokes failoverAutonomousDatabase without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.failoverAutonomousDatabase = stubLongRunningCall(expectedResponse);
            const [operation] = await client.failoverAutonomousDatabase(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes failoverAutonomousDatabase without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.failoverAutonomousDatabase = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.failoverAutonomousDatabase(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IAutonomousDatabase, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes failoverAutonomousDatabase with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.failoverAutonomousDatabase = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.failoverAutonomousDatabase(request), expectedError);
            const actualRequest = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes failoverAutonomousDatabase with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.FailoverAutonomousDatabaseRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.failoverAutonomousDatabase = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.failoverAutonomousDatabase(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.failoverAutonomousDatabase as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkFailoverAutonomousDatabaseProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkFailoverAutonomousDatabaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkFailoverAutonomousDatabaseProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkFailoverAutonomousDatabaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createOdbNetwork', () => {
        it('invokes createOdbNetwork without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createOdbNetwork = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createOdbNetwork(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbNetwork without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createOdbNetwork = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createOdbNetwork(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IOdbNetwork, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbNetwork with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createOdbNetwork = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createOdbNetwork(request), expectedError);
            const actualRequest = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbNetwork with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbNetworkRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createOdbNetwork = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createOdbNetwork(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateOdbNetworkProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateOdbNetworkProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateOdbNetworkProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateOdbNetworkProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteOdbNetwork', () => {
        it('invokes deleteOdbNetwork without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteOdbNetwork = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteOdbNetwork(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbNetwork without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteOdbNetwork = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteOdbNetwork(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbNetwork with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOdbNetwork = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteOdbNetwork(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbNetwork with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbNetworkRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOdbNetwork = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteOdbNetwork(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbNetwork as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteOdbNetworkProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteOdbNetworkProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteOdbNetworkProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteOdbNetworkProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createOdbSubnet', () => {
        it('invokes createOdbSubnet without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createOdbSubnet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createOdbSubnet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbSubnet without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createOdbSubnet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createOdbSubnet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IOdbSubnet, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbSubnet with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createOdbSubnet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createOdbSubnet(request), expectedError);
            const actualRequest = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createOdbSubnet with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateOdbSubnetRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createOdbSubnet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createOdbSubnet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateOdbSubnetProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateOdbSubnetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateOdbSubnetProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateOdbSubnetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteOdbSubnet', () => {
        it('invokes deleteOdbSubnet without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteOdbSubnet = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteOdbSubnet(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbSubnet without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteOdbSubnet = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteOdbSubnet(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbSubnet with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOdbSubnet = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteOdbSubnet(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteOdbSubnet with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteOdbSubnetRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOdbSubnet = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteOdbSubnet(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteOdbSubnet as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteOdbSubnetProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteOdbSubnetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteOdbSubnetProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteOdbSubnetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createExadbVmCluster', () => {
        it('invokes createExadbVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createExadbVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createExadbVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExadbVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createExadbVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createExadbVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExadbVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createExadbVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createExadbVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExadbVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExadbVmClusterRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createExadbVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createExadbVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateExadbVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateExadbVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateExadbVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateExadbVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteExadbVmCluster', () => {
        it('invokes deleteExadbVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteExadbVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteExadbVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExadbVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteExadbVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteExadbVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExadbVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExadbVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteExadbVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExadbVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExadbVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteExadbVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteExadbVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteExadbVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteExadbVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteExadbVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateExadbVmCluster', () => {
        it('invokes updateExadbVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest()
            );
            request.exadbVmCluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest', ['exadbVmCluster', 'name']);
            request.exadbVmCluster.name = defaultValue1;
            const expectedHeaderRequestParams = `exadb_vm_cluster.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateExadbVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateExadbVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateExadbVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest()
            );
            request.exadbVmCluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest', ['exadbVmCluster', 'name']);
            request.exadbVmCluster.name = defaultValue1;
            const expectedHeaderRequestParams = `exadb_vm_cluster.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateExadbVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateExadbVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateExadbVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest()
            );
            request.exadbVmCluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest', ['exadbVmCluster', 'name']);
            request.exadbVmCluster.name = defaultValue1;
            const expectedHeaderRequestParams = `exadb_vm_cluster.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateExadbVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateExadbVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateExadbVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest()
            );
            request.exadbVmCluster ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.UpdateExadbVmClusterRequest', ['exadbVmCluster', 'name']);
            request.exadbVmCluster.name = defaultValue1;
            const expectedHeaderRequestParams = `exadb_vm_cluster.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateExadbVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateExadbVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateExadbVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateExadbVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateExadbVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateExadbVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('removeVirtualMachineExadbVmCluster', () => {
        it('invokes removeVirtualMachineExadbVmCluster without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.removeVirtualMachineExadbVmCluster = stubLongRunningCall(expectedResponse);
            const [operation] = await client.removeVirtualMachineExadbVmCluster(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeVirtualMachineExadbVmCluster without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.removeVirtualMachineExadbVmCluster = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.removeVirtualMachineExadbVmCluster(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IExadbVmCluster, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeVirtualMachineExadbVmCluster with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.removeVirtualMachineExadbVmCluster = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.removeVirtualMachineExadbVmCluster(request), expectedError);
            const actualRequest = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes removeVirtualMachineExadbVmCluster with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.RemoveVirtualMachineExadbVmClusterRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.removeVirtualMachineExadbVmCluster = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.removeVirtualMachineExadbVmCluster(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.removeVirtualMachineExadbVmCluster as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkRemoveVirtualMachineExadbVmClusterProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRemoveVirtualMachineExadbVmClusterProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkRemoveVirtualMachineExadbVmClusterProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRemoveVirtualMachineExadbVmClusterProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createExascaleDbStorageVault', () => {
        it('invokes createExascaleDbStorageVault without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createExascaleDbStorageVault = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createExascaleDbStorageVault(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExascaleDbStorageVault without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createExascaleDbStorageVault = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createExascaleDbStorageVault(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExascaleDbStorageVault with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createExascaleDbStorageVault = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createExascaleDbStorageVault(request), expectedError);
            const actualRequest = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createExascaleDbStorageVault with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateExascaleDbStorageVaultRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createExascaleDbStorageVault = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createExascaleDbStorageVault(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateExascaleDbStorageVaultProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateExascaleDbStorageVaultProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateExascaleDbStorageVaultProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateExascaleDbStorageVaultProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteExascaleDbStorageVault', () => {
        it('invokes deleteExascaleDbStorageVault without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteExascaleDbStorageVault = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteExascaleDbStorageVault(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExascaleDbStorageVault without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteExascaleDbStorageVault = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteExascaleDbStorageVault(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExascaleDbStorageVault with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExascaleDbStorageVault = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteExascaleDbStorageVault(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteExascaleDbStorageVault with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteExascaleDbStorageVaultRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteExascaleDbStorageVault = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteExascaleDbStorageVault(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteExascaleDbStorageVault as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteExascaleDbStorageVaultProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteExascaleDbStorageVaultProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteExascaleDbStorageVaultProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteExascaleDbStorageVaultProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createDbSystem', () => {
        it('invokes createDbSystem without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateDbSystemRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDbSystem = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createDbSystem(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDbSystem without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateDbSystemRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDbSystem = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDbSystem(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.oracledatabase.v1.IDbSystem, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDbSystem with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateDbSystemRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDbSystem = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createDbSystem(request), expectedError);
            const actualRequest = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDbSystem with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.CreateDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.CreateDbSystemRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDbSystem = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createDbSystem(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateDbSystemProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateDbSystemProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateDbSystemProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateDbSystemProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteDbSystem', () => {
        it('invokes deleteDbSystem without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDbSystem = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteDbSystem(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDbSystem without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDbSystem = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDbSystem(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.oracledatabase.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDbSystem with call error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDbSystem = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteDbSystem(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDbSystem with LRO error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.DeleteDbSystemRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.DeleteDbSystemRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDbSystem = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteDbSystem(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDbSystem as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteDbSystemProgress without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteDbSystemProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteDbSystemProgress with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteDbSystemProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listCloudExadataInfrastructures', () => {
        it('invokes listCloudExadataInfrastructures without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
            ];
            client.innerApiCalls.listCloudExadataInfrastructures = stubSimpleCall(expectedResponse);
            const [response] = await client.listCloudExadataInfrastructures(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudExadataInfrastructures without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
            ];
            client.innerApiCalls.listCloudExadataInfrastructures = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCloudExadataInfrastructures(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudExadataInfrastructures with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCloudExadataInfrastructures = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCloudExadataInfrastructures(request), expectedError);
            const actualRequest = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudExadataInfrastructures as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudExadataInfrastructuresStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
            ];
            client.descriptors.page.listCloudExadataInfrastructures.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCloudExadataInfrastructuresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCloudExadataInfrastructures.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCloudExadataInfrastructures, request));
            assert(
                (client.descriptors.page.listCloudExadataInfrastructures.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listCloudExadataInfrastructuresStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCloudExadataInfrastructures.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCloudExadataInfrastructuresStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCloudExadataInfrastructures.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCloudExadataInfrastructures, request));
            assert(
                (client.descriptors.page.listCloudExadataInfrastructures.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listCloudExadataInfrastructures without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudExadataInfrastructure()),
            ];
            client.descriptors.page.listCloudExadataInfrastructures.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[] = [];
            const iterable = client.listCloudExadataInfrastructuresAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCloudExadataInfrastructures.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCloudExadataInfrastructures.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listCloudExadataInfrastructures with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudExadataInfrastructuresRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCloudExadataInfrastructures.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCloudExadataInfrastructuresAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.ICloudExadataInfrastructure[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCloudExadataInfrastructures.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCloudExadataInfrastructures.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listCloudVmClusters', () => {
        it('invokes listCloudVmClusters without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
            ];
            client.innerApiCalls.listCloudVmClusters = stubSimpleCall(expectedResponse);
            const [response] = await client.listCloudVmClusters(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudVmClusters without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
            ];
            client.innerApiCalls.listCloudVmClusters = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listCloudVmClusters(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.ICloudVmCluster[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudVmClusters with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listCloudVmClusters = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCloudVmClusters(request), expectedError);
            const actualRequest = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listCloudVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listCloudVmClustersStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
            ];
            client.descriptors.page.listCloudVmClusters.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCloudVmClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.CloudVmCluster[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.CloudVmCluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCloudVmClusters, request));
            assert(
                (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listCloudVmClustersStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCloudVmClusters.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCloudVmClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.CloudVmCluster[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.CloudVmCluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listCloudVmClusters, request));
            assert(
                (client.descriptors.page.listCloudVmClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listCloudVmClusters without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.CloudVmCluster()),
            ];
            client.descriptors.page.listCloudVmClusters.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.ICloudVmCluster[] = [];
            const iterable = client.listCloudVmClustersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listCloudVmClusters with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListCloudVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listCloudVmClusters.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCloudVmClustersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.ICloudVmCluster[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listCloudVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listEntitlements', () => {
        it('invokes listEntitlements without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
            ];
            client.innerApiCalls.listEntitlements = stubSimpleCall(expectedResponse);
            const [response] = await client.listEntitlements(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEntitlements without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
            ];
            client.innerApiCalls.listEntitlements = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listEntitlements(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IEntitlement[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEntitlements with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listEntitlements = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listEntitlements(request), expectedError);
            const actualRequest = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listEntitlements as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listEntitlementsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
            ];
            client.descriptors.page.listEntitlements.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listEntitlementsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.Entitlement[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.Entitlement) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listEntitlements.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEntitlements, request));
            assert(
                (client.descriptors.page.listEntitlements.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listEntitlementsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listEntitlements.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listEntitlementsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.Entitlement[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.Entitlement) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listEntitlements.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listEntitlements, request));
            assert(
                (client.descriptors.page.listEntitlements.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listEntitlements without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Entitlement()),
            ];
            client.descriptors.page.listEntitlements.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IEntitlement[] = [];
            const iterable = client.listEntitlementsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listEntitlements with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListEntitlementsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListEntitlementsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listEntitlements.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listEntitlementsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IEntitlement[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listEntitlements.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbServers', () => {
        it('invokes listDbServers without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
            ];
            client.innerApiCalls.listDbServers = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbServers(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbServers without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
            ];
            client.innerApiCalls.listDbServers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbServers(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbServer[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbServers with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbServers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbServers(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbServers as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbServersStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
            ];
            client.descriptors.page.listDbServers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbServersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbServer[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbServer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbServers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbServers, request));
            assert(
                (client.descriptors.page.listDbServers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbServersStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbServers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbServersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbServer[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbServer) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbServers.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbServers, request));
            assert(
                (client.descriptors.page.listDbServers.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbServers without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbServer()),
            ];
            client.descriptors.page.listDbServers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbServer[] = [];
            const iterable = client.listDbServersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbServers with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbServersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbServersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbServers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbServersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbServer[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbServers.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbNodes', () => {
        it('invokes listDbNodes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
            ];
            client.innerApiCalls.listDbNodes = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbNodes(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbNodes without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
            ];
            client.innerApiCalls.listDbNodes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbNodes(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbNode[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbNodes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbNodes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbNodes(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbNodes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbNodesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
            ];
            client.descriptors.page.listDbNodes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbNodesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbNode[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbNode) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbNodes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbNodes, request));
            assert(
                (client.descriptors.page.listDbNodes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbNodesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbNodes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbNodesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbNode[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbNode) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbNodes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbNodes, request));
            assert(
                (client.descriptors.page.listDbNodes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbNodes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbNode()),
            ];
            client.descriptors.page.listDbNodes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbNode[] = [];
            const iterable = client.listDbNodesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbNodes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbNodesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbNodesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbNodes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbNodesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbNode[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbNodes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listGiVersions', () => {
        it('invokes listGiVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
            ];
            client.innerApiCalls.listGiVersions = stubSimpleCall(expectedResponse);
            const [response] = await client.listGiVersions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listGiVersions without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
            ];
            client.innerApiCalls.listGiVersions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listGiVersions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IGiVersion[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listGiVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listGiVersions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listGiVersions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listGiVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listGiVersionsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
            ];
            client.descriptors.page.listGiVersions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listGiVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.GiVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.GiVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listGiVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGiVersions, request));
            assert(
                (client.descriptors.page.listGiVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listGiVersionsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listGiVersions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listGiVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.GiVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.GiVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listGiVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGiVersions, request));
            assert(
                (client.descriptors.page.listGiVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listGiVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.GiVersion()),
            ];
            client.descriptors.page.listGiVersions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IGiVersion[] = [];
            const iterable = client.listGiVersionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listGiVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListGiVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListGiVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listGiVersions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listGiVersionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IGiVersion[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listGiVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listMinorVersions', () => {
        it('invokes listMinorVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
            ];
            client.innerApiCalls.listMinorVersions = stubSimpleCall(expectedResponse);
            const [response] = await client.listMinorVersions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMinorVersions without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
            ];
            client.innerApiCalls.listMinorVersions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMinorVersions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IMinorVersion[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMinorVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMinorVersions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMinorVersions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMinorVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMinorVersionsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
            ];
            client.descriptors.page.listMinorVersions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMinorVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.MinorVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.MinorVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMinorVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMinorVersions, request));
            assert(
                (client.descriptors.page.listMinorVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMinorVersionsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMinorVersions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMinorVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.MinorVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.MinorVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMinorVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMinorVersions, request));
            assert(
                (client.descriptors.page.listMinorVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMinorVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.MinorVersion()),
            ];
            client.descriptors.page.listMinorVersions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IMinorVersion[] = [];
            const iterable = client.listMinorVersionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMinorVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMinorVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMinorVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListMinorVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListMinorVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMinorVersions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMinorVersionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IMinorVersion[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMinorVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMinorVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbSystemShapes', () => {
        it('invokes listDbSystemShapes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
            ];
            client.innerApiCalls.listDbSystemShapes = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbSystemShapes(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemShapes without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
            ];
            client.innerApiCalls.listDbSystemShapes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbSystemShapes(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbSystemShape[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemShapes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbSystemShapes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbSystemShapes(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemShapes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemShapesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
            ];
            client.descriptors.page.listDbSystemShapes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbSystemShapesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystemShape[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystemShape) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystemShapes, request));
            assert(
                (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbSystemShapesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystemShapes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbSystemShapesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystemShape[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystemShape) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystemShapes, request));
            assert(
                (client.descriptors.page.listDbSystemShapes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbSystemShapes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemShape()),
            ];
            client.descriptors.page.listDbSystemShapes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbSystemShape[] = [];
            const iterable = client.listDbSystemShapesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbSystemShapes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemShapesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystemShapes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbSystemShapesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbSystemShape[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystemShapes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listAutonomousDatabases', () => {
        it('invokes listAutonomousDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
            ];
            client.innerApiCalls.listAutonomousDatabases = stubSimpleCall(expectedResponse);
            const [response] = await client.listAutonomousDatabases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabases without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
            ];
            client.innerApiCalls.listAutonomousDatabases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAutonomousDatabases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAutonomousDatabases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAutonomousDatabases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabasesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
            ];
            client.descriptors.page.listAutonomousDatabases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAutonomousDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabase[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabase) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAutonomousDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabases, request));
            assert(
                (client.descriptors.page.listAutonomousDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAutonomousDatabasesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAutonomousDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabase[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabase) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAutonomousDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabases, request));
            assert(
                (client.descriptors.page.listAutonomousDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAutonomousDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabase()),
            ];
            client.descriptors.page.listAutonomousDatabases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[] = [];
            const iterable = client.listAutonomousDatabasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAutonomousDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAutonomousDatabasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabase[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listAutonomousDbVersions', () => {
        it('invokes listAutonomousDbVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
            ];
            client.innerApiCalls.listAutonomousDbVersions = stubSimpleCall(expectedResponse);
            const [response] = await client.listAutonomousDbVersions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDbVersions without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
            ];
            client.innerApiCalls.listAutonomousDbVersions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAutonomousDbVersions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDbVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAutonomousDbVersions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAutonomousDbVersions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDbVersionsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
            ];
            client.descriptors.page.listAutonomousDbVersions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAutonomousDbVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAutonomousDbVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDbVersions, request));
            assert(
                (client.descriptors.page.listAutonomousDbVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAutonomousDbVersionsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDbVersions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAutonomousDbVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDbVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAutonomousDbVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDbVersions, request));
            assert(
                (client.descriptors.page.listAutonomousDbVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAutonomousDbVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDbVersion()),
            ];
            client.descriptors.page.listAutonomousDbVersions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[] = [];
            const iterable = client.listAutonomousDbVersionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAutonomousDbVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDbVersions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAutonomousDbVersionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDbVersion[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listAutonomousDatabaseCharacterSets', () => {
        it('invokes listAutonomousDatabaseCharacterSets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
            ];
            client.innerApiCalls.listAutonomousDatabaseCharacterSets = stubSimpleCall(expectedResponse);
            const [response] = await client.listAutonomousDatabaseCharacterSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseCharacterSets without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
            ];
            client.innerApiCalls.listAutonomousDatabaseCharacterSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAutonomousDatabaseCharacterSets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseCharacterSets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAutonomousDatabaseCharacterSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAutonomousDatabaseCharacterSets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseCharacterSetsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
            ];
            client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAutonomousDatabaseCharacterSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabaseCharacterSets, request));
            assert(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAutonomousDatabaseCharacterSetsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAutonomousDatabaseCharacterSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabaseCharacterSets, request));
            assert(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAutonomousDatabaseCharacterSets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseCharacterSet()),
            ];
            client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[] = [];
            const iterable = client.listAutonomousDatabaseCharacterSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAutonomousDatabaseCharacterSets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAutonomousDatabaseCharacterSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseCharacterSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listAutonomousDatabaseBackups', () => {
        it('invokes listAutonomousDatabaseBackups without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
            ];
            client.innerApiCalls.listAutonomousDatabaseBackups = stubSimpleCall(expectedResponse);
            const [response] = await client.listAutonomousDatabaseBackups(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseBackups without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
            ];
            client.innerApiCalls.listAutonomousDatabaseBackups = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAutonomousDatabaseBackups(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseBackups with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAutonomousDatabaseBackups = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAutonomousDatabaseBackups(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAutonomousDatabaseBackups as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAutonomousDatabaseBackupsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
            ];
            client.descriptors.page.listAutonomousDatabaseBackups.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAutonomousDatabaseBackupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAutonomousDatabaseBackups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabaseBackups, request));
            assert(
                (client.descriptors.page.listAutonomousDatabaseBackups.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAutonomousDatabaseBackupsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabaseBackups.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAutonomousDatabaseBackupsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAutonomousDatabaseBackups.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAutonomousDatabaseBackups, request));
            assert(
                (client.descriptors.page.listAutonomousDatabaseBackups.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAutonomousDatabaseBackups without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.AutonomousDatabaseBackup()),
            ];
            client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[] = [];
            const iterable = client.listAutonomousDatabaseBackupsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAutonomousDatabaseBackups with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListAutonomousDatabaseBackupsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAutonomousDatabaseBackupsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IAutonomousDatabaseBackup[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAutonomousDatabaseBackups.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listOdbNetworks', () => {
        it('invokes listOdbNetworks without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
            ];
            client.innerApiCalls.listOdbNetworks = stubSimpleCall(expectedResponse);
            const [response] = await client.listOdbNetworks(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbNetworks without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
            ];
            client.innerApiCalls.listOdbNetworks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOdbNetworks(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IOdbNetwork[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbNetworks with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listOdbNetworks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOdbNetworks(request), expectedError);
            const actualRequest = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbNetworks as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbNetworksStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
            ];
            client.descriptors.page.listOdbNetworks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOdbNetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.OdbNetwork[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.OdbNetwork) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listOdbNetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOdbNetworks, request));
            assert(
                (client.descriptors.page.listOdbNetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listOdbNetworksStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOdbNetworks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOdbNetworksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.OdbNetwork[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.OdbNetwork) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listOdbNetworks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOdbNetworks, request));
            assert(
                (client.descriptors.page.listOdbNetworks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listOdbNetworks without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbNetwork()),
            ];
            client.descriptors.page.listOdbNetworks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IOdbNetwork[] = [];
            const iterable = client.listOdbNetworksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listOdbNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listOdbNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listOdbNetworks with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbNetworksRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbNetworksRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOdbNetworks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOdbNetworksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IOdbNetwork[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listOdbNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listOdbNetworks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listOdbSubnets', () => {
        it('invokes listOdbSubnets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
            ];
            client.innerApiCalls.listOdbSubnets = stubSimpleCall(expectedResponse);
            const [response] = await client.listOdbSubnets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbSubnets without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
            ];
            client.innerApiCalls.listOdbSubnets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listOdbSubnets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IOdbSubnet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbSubnets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listOdbSubnets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOdbSubnets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listOdbSubnets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listOdbSubnetsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
            ];
            client.descriptors.page.listOdbSubnets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOdbSubnetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.OdbSubnet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.OdbSubnet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listOdbSubnets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOdbSubnets, request));
            assert(
                (client.descriptors.page.listOdbSubnets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listOdbSubnetsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOdbSubnets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOdbSubnetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.OdbSubnet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.OdbSubnet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listOdbSubnets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listOdbSubnets, request));
            assert(
                (client.descriptors.page.listOdbSubnets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listOdbSubnets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.OdbSubnet()),
            ];
            client.descriptors.page.listOdbSubnets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IOdbSubnet[] = [];
            const iterable = client.listOdbSubnetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listOdbSubnets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listOdbSubnets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listOdbSubnets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListOdbSubnetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOdbSubnets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOdbSubnetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IOdbSubnet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listOdbSubnets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listOdbSubnets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listExadbVmClusters', () => {
        it('invokes listExadbVmClusters without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
            ];
            client.innerApiCalls.listExadbVmClusters = stubSimpleCall(expectedResponse);
            const [response] = await client.listExadbVmClusters(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExadbVmClusters without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
            ];
            client.innerApiCalls.listExadbVmClusters = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listExadbVmClusters(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IExadbVmCluster[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExadbVmClusters with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listExadbVmClusters = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listExadbVmClusters(request), expectedError);
            const actualRequest = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExadbVmClusters as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExadbVmClustersStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
            ];
            client.descriptors.page.listExadbVmClusters.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listExadbVmClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.ExadbVmCluster[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.ExadbVmCluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listExadbVmClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExadbVmClusters, request));
            assert(
                (client.descriptors.page.listExadbVmClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listExadbVmClustersStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listExadbVmClusters.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listExadbVmClustersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.ExadbVmCluster[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.ExadbVmCluster) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listExadbVmClusters.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExadbVmClusters, request));
            assert(
                (client.descriptors.page.listExadbVmClusters.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listExadbVmClusters without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExadbVmCluster()),
            ];
            client.descriptors.page.listExadbVmClusters.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IExadbVmCluster[] = [];
            const iterable = client.listExadbVmClustersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listExadbVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listExadbVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listExadbVmClusters with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExadbVmClustersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listExadbVmClusters.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listExadbVmClustersAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IExadbVmCluster[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listExadbVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listExadbVmClusters.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listExascaleDbStorageVaults', () => {
        it('invokes listExascaleDbStorageVaults without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
            ];
            client.innerApiCalls.listExascaleDbStorageVaults = stubSimpleCall(expectedResponse);
            const [response] = await client.listExascaleDbStorageVaults(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExascaleDbStorageVaults without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
            ];
            client.innerApiCalls.listExascaleDbStorageVaults = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listExascaleDbStorageVaults(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExascaleDbStorageVaults with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listExascaleDbStorageVaults = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listExascaleDbStorageVaults(request), expectedError);
            const actualRequest = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listExascaleDbStorageVaults as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listExascaleDbStorageVaultsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
            ];
            client.descriptors.page.listExascaleDbStorageVaults.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listExascaleDbStorageVaultsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listExascaleDbStorageVaults.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExascaleDbStorageVaults, request));
            assert(
                (client.descriptors.page.listExascaleDbStorageVaults.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listExascaleDbStorageVaultsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listExascaleDbStorageVaults.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listExascaleDbStorageVaultsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listExascaleDbStorageVaults.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listExascaleDbStorageVaults, request));
            assert(
                (client.descriptors.page.listExascaleDbStorageVaults.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listExascaleDbStorageVaults without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.ExascaleDbStorageVault()),
            ];
            client.descriptors.page.listExascaleDbStorageVaults.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[] = [];
            const iterable = client.listExascaleDbStorageVaultsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listExascaleDbStorageVaults.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listExascaleDbStorageVaults.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listExascaleDbStorageVaults with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListExascaleDbStorageVaultsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listExascaleDbStorageVaults.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listExascaleDbStorageVaultsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IExascaleDbStorageVault[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listExascaleDbStorageVaults.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listExascaleDbStorageVaults.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbSystemInitialStorageSizes', () => {
        it('invokes listDbSystemInitialStorageSizes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
            ];
            client.innerApiCalls.listDbSystemInitialStorageSizes = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbSystemInitialStorageSizes(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemInitialStorageSizes without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
            ];
            client.innerApiCalls.listDbSystemInitialStorageSizes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbSystemInitialStorageSizes(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemInitialStorageSizes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbSystemInitialStorageSizes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbSystemInitialStorageSizes(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystemInitialStorageSizes as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemInitialStorageSizesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
            ];
            client.descriptors.page.listDbSystemInitialStorageSizes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbSystemInitialStorageSizesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbSystemInitialStorageSizes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystemInitialStorageSizes, request));
            assert(
                (client.descriptors.page.listDbSystemInitialStorageSizes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbSystemInitialStorageSizesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystemInitialStorageSizes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbSystemInitialStorageSizesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbSystemInitialStorageSizes.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystemInitialStorageSizes, request));
            assert(
                (client.descriptors.page.listDbSystemInitialStorageSizes.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbSystemInitialStorageSizes without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystemInitialStorageSize()),
            ];
            client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[] = [];
            const iterable = client.listDbSystemInitialStorageSizesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbSystemInitialStorageSizes with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemInitialStorageSizesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbSystemInitialStorageSizesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbSystemInitialStorageSize[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystemInitialStorageSizes.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDatabases', () => {
        it('invokes listDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
            ];
            client.innerApiCalls.listDatabases = stubSimpleCall(expectedResponse);
            const [response] = await client.listDatabases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabases without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
            ];
            client.innerApiCalls.listDatabases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDatabases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDatabase[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDatabases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDatabases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabasesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
            ];
            client.descriptors.page.listDatabases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.Database[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.Database) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatabases, request));
            assert(
                (client.descriptors.page.listDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDatabasesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatabases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.Database[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.Database) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatabases, request));
            assert(
                (client.descriptors.page.listDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.Database()),
            ];
            client.descriptors.page.listDatabases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDatabase[] = [];
            const iterable = client.listDatabasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatabases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDatabasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDatabase[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listPluggableDatabases', () => {
        it('invokes listPluggableDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
            ];
            client.innerApiCalls.listPluggableDatabases = stubSimpleCall(expectedResponse);
            const [response] = await client.listPluggableDatabases(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPluggableDatabases without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
            ];
            client.innerApiCalls.listPluggableDatabases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listPluggableDatabases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IPluggableDatabase[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPluggableDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listPluggableDatabases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listPluggableDatabases(request), expectedError);
            const actualRequest = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listPluggableDatabases as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listPluggableDatabasesStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
            ];
            client.descriptors.page.listPluggableDatabases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPluggableDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.PluggableDatabase[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.PluggableDatabase) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listPluggableDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPluggableDatabases, request));
            assert(
                (client.descriptors.page.listPluggableDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listPluggableDatabasesStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPluggableDatabases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPluggableDatabasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.PluggableDatabase[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.PluggableDatabase) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listPluggableDatabases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listPluggableDatabases, request));
            assert(
                (client.descriptors.page.listPluggableDatabases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listPluggableDatabases without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.PluggableDatabase()),
            ];
            client.descriptors.page.listPluggableDatabases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IPluggableDatabase[] = [];
            const iterable = client.listPluggableDatabasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listPluggableDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPluggableDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listPluggableDatabases with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListPluggableDatabasesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listPluggableDatabases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPluggableDatabasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IPluggableDatabase[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listPluggableDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listPluggableDatabases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbSystems', () => {
        it('invokes listDbSystems without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
            ];
            client.innerApiCalls.listDbSystems = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbSystems(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystems without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
            ];
            client.innerApiCalls.listDbSystems = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbSystems(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbSystem[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystems with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbSystems = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbSystems(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbSystems as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbSystemsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
            ];
            client.descriptors.page.listDbSystems.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbSystemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystem[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbSystems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystems, request));
            assert(
                (client.descriptors.page.listDbSystems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbSystemsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystems.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbSystemsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbSystem[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbSystem) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbSystems.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbSystems, request));
            assert(
                (client.descriptors.page.listDbSystems.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbSystems without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbSystem()),
            ];
            client.descriptors.page.listDbSystems.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbSystem[] = [];
            const iterable = client.listDbSystemsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbSystems with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbSystemsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbSystemsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbSystems.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbSystemsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbSystem[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbSystems.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbSystems.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDbVersions', () => {
        it('invokes listDbVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
            ];
            client.innerApiCalls.listDbVersions = stubSimpleCall(expectedResponse);
            const [response] = await client.listDbVersions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbVersions without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
            ];
            client.innerApiCalls.listDbVersions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDbVersions(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDbVersion[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDbVersions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDbVersions(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDbVersions as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDbVersionsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
            ];
            client.descriptors.page.listDbVersions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDbVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDbVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbVersions, request));
            assert(
                (client.descriptors.page.listDbVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDbVersionsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbVersions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDbVersionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DbVersion[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DbVersion) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDbVersions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDbVersions, request));
            assert(
                (client.descriptors.page.listDbVersions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDbVersions without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DbVersion()),
            ];
            client.descriptors.page.listDbVersions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDbVersion[] = [];
            const iterable = client.listDbVersionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDbVersions with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDbVersionsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDbVersionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDbVersions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDbVersionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDbVersion[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDbVersions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDatabaseCharacterSets', () => {
        it('invokes listDatabaseCharacterSets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
            ];
            client.innerApiCalls.listDatabaseCharacterSets = stubSimpleCall(expectedResponse);
            const [response] = await client.listDatabaseCharacterSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabaseCharacterSets without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
            ];
            client.innerApiCalls.listDatabaseCharacterSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDatabaseCharacterSets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabaseCharacterSets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDatabaseCharacterSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDatabaseCharacterSets(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDatabaseCharacterSets as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDatabaseCharacterSetsStream without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
            ];
            client.descriptors.page.listDatabaseCharacterSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDatabaseCharacterSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDatabaseCharacterSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatabaseCharacterSets, request));
            assert(
                (client.descriptors.page.listDatabaseCharacterSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDatabaseCharacterSetsStream with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatabaseCharacterSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDatabaseCharacterSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet[] = [];
                stream.on('data', (response: protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDatabaseCharacterSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDatabaseCharacterSets, request));
            assert(
                (client.descriptors.page.listDatabaseCharacterSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDatabaseCharacterSets without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
              generateSampleMessage(new protos.google.cloud.oracledatabase.v1.DatabaseCharacterSet()),
            ];
            client.descriptors.page.listDatabaseCharacterSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[] = [];
            const iterable = client.listDatabaseCharacterSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDatabaseCharacterSets with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.oracledatabase.v1.ListDatabaseCharacterSetsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDatabaseCharacterSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDatabaseCharacterSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.oracledatabase.v1.IDatabaseCharacterSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDatabaseCharacterSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('autonomousDatabase', async () => {
            const fakePath = "/rendered/path/autonomousDatabase";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                autonomous_database: "autonomousDatabaseValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.autonomousDatabasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.autonomousDatabasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('autonomousDatabasePath', () => {
                const result = client.autonomousDatabasePath("projectValue", "locationValue", "autonomousDatabaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.autonomousDatabasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAutonomousDatabaseName', () => {
                const result = client.matchProjectFromAutonomousDatabaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.autonomousDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAutonomousDatabaseName', () => {
                const result = client.matchLocationFromAutonomousDatabaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.autonomousDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAutonomousDatabaseFromAutonomousDatabaseName', () => {
                const result = client.matchAutonomousDatabaseFromAutonomousDatabaseName(fakePath);
                assert.strictEqual(result, "autonomousDatabaseValue");
                assert((client.pathTemplates.autonomousDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('autonomousDatabaseBackup', async () => {
            const fakePath = "/rendered/path/autonomousDatabaseBackup";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                autonomous_database_backup: "autonomousDatabaseBackupValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.autonomousDatabaseBackupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.autonomousDatabaseBackupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('autonomousDatabaseBackupPath', () => {
                const result = client.autonomousDatabaseBackupPath("projectValue", "locationValue", "autonomousDatabaseBackupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.autonomousDatabaseBackupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAutonomousDatabaseBackupName', () => {
                const result = client.matchProjectFromAutonomousDatabaseBackupName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.autonomousDatabaseBackupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAutonomousDatabaseBackupName', () => {
                const result = client.matchLocationFromAutonomousDatabaseBackupName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.autonomousDatabaseBackupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName', () => {
                const result = client.matchAutonomousDatabaseBackupFromAutonomousDatabaseBackupName(fakePath);
                assert.strictEqual(result, "autonomousDatabaseBackupValue");
                assert((client.pathTemplates.autonomousDatabaseBackupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('autonomousDatabaseCharacterSet', async () => {
            const fakePath = "/rendered/path/autonomousDatabaseCharacterSet";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                autonomous_database_character_set: "autonomousDatabaseCharacterSetValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('autonomousDatabaseCharacterSetPath', () => {
                const result = client.autonomousDatabaseCharacterSetPath("projectValue", "locationValue", "autonomousDatabaseCharacterSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAutonomousDatabaseCharacterSetName', () => {
                const result = client.matchProjectFromAutonomousDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAutonomousDatabaseCharacterSetName', () => {
                const result = client.matchLocationFromAutonomousDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName', () => {
                const result = client.matchAutonomousDatabaseCharacterSetFromAutonomousDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "autonomousDatabaseCharacterSetValue");
                assert((client.pathTemplates.autonomousDatabaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('autonomousDbVersion', async () => {
            const fakePath = "/rendered/path/autonomousDbVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                autonomous_db_version: "autonomousDbVersionValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.autonomousDbVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.autonomousDbVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('autonomousDbVersionPath', () => {
                const result = client.autonomousDbVersionPath("projectValue", "locationValue", "autonomousDbVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.autonomousDbVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromAutonomousDbVersionName', () => {
                const result = client.matchProjectFromAutonomousDbVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.autonomousDbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromAutonomousDbVersionName', () => {
                const result = client.matchLocationFromAutonomousDbVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.autonomousDbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAutonomousDbVersionFromAutonomousDbVersionName', () => {
                const result = client.matchAutonomousDbVersionFromAutonomousDbVersionName(fakePath);
                assert.strictEqual(result, "autonomousDbVersionValue");
                assert((client.pathTemplates.autonomousDbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cloudExadataInfrastructure', async () => {
            const fakePath = "/rendered/path/cloudExadataInfrastructure";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cloud_exadata_infrastructure: "cloudExadataInfrastructureValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cloudExadataInfrastructurePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cloudExadataInfrastructurePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cloudExadataInfrastructurePath', () => {
                const result = client.cloudExadataInfrastructurePath("projectValue", "locationValue", "cloudExadataInfrastructureValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cloudExadataInfrastructurePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCloudExadataInfrastructureName', () => {
                const result = client.matchProjectFromCloudExadataInfrastructureName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cloudExadataInfrastructurePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCloudExadataInfrastructureName', () => {
                const result = client.matchLocationFromCloudExadataInfrastructureName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cloudExadataInfrastructurePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCloudExadataInfrastructureFromCloudExadataInfrastructureName', () => {
                const result = client.matchCloudExadataInfrastructureFromCloudExadataInfrastructureName(fakePath);
                assert.strictEqual(result, "cloudExadataInfrastructureValue");
                assert((client.pathTemplates.cloudExadataInfrastructurePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cloudVmCluster', async () => {
            const fakePath = "/rendered/path/cloudVmCluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cloud_vm_cluster: "cloudVmClusterValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cloudVmClusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cloudVmClusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cloudVmClusterPath', () => {
                const result = client.cloudVmClusterPath("projectValue", "locationValue", "cloudVmClusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cloudVmClusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCloudVmClusterName', () => {
                const result = client.matchProjectFromCloudVmClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromCloudVmClusterName', () => {
                const result = client.matchLocationFromCloudVmClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCloudVmClusterFromCloudVmClusterName', () => {
                const result = client.matchCloudVmClusterFromCloudVmClusterName(fakePath);
                assert.strictEqual(result, "cloudVmClusterValue");
                assert((client.pathTemplates.cloudVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('database', async () => {
            const fakePath = "/rendered/path/database";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                database: "databaseValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.databasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.databasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('databasePath', () => {
                const result = client.databasePath("projectValue", "locationValue", "databaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.databasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDatabaseName', () => {
                const result = client.matchProjectFromDatabaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.databasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDatabaseName', () => {
                const result = client.matchLocationFromDatabaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.databasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatabaseFromDatabaseName', () => {
                const result = client.matchDatabaseFromDatabaseName(fakePath);
                assert.strictEqual(result, "databaseValue");
                assert((client.pathTemplates.databasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('databaseCharacterSet', async () => {
            const fakePath = "/rendered/path/databaseCharacterSet";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                database_character_set: "databaseCharacterSetValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.databaseCharacterSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.databaseCharacterSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('databaseCharacterSetPath', () => {
                const result = client.databaseCharacterSetPath("projectValue", "locationValue", "databaseCharacterSetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.databaseCharacterSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDatabaseCharacterSetName', () => {
                const result = client.matchProjectFromDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.databaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDatabaseCharacterSetName', () => {
                const result = client.matchLocationFromDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.databaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDatabaseCharacterSetFromDatabaseCharacterSetName', () => {
                const result = client.matchDatabaseCharacterSetFromDatabaseCharacterSetName(fakePath);
                assert.strictEqual(result, "databaseCharacterSetValue");
                assert((client.pathTemplates.databaseCharacterSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dbServer', async () => {
            const fakePath = "/rendered/path/dbServer";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cloud_exadata_infrastructure: "cloudExadataInfrastructureValue",
                db_server: "dbServerValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dbServerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dbServerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dbServerPath', () => {
                const result = client.dbServerPath("projectValue", "locationValue", "cloudExadataInfrastructureValue", "dbServerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dbServerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDbServerName', () => {
                const result = client.matchProjectFromDbServerName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dbServerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDbServerName', () => {
                const result = client.matchLocationFromDbServerName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dbServerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCloudExadataInfrastructureFromDbServerName', () => {
                const result = client.matchCloudExadataInfrastructureFromDbServerName(fakePath);
                assert.strictEqual(result, "cloudExadataInfrastructureValue");
                assert((client.pathTemplates.dbServerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbServerFromDbServerName', () => {
                const result = client.matchDbServerFromDbServerName(fakePath);
                assert.strictEqual(result, "dbServerValue");
                assert((client.pathTemplates.dbServerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dbSystem', async () => {
            const fakePath = "/rendered/path/dbSystem";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                db_system: "dbSystemValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dbSystemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dbSystemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dbSystemPath', () => {
                const result = client.dbSystemPath("projectValue", "locationValue", "dbSystemValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dbSystemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDbSystemName', () => {
                const result = client.matchProjectFromDbSystemName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dbSystemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDbSystemName', () => {
                const result = client.matchLocationFromDbSystemName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dbSystemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbSystemFromDbSystemName', () => {
                const result = client.matchDbSystemFromDbSystemName(fakePath);
                assert.strictEqual(result, "dbSystemValue");
                assert((client.pathTemplates.dbSystemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dbSystemInitialStorageSize', async () => {
            const fakePath = "/rendered/path/dbSystemInitialStorageSize";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                db_system_initial_storage_size: "dbSystemInitialStorageSizeValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dbSystemInitialStorageSizePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dbSystemInitialStorageSizePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dbSystemInitialStorageSizePath', () => {
                const result = client.dbSystemInitialStorageSizePath("projectValue", "locationValue", "dbSystemInitialStorageSizeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dbSystemInitialStorageSizePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDbSystemInitialStorageSizeName', () => {
                const result = client.matchProjectFromDbSystemInitialStorageSizeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dbSystemInitialStorageSizePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDbSystemInitialStorageSizeName', () => {
                const result = client.matchLocationFromDbSystemInitialStorageSizeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dbSystemInitialStorageSizePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbSystemInitialStorageSizeFromDbSystemInitialStorageSizeName', () => {
                const result = client.matchDbSystemInitialStorageSizeFromDbSystemInitialStorageSizeName(fakePath);
                assert.strictEqual(result, "dbSystemInitialStorageSizeValue");
                assert((client.pathTemplates.dbSystemInitialStorageSizePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dbSystemShape', async () => {
            const fakePath = "/rendered/path/dbSystemShape";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                db_system_shape: "dbSystemShapeValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dbSystemShapePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dbSystemShapePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dbSystemShapePath', () => {
                const result = client.dbSystemShapePath("projectValue", "locationValue", "dbSystemShapeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dbSystemShapePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDbSystemShapeName', () => {
                const result = client.matchProjectFromDbSystemShapeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDbSystemShapeName', () => {
                const result = client.matchLocationFromDbSystemShapeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbSystemShapeFromDbSystemShapeName', () => {
                const result = client.matchDbSystemShapeFromDbSystemShapeName(fakePath);
                assert.strictEqual(result, "dbSystemShapeValue");
                assert((client.pathTemplates.dbSystemShapePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dbVersion', async () => {
            const fakePath = "/rendered/path/dbVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                db_version: "dbVersionValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.dbVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dbVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dbVersionPath', () => {
                const result = client.dbVersionPath("projectValue", "locationValue", "dbVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dbVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDbVersionName', () => {
                const result = client.matchProjectFromDbVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.dbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDbVersionName', () => {
                const result = client.matchLocationFromDbVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.dbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbVersionFromDbVersionName', () => {
                const result = client.matchDbVersionFromDbVersionName(fakePath);
                assert.strictEqual(result, "dbVersionValue");
                assert((client.pathTemplates.dbVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('entitlement', async () => {
            const fakePath = "/rendered/path/entitlement";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                entitlement: "entitlementValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.entitlementPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.entitlementPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('entitlementPath', () => {
                const result = client.entitlementPath("projectValue", "locationValue", "entitlementValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.entitlementPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromEntitlementName', () => {
                const result = client.matchProjectFromEntitlementName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromEntitlementName', () => {
                const result = client.matchLocationFromEntitlementName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEntitlementFromEntitlementName', () => {
                const result = client.matchEntitlementFromEntitlementName(fakePath);
                assert.strictEqual(result, "entitlementValue");
                assert((client.pathTemplates.entitlementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('exadbVmCluster', async () => {
            const fakePath = "/rendered/path/exadbVmCluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                exadb_vm_cluster: "exadbVmClusterValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.exadbVmClusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.exadbVmClusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('exadbVmClusterPath', () => {
                const result = client.exadbVmClusterPath("projectValue", "locationValue", "exadbVmClusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.exadbVmClusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExadbVmClusterName', () => {
                const result = client.matchProjectFromExadbVmClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.exadbVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExadbVmClusterName', () => {
                const result = client.matchLocationFromExadbVmClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.exadbVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExadbVmClusterFromExadbVmClusterName', () => {
                const result = client.matchExadbVmClusterFromExadbVmClusterName(fakePath);
                assert.strictEqual(result, "exadbVmClusterValue");
                assert((client.pathTemplates.exadbVmClusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('exascaleDbStorageVault', async () => {
            const fakePath = "/rendered/path/exascaleDbStorageVault";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                exascale_db_storage_vault: "exascaleDbStorageVaultValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.exascaleDbStorageVaultPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.exascaleDbStorageVaultPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('exascaleDbStorageVaultPath', () => {
                const result = client.exascaleDbStorageVaultPath("projectValue", "locationValue", "exascaleDbStorageVaultValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.exascaleDbStorageVaultPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromExascaleDbStorageVaultName', () => {
                const result = client.matchProjectFromExascaleDbStorageVaultName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.exascaleDbStorageVaultPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromExascaleDbStorageVaultName', () => {
                const result = client.matchLocationFromExascaleDbStorageVaultName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.exascaleDbStorageVaultPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExascaleDbStorageVaultFromExascaleDbStorageVaultName', () => {
                const result = client.matchExascaleDbStorageVaultFromExascaleDbStorageVaultName(fakePath);
                assert.strictEqual(result, "exascaleDbStorageVaultValue");
                assert((client.pathTemplates.exascaleDbStorageVaultPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('giVersion', async () => {
            const fakePath = "/rendered/path/giVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                gi_version: "giVersionValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.giVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.giVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('giVersionPath', () => {
                const result = client.giVersionPath("projectValue", "locationValue", "giVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.giVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromGiVersionName', () => {
                const result = client.matchProjectFromGiVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.giVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromGiVersionName', () => {
                const result = client.matchLocationFromGiVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.giVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGiVersionFromGiVersionName', () => {
                const result = client.matchGiVersionFromGiVersionName(fakePath);
                assert.strictEqual(result, "giVersionValue");
                assert((client.pathTemplates.giVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('minorVersion', async () => {
            const fakePath = "/rendered/path/minorVersion";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                gi_version: "giVersionValue",
                minor_version: "minorVersionValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.minorVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.minorVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('minorVersionPath', () => {
                const result = client.minorVersionPath("projectValue", "locationValue", "giVersionValue", "minorVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.minorVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMinorVersionName', () => {
                const result = client.matchProjectFromMinorVersionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.minorVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMinorVersionName', () => {
                const result = client.matchLocationFromMinorVersionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.minorVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGiVersionFromMinorVersionName', () => {
                const result = client.matchGiVersionFromMinorVersionName(fakePath);
                assert.strictEqual(result, "giVersionValue");
                assert((client.pathTemplates.minorVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMinorVersionFromMinorVersionName', () => {
                const result = client.matchMinorVersionFromMinorVersionName(fakePath);
                assert.strictEqual(result, "minorVersionValue");
                assert((client.pathTemplates.minorVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('odbNetwork', async () => {
            const fakePath = "/rendered/path/odbNetwork";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                odb_network: "odbNetworkValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.odbNetworkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.odbNetworkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('odbNetworkPath', () => {
                const result = client.odbNetworkPath("projectValue", "locationValue", "odbNetworkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.odbNetworkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromOdbNetworkName', () => {
                const result = client.matchProjectFromOdbNetworkName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.odbNetworkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOdbNetworkName', () => {
                const result = client.matchLocationFromOdbNetworkName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.odbNetworkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOdbNetworkFromOdbNetworkName', () => {
                const result = client.matchOdbNetworkFromOdbNetworkName(fakePath);
                assert.strictEqual(result, "odbNetworkValue");
                assert((client.pathTemplates.odbNetworkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('odbSubnet', async () => {
            const fakePath = "/rendered/path/odbSubnet";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                odb_network: "odbNetworkValue",
                odb_subnet: "odbSubnetValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.odbSubnetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.odbSubnetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('odbSubnetPath', () => {
                const result = client.odbSubnetPath("projectValue", "locationValue", "odbNetworkValue", "odbSubnetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.odbSubnetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromOdbSubnetName', () => {
                const result = client.matchProjectFromOdbSubnetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.odbSubnetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOdbSubnetName', () => {
                const result = client.matchLocationFromOdbSubnetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.odbSubnetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOdbNetworkFromOdbSubnetName', () => {
                const result = client.matchOdbNetworkFromOdbSubnetName(fakePath);
                assert.strictEqual(result, "odbNetworkValue");
                assert((client.pathTemplates.odbSubnetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOdbSubnetFromOdbSubnetName', () => {
                const result = client.matchOdbSubnetFromOdbSubnetName(fakePath);
                assert.strictEqual(result, "odbSubnetValue");
                assert((client.pathTemplates.odbSubnetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('pluggableDatabase', async () => {
            const fakePath = "/rendered/path/pluggableDatabase";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                pluggable_database: "pluggableDatabaseValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.pluggableDatabasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.pluggableDatabasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('pluggableDatabasePath', () => {
                const result = client.pluggableDatabasePath("projectValue", "locationValue", "pluggableDatabaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.pluggableDatabasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromPluggableDatabaseName', () => {
                const result = client.matchProjectFromPluggableDatabaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.pluggableDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromPluggableDatabaseName', () => {
                const result = client.matchLocationFromPluggableDatabaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.pluggableDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPluggableDatabaseFromPluggableDatabaseName', () => {
                const result = client.matchPluggableDatabaseFromPluggableDatabaseName(fakePath);
                assert.strictEqual(result, "pluggableDatabaseValue");
                assert((client.pathTemplates.pluggableDatabasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', async () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationCloudVmClusterDbNodes', async () => {
            const fakePath = "/rendered/path/projectLocationCloudVmClusterDbNodes";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cloud_vm_cluster: "cloudVmClusterValue",
                db_node: "dbNodeValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationCloudVmClusterDbNodesPath', () => {
                const result = client.projectLocationCloudVmClusterDbNodesPath("projectValue", "locationValue", "cloudVmClusterValue", "dbNodeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationCloudVmClusterDbNodesName', () => {
                const result = client.matchProjectFromProjectLocationCloudVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationCloudVmClusterDbNodesName', () => {
                const result = client.matchLocationFromProjectLocationCloudVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCloudVmClusterFromProjectLocationCloudVmClusterDbNodesName', () => {
                const result = client.matchCloudVmClusterFromProjectLocationCloudVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "cloudVmClusterValue");
                assert((client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbNodeFromProjectLocationCloudVmClusterDbNodesName', () => {
                const result = client.matchDbNodeFromProjectLocationCloudVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "dbNodeValue");
                assert((client.pathTemplates.projectLocationCloudVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationExadbVmClusterDbNodes', async () => {
            const fakePath = "/rendered/path/projectLocationExadbVmClusterDbNodes";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                exadb_vm_cluster: "exadbVmClusterValue",
                db_node: "dbNodeValue",
            };
            const client = new oracledatabaseModule.v1.OracleDatabaseClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationExadbVmClusterDbNodesPath', () => {
                const result = client.projectLocationExadbVmClusterDbNodesPath("projectValue", "locationValue", "exadbVmClusterValue", "dbNodeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationExadbVmClusterDbNodesName', () => {
                const result = client.matchProjectFromProjectLocationExadbVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationExadbVmClusterDbNodesName', () => {
                const result = client.matchLocationFromProjectLocationExadbVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExadbVmClusterFromProjectLocationExadbVmClusterDbNodesName', () => {
                const result = client.matchExadbVmClusterFromProjectLocationExadbVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "exadbVmClusterValue");
                assert((client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDbNodeFromProjectLocationExadbVmClusterDbNodesName', () => {
                const result = client.matchDbNodeFromProjectLocationExadbVmClusterDbNodesName(fakePath);
                assert.strictEqual(result, "dbNodeValue");
                assert((client.pathTemplates.projectLocationExadbVmClusterDbNodesPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
