// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, schema) {
  // [START managedkafka_v1_generated_ManagedSchemaRegistry_CheckCompatibility_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the resource to check compatibility for. The format
   *  is either of following:
   *  * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/* /versions: Check compatibility with one or
   *    more versions of the specified subject.
   *  * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/compatibility/subjects/{subject}/versions/{version}: Check
   *    compatibility with a specific version of the subject.
   */
  // const name = 'abc123'
  /**
   *  Optional. The schema type of the schema.
   */
  // const schemaType = {}
  /**
   *  Required. The schema payload
   */
  // const schema = 'abc123'
  /**
   *  Optional. The schema references used by the schema.
   */
  // const references = [1,2,3,4]
  /**
   *  Optional. If true, the response will contain the compatibility check result
   *  with reasons for failed checks. The default is false.
   */
  // const verbose = true

  // Imports the Schemaregistry library
  const {ManagedSchemaRegistryClient} = require('@google-cloud/managedkafka-schemaregistry').v1;

  // Instantiates a client
  const schemaregistryClient = new ManagedSchemaRegistryClient();

  async function callCheckCompatibility() {
    // Construct request
    const request = {
      name,
      schema,
    };

    // Run request
    const response = await schemaregistryClient.checkCompatibility(request);
    console.log(response);
  }

  callCheckCompatibility();
  // [END managedkafka_v1_generated_ManagedSchemaRegistry_CheckCompatibility_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
