// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(name, compatibility) {
  // [START managedkafka_v1_generated_ManagedSchemaRegistry_UpdateSchemaConfig_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The resource name to update the config for. It can be either of
   *  following:
   *    * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/config: Update config at global level.
   *    * projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/config/{subject}: Update config for a specific subject.
   */
  // const name = 'abc123'
  /**
   *  Required. The compatibility type of the schemas.
   *  Cannot be unset for a SchemaRegistry-level SchemaConfig.
   *  If unset on a SchemaSubject-level SchemaConfig, removes the compatibility
   *  field for the SchemaConfig.
   */
  // const compatibility = {}
  /**
   *  Optional. If true, the schema will be normalized before being stored or
   *  looked up. The default is false. Cannot be unset for a SchemaRegistry-level
   *  SchemaConfig. If unset on a SchemaSubject-level SchemaConfig, removes the
   *  normalize field for the SchemaConfig.
   */
  // const normalize = true

  // Imports the Schemaregistry library
  const {ManagedSchemaRegistryClient} = require('@google-cloud/managedkafka-schemaregistry').v1;

  // Instantiates a client
  const schemaregistryClient = new ManagedSchemaRegistryClient();

  async function callUpdateSchemaConfig() {
    // Construct request
    const request = {
      name,
      compatibility,
    };

    // Run request
    const response = await schemaregistryClient.updateSchemaConfig(request);
    console.log(response);
  }

  callUpdateSchemaConfig();
  // [END managedkafka_v1_generated_ManagedSchemaRegistry_UpdateSchemaConfig_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
