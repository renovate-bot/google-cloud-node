// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it, beforeEach, afterEach} from 'mocha';
import * as audiencesegmentserviceModule from '../src';

import {PassThrough} from 'stream';

import {GoogleAuth, protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.AudienceSegmentServiceClient', () => {
  let googleAuth: GoogleAuth;
  beforeEach(() => {
    googleAuth = {
      getClient: sinon.stub().resolves({
        getRequestHeaders: sinon.stub().resolves({Authorization: 'Bearer SOME_TOKEN'}),
      })
    } as unknown as GoogleAuth;
  });
  afterEach(() => {
    sinon.restore();
  });
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = audiencesegmentserviceModule.v1.AudienceSegmentServiceClient.servicePath;
                assert.strictEqual(servicePath, 'admanager.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = audiencesegmentserviceModule.v1.AudienceSegmentServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'admanager.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'admanager.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'admanager.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'admanager.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'admanager.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = audiencesegmentserviceModule.v1.AudienceSegmentServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            assert.strictEqual(client.audienceSegmentServiceStub, undefined);
            await client.initialize();
            assert(client.audienceSegmentServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.audienceSegmentServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            assert.strictEqual(client.audienceSegmentServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getAudienceSegment', () => {
        it('invokes getAudienceSegment without error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.GetAudienceSegmentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.GetAudienceSegmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.ads.admanager.v1.AudienceSegment()
            );
            client.innerApiCalls.getAudienceSegment = stubSimpleCall(expectedResponse);
            const [response] = await client.getAudienceSegment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAudienceSegment without error using callback', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.GetAudienceSegmentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.GetAudienceSegmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.ads.admanager.v1.AudienceSegment()
            );
            client.innerApiCalls.getAudienceSegment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAudienceSegment(
                    request,
                    (err?: Error|null, result?: protos.google.ads.admanager.v1.IAudienceSegment|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAudienceSegment with error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.GetAudienceSegmentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.GetAudienceSegmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getAudienceSegment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAudienceSegment(request), expectedError);
            const actualRequest = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getAudienceSegment as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getAudienceSegment with closed client', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.GetAudienceSegmentRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.GetAudienceSegmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getAudienceSegment(request), expectedError);
        });
    });

    describe('listAudienceSegments', () => {
        it('invokes listAudienceSegments without error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
            ];
            client.innerApiCalls.listAudienceSegments = stubSimpleCall(expectedResponse);
            const [response] = await client.listAudienceSegments(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAudienceSegments without error using callback', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
            ];
            client.innerApiCalls.listAudienceSegments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAudienceSegments(
                    request,
                    (err?: Error|null, result?: protos.google.ads.admanager.v1.IAudienceSegment[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAudienceSegments with error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listAudienceSegments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAudienceSegments(request), expectedError);
            const actualRequest = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listAudienceSegments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listAudienceSegmentsStream without error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
            ];
            client.descriptors.page.listAudienceSegments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAudienceSegmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.ads.admanager.v1.AudienceSegment[] = [];
                stream.on('data', (response: protos.google.ads.admanager.v1.AudienceSegment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAudienceSegments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAudienceSegments, request));
            assert(
                (client.descriptors.page.listAudienceSegments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listAudienceSegmentsStream with error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAudienceSegments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAudienceSegmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.ads.admanager.v1.AudienceSegment[] = [];
                stream.on('data', (response: protos.google.ads.admanager.v1.AudienceSegment) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAudienceSegments.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAudienceSegments, request));
            assert(
                (client.descriptors.page.listAudienceSegments.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listAudienceSegments without error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
              auth: googleAuth,
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
              generateSampleMessage(new protos.google.ads.admanager.v1.AudienceSegment()),
            ];
            client.descriptors.page.listAudienceSegments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.ads.admanager.v1.IAudienceSegment[] = [];
            const iterable = client.listAudienceSegmentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAudienceSegments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAudienceSegments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listAudienceSegments with error', async () => {
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.admanager.v1.ListAudienceSegmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.admanager.v1.ListAudienceSegmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listAudienceSegments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAudienceSegmentsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.ads.admanager.v1.IAudienceSegment[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAudienceSegments.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listAudienceSegments.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('Path templates', () => {

        describe('adBreak', async () => {
            const fakePath = "/rendered/path/adBreak";
            const expectedParameters = {
                network_code: "networkCodeValue",
                asset_key: "assetKeyValue",
                ad_break: "adBreakValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.adBreakPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adBreakPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adBreakPath', () => {
                const result = client.adBreakPath("networkCodeValue", "assetKeyValue", "adBreakValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adBreakPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromAdBreakName', () => {
                const result = client.matchNetworkCodeFromAdBreakName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.adBreakPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetKeyFromAdBreakName', () => {
                const result = client.matchAssetKeyFromAdBreakName(fakePath);
                assert.strictEqual(result, "assetKeyValue");
                assert((client.pathTemplates.adBreakPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdBreakFromAdBreakName', () => {
                const result = client.matchAdBreakFromAdBreakName(fakePath);
                assert.strictEqual(result, "adBreakValue");
                assert((client.pathTemplates.adBreakPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adReviewCenterAd', async () => {
            const fakePath = "/rendered/path/adReviewCenterAd";
            const expectedParameters = {
                network_code: "networkCodeValue",
                web_property_code: "webPropertyCodeValue",
                ad_review_center_ad: "adReviewCenterAdValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.adReviewCenterAdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adReviewCenterAdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adReviewCenterAdPath', () => {
                const result = client.adReviewCenterAdPath("networkCodeValue", "webPropertyCodeValue", "adReviewCenterAdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adReviewCenterAdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromAdReviewCenterAdName', () => {
                const result = client.matchNetworkCodeFromAdReviewCenterAdName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.adReviewCenterAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWebPropertyCodeFromAdReviewCenterAdName', () => {
                const result = client.matchWebPropertyCodeFromAdReviewCenterAdName(fakePath);
                assert.strictEqual(result, "webPropertyCodeValue");
                assert((client.pathTemplates.adReviewCenterAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdReviewCenterAdFromAdReviewCenterAdName', () => {
                const result = client.matchAdReviewCenterAdFromAdReviewCenterAdName(fakePath);
                assert.strictEqual(result, "adReviewCenterAdValue");
                assert((client.pathTemplates.adReviewCenterAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adUnit', async () => {
            const fakePath = "/rendered/path/adUnit";
            const expectedParameters = {
                network_code: "networkCodeValue",
                ad_unit: "adUnitValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.adUnitPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adUnitPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adUnitPath', () => {
                const result = client.adUnitPath("networkCodeValue", "adUnitValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adUnitPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromAdUnitName', () => {
                const result = client.matchNetworkCodeFromAdUnitName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.adUnitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdUnitFromAdUnitName', () => {
                const result = client.matchAdUnitFromAdUnitName(fakePath);
                assert.strictEqual(result, "adUnitValue");
                assert((client.pathTemplates.adUnitPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('application', async () => {
            const fakePath = "/rendered/path/application";
            const expectedParameters = {
                network_code: "networkCodeValue",
                application: "applicationValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.applicationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.applicationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('applicationPath', () => {
                const result = client.applicationPath("networkCodeValue", "applicationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.applicationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromApplicationName', () => {
                const result = client.matchNetworkCodeFromApplicationName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApplicationFromApplicationName', () => {
                const result = client.matchApplicationFromApplicationName(fakePath);
                assert.strictEqual(result, "applicationValue");
                assert((client.pathTemplates.applicationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('audienceSegment', async () => {
            const fakePath = "/rendered/path/audienceSegment";
            const expectedParameters = {
                network_code: "networkCodeValue",
                audience_segment: "audienceSegmentValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.audienceSegmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.audienceSegmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('audienceSegmentPath', () => {
                const result = client.audienceSegmentPath("networkCodeValue", "audienceSegmentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.audienceSegmentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromAudienceSegmentName', () => {
                const result = client.matchNetworkCodeFromAudienceSegmentName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.audienceSegmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAudienceSegmentFromAudienceSegmentName', () => {
                const result = client.matchAudienceSegmentFromAudienceSegmentName(fakePath);
                assert.strictEqual(result, "audienceSegmentValue");
                assert((client.pathTemplates.audienceSegmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('bandwidthGroup', async () => {
            const fakePath = "/rendered/path/bandwidthGroup";
            const expectedParameters = {
                network_code: "networkCodeValue",
                bandwidth_group: "bandwidthGroupValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.bandwidthGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.bandwidthGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('bandwidthGroupPath', () => {
                const result = client.bandwidthGroupPath("networkCodeValue", "bandwidthGroupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.bandwidthGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromBandwidthGroupName', () => {
                const result = client.matchNetworkCodeFromBandwidthGroupName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.bandwidthGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBandwidthGroupFromBandwidthGroupName', () => {
                const result = client.matchBandwidthGroupFromBandwidthGroupName(fakePath);
                assert.strictEqual(result, "bandwidthGroupValue");
                assert((client.pathTemplates.bandwidthGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('browser', async () => {
            const fakePath = "/rendered/path/browser";
            const expectedParameters = {
                network_code: "networkCodeValue",
                browser: "browserValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.browserPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.browserPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('browserPath', () => {
                const result = client.browserPath("networkCodeValue", "browserValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.browserPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromBrowserName', () => {
                const result = client.matchNetworkCodeFromBrowserName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.browserPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBrowserFromBrowserName', () => {
                const result = client.matchBrowserFromBrowserName(fakePath);
                assert.strictEqual(result, "browserValue");
                assert((client.pathTemplates.browserPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('browserLanguage', async () => {
            const fakePath = "/rendered/path/browserLanguage";
            const expectedParameters = {
                network_code: "networkCodeValue",
                browser_language: "browserLanguageValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.browserLanguagePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.browserLanguagePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('browserLanguagePath', () => {
                const result = client.browserLanguagePath("networkCodeValue", "browserLanguageValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.browserLanguagePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromBrowserLanguageName', () => {
                const result = client.matchNetworkCodeFromBrowserLanguageName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.browserLanguagePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBrowserLanguageFromBrowserLanguageName', () => {
                const result = client.matchBrowserLanguageFromBrowserLanguageName(fakePath);
                assert.strictEqual(result, "browserLanguageValue");
                assert((client.pathTemplates.browserLanguagePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cmsMetadataKey', async () => {
            const fakePath = "/rendered/path/cmsMetadataKey";
            const expectedParameters = {
                network_code: "networkCodeValue",
                cms_metadata_key: "cmsMetadataKeyValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cmsMetadataKeyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cmsMetadataKeyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cmsMetadataKeyPath', () => {
                const result = client.cmsMetadataKeyPath("networkCodeValue", "cmsMetadataKeyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cmsMetadataKeyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCmsMetadataKeyName', () => {
                const result = client.matchNetworkCodeFromCmsMetadataKeyName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.cmsMetadataKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCmsMetadataKeyFromCmsMetadataKeyName', () => {
                const result = client.matchCmsMetadataKeyFromCmsMetadataKeyName(fakePath);
                assert.strictEqual(result, "cmsMetadataKeyValue");
                assert((client.pathTemplates.cmsMetadataKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cmsMetadataValue', async () => {
            const fakePath = "/rendered/path/cmsMetadataValue";
            const expectedParameters = {
                network_code: "networkCodeValue",
                cms_metadata_value: "cmsMetadataValueValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.cmsMetadataValuePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.cmsMetadataValuePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('cmsMetadataValuePath', () => {
                const result = client.cmsMetadataValuePath("networkCodeValue", "cmsMetadataValueValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.cmsMetadataValuePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCmsMetadataValueName', () => {
                const result = client.matchNetworkCodeFromCmsMetadataValueName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.cmsMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCmsMetadataValueFromCmsMetadataValueName', () => {
                const result = client.matchCmsMetadataValueFromCmsMetadataValueName(fakePath);
                assert.strictEqual(result, "cmsMetadataValueValue");
                assert((client.pathTemplates.cmsMetadataValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('company', async () => {
            const fakePath = "/rendered/path/company";
            const expectedParameters = {
                network_code: "networkCodeValue",
                company: "companyValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.companyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.companyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('companyPath', () => {
                const result = client.companyPath("networkCodeValue", "companyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.companyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCompanyName', () => {
                const result = client.matchNetworkCodeFromCompanyName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.companyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCompanyFromCompanyName', () => {
                const result = client.matchCompanyFromCompanyName(fakePath);
                assert.strictEqual(result, "companyValue");
                assert((client.pathTemplates.companyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('contact', async () => {
            const fakePath = "/rendered/path/contact";
            const expectedParameters = {
                network_code: "networkCodeValue",
                contact: "contactValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.contactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.contactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('contactPath', () => {
                const result = client.contactPath("networkCodeValue", "contactValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.contactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromContactName', () => {
                const result = client.matchNetworkCodeFromContactName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.contactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchContactFromContactName', () => {
                const result = client.matchContactFromContactName(fakePath);
                assert.strictEqual(result, "contactValue");
                assert((client.pathTemplates.contactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('content', async () => {
            const fakePath = "/rendered/path/content";
            const expectedParameters = {
                network_code: "networkCodeValue",
                content: "contentValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.contentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.contentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('contentPath', () => {
                const result = client.contentPath("networkCodeValue", "contentValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.contentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromContentName', () => {
                const result = client.matchNetworkCodeFromContentName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.contentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchContentFromContentName', () => {
                const result = client.matchContentFromContentName(fakePath);
                assert.strictEqual(result, "contentValue");
                assert((client.pathTemplates.contentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('contentBundle', async () => {
            const fakePath = "/rendered/path/contentBundle";
            const expectedParameters = {
                network_code: "networkCodeValue",
                content_bundle: "contentBundleValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.contentBundlePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.contentBundlePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('contentBundlePath', () => {
                const result = client.contentBundlePath("networkCodeValue", "contentBundleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.contentBundlePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromContentBundleName', () => {
                const result = client.matchNetworkCodeFromContentBundleName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.contentBundlePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchContentBundleFromContentBundleName', () => {
                const result = client.matchContentBundleFromContentBundleName(fakePath);
                assert.strictEqual(result, "contentBundleValue");
                assert((client.pathTemplates.contentBundlePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('contentLabel', async () => {
            const fakePath = "/rendered/path/contentLabel";
            const expectedParameters = {
                network_code: "networkCodeValue",
                content_label: "contentLabelValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.contentLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.contentLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('contentLabelPath', () => {
                const result = client.contentLabelPath("networkCodeValue", "contentLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.contentLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromContentLabelName', () => {
                const result = client.matchNetworkCodeFromContentLabelName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.contentLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchContentLabelFromContentLabelName', () => {
                const result = client.matchContentLabelFromContentLabelName(fakePath);
                assert.strictEqual(result, "contentLabelValue");
                assert((client.pathTemplates.contentLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('creativeTemplate', async () => {
            const fakePath = "/rendered/path/creativeTemplate";
            const expectedParameters = {
                network_code: "networkCodeValue",
                creative_template: "creativeTemplateValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.creativeTemplatePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.creativeTemplatePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('creativeTemplatePath', () => {
                const result = client.creativeTemplatePath("networkCodeValue", "creativeTemplateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.creativeTemplatePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCreativeTemplateName', () => {
                const result = client.matchNetworkCodeFromCreativeTemplateName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.creativeTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCreativeTemplateFromCreativeTemplateName', () => {
                const result = client.matchCreativeTemplateFromCreativeTemplateName(fakePath);
                assert.strictEqual(result, "creativeTemplateValue");
                assert((client.pathTemplates.creativeTemplatePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customField', async () => {
            const fakePath = "/rendered/path/customField";
            const expectedParameters = {
                network_code: "networkCodeValue",
                custom_field: "customFieldValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customFieldPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customFieldPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customFieldPath', () => {
                const result = client.customFieldPath("networkCodeValue", "customFieldValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customFieldPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCustomFieldName', () => {
                const result = client.matchNetworkCodeFromCustomFieldName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.customFieldPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomFieldFromCustomFieldName', () => {
                const result = client.matchCustomFieldFromCustomFieldName(fakePath);
                assert.strictEqual(result, "customFieldValue");
                assert((client.pathTemplates.customFieldPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customTargetingKey', async () => {
            const fakePath = "/rendered/path/customTargetingKey";
            const expectedParameters = {
                network_code: "networkCodeValue",
                custom_targeting_key: "customTargetingKeyValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customTargetingKeyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customTargetingKeyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customTargetingKeyPath', () => {
                const result = client.customTargetingKeyPath("networkCodeValue", "customTargetingKeyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customTargetingKeyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCustomTargetingKeyName', () => {
                const result = client.matchNetworkCodeFromCustomTargetingKeyName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.customTargetingKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomTargetingKeyFromCustomTargetingKeyName', () => {
                const result = client.matchCustomTargetingKeyFromCustomTargetingKeyName(fakePath);
                assert.strictEqual(result, "customTargetingKeyValue");
                assert((client.pathTemplates.customTargetingKeyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customTargetingValue', async () => {
            const fakePath = "/rendered/path/customTargetingValue";
            const expectedParameters = {
                network_code: "networkCodeValue",
                custom_targeting_value: "customTargetingValueValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.customTargetingValuePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customTargetingValuePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customTargetingValuePath', () => {
                const result = client.customTargetingValuePath("networkCodeValue", "customTargetingValueValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customTargetingValuePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromCustomTargetingValueName', () => {
                const result = client.matchNetworkCodeFromCustomTargetingValueName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.customTargetingValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomTargetingValueFromCustomTargetingValueName', () => {
                const result = client.matchCustomTargetingValueFromCustomTargetingValueName(fakePath);
                assert.strictEqual(result, "customTargetingValueValue");
                assert((client.pathTemplates.customTargetingValuePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('deviceCapability', async () => {
            const fakePath = "/rendered/path/deviceCapability";
            const expectedParameters = {
                network_code: "networkCodeValue",
                device_capability: "deviceCapabilityValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.deviceCapabilityPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.deviceCapabilityPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('deviceCapabilityPath', () => {
                const result = client.deviceCapabilityPath("networkCodeValue", "deviceCapabilityValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.deviceCapabilityPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromDeviceCapabilityName', () => {
                const result = client.matchNetworkCodeFromDeviceCapabilityName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.deviceCapabilityPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeviceCapabilityFromDeviceCapabilityName', () => {
                const result = client.matchDeviceCapabilityFromDeviceCapabilityName(fakePath);
                assert.strictEqual(result, "deviceCapabilityValue");
                assert((client.pathTemplates.deviceCapabilityPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('deviceCategory', async () => {
            const fakePath = "/rendered/path/deviceCategory";
            const expectedParameters = {
                network_code: "networkCodeValue",
                device_category: "deviceCategoryValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.deviceCategoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.deviceCategoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('deviceCategoryPath', () => {
                const result = client.deviceCategoryPath("networkCodeValue", "deviceCategoryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.deviceCategoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromDeviceCategoryName', () => {
                const result = client.matchNetworkCodeFromDeviceCategoryName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.deviceCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeviceCategoryFromDeviceCategoryName', () => {
                const result = client.matchDeviceCategoryFromDeviceCategoryName(fakePath);
                assert.strictEqual(result, "deviceCategoryValue");
                assert((client.pathTemplates.deviceCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('deviceManufacturer', async () => {
            const fakePath = "/rendered/path/deviceManufacturer";
            const expectedParameters = {
                network_code: "networkCodeValue",
                device_manufacturer: "deviceManufacturerValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.deviceManufacturerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.deviceManufacturerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('deviceManufacturerPath', () => {
                const result = client.deviceManufacturerPath("networkCodeValue", "deviceManufacturerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.deviceManufacturerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromDeviceManufacturerName', () => {
                const result = client.matchNetworkCodeFromDeviceManufacturerName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.deviceManufacturerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeviceManufacturerFromDeviceManufacturerName', () => {
                const result = client.matchDeviceManufacturerFromDeviceManufacturerName(fakePath);
                assert.strictEqual(result, "deviceManufacturerValue");
                assert((client.pathTemplates.deviceManufacturerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('entitySignalsMapping', async () => {
            const fakePath = "/rendered/path/entitySignalsMapping";
            const expectedParameters = {
                network_code: "networkCodeValue",
                entity_signals_mapping: "entitySignalsMappingValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.entitySignalsMappingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.entitySignalsMappingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('entitySignalsMappingPath', () => {
                const result = client.entitySignalsMappingPath("networkCodeValue", "entitySignalsMappingValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.entitySignalsMappingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromEntitySignalsMappingName', () => {
                const result = client.matchNetworkCodeFromEntitySignalsMappingName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.entitySignalsMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEntitySignalsMappingFromEntitySignalsMappingName', () => {
                const result = client.matchEntitySignalsMappingFromEntitySignalsMappingName(fakePath);
                assert.strictEqual(result, "entitySignalsMappingValue");
                assert((client.pathTemplates.entitySignalsMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('geoTarget', async () => {
            const fakePath = "/rendered/path/geoTarget";
            const expectedParameters = {
                network_code: "networkCodeValue",
                geo_target: "geoTargetValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.geoTargetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.geoTargetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('geoTargetPath', () => {
                const result = client.geoTargetPath("networkCodeValue", "geoTargetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.geoTargetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromGeoTargetName', () => {
                const result = client.matchNetworkCodeFromGeoTargetName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.geoTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGeoTargetFromGeoTargetName', () => {
                const result = client.matchGeoTargetFromGeoTargetName(fakePath);
                assert.strictEqual(result, "geoTargetValue");
                assert((client.pathTemplates.geoTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('label', async () => {
            const fakePath = "/rendered/path/label";
            const expectedParameters = {
                network_code: "networkCodeValue",
                label: "labelValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.labelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.labelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('labelPath', () => {
                const result = client.labelPath("networkCodeValue", "labelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.labelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromLabelName', () => {
                const result = client.matchNetworkCodeFromLabelName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelFromLabelName', () => {
                const result = client.matchLabelFromLabelName(fakePath);
                assert.strictEqual(result, "labelValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('liveStreamEvent', async () => {
            const fakePath = "/rendered/path/liveStreamEvent";
            const expectedParameters = {
                network_code: "networkCodeValue",
                live_stream_event: "liveStreamEventValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.liveStreamEventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.liveStreamEventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('liveStreamEventPath', () => {
                const result = client.liveStreamEventPath("networkCodeValue", "liveStreamEventValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.liveStreamEventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromLiveStreamEventName', () => {
                const result = client.matchNetworkCodeFromLiveStreamEventName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.liveStreamEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLiveStreamEventFromLiveStreamEventName', () => {
                const result = client.matchLiveStreamEventFromLiveStreamEventName(fakePath);
                assert.strictEqual(result, "liveStreamEventValue");
                assert((client.pathTemplates.liveStreamEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileCarrier', async () => {
            const fakePath = "/rendered/path/mobileCarrier";
            const expectedParameters = {
                network_code: "networkCodeValue",
                mobile_carrier: "mobileCarrierValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.mobileCarrierPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileCarrierPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileCarrierPath', () => {
                const result = client.mobileCarrierPath("networkCodeValue", "mobileCarrierValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileCarrierPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromMobileCarrierName', () => {
                const result = client.matchNetworkCodeFromMobileCarrierName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.mobileCarrierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMobileCarrierFromMobileCarrierName', () => {
                const result = client.matchMobileCarrierFromMobileCarrierName(fakePath);
                assert.strictEqual(result, "mobileCarrierValue");
                assert((client.pathTemplates.mobileCarrierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileDevice', async () => {
            const fakePath = "/rendered/path/mobileDevice";
            const expectedParameters = {
                network_code: "networkCodeValue",
                mobile_device: "mobileDeviceValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.mobileDevicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileDevicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileDevicePath', () => {
                const result = client.mobileDevicePath("networkCodeValue", "mobileDeviceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileDevicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromMobileDeviceName', () => {
                const result = client.matchNetworkCodeFromMobileDeviceName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.mobileDevicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMobileDeviceFromMobileDeviceName', () => {
                const result = client.matchMobileDeviceFromMobileDeviceName(fakePath);
                assert.strictEqual(result, "mobileDeviceValue");
                assert((client.pathTemplates.mobileDevicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileDeviceSubmodel', async () => {
            const fakePath = "/rendered/path/mobileDeviceSubmodel";
            const expectedParameters = {
                network_code: "networkCodeValue",
                mobile_device_submodel: "mobileDeviceSubmodelValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.mobileDeviceSubmodelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileDeviceSubmodelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileDeviceSubmodelPath', () => {
                const result = client.mobileDeviceSubmodelPath("networkCodeValue", "mobileDeviceSubmodelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileDeviceSubmodelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromMobileDeviceSubmodelName', () => {
                const result = client.matchNetworkCodeFromMobileDeviceSubmodelName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.mobileDeviceSubmodelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMobileDeviceSubmodelFromMobileDeviceSubmodelName', () => {
                const result = client.matchMobileDeviceSubmodelFromMobileDeviceSubmodelName(fakePath);
                assert.strictEqual(result, "mobileDeviceSubmodelValue");
                assert((client.pathTemplates.mobileDeviceSubmodelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('network', async () => {
            const fakePath = "/rendered/path/network";
            const expectedParameters = {
                network_code: "networkCodeValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.networkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.networkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('networkPath', () => {
                const result = client.networkPath("networkCodeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.networkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromNetworkName', () => {
                const result = client.matchNetworkCodeFromNetworkName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.networkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('operatingSystem', async () => {
            const fakePath = "/rendered/path/operatingSystem";
            const expectedParameters = {
                network_code: "networkCodeValue",
                operating_system: "operatingSystemValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.operatingSystemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.operatingSystemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('operatingSystemPath', () => {
                const result = client.operatingSystemPath("networkCodeValue", "operatingSystemValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.operatingSystemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromOperatingSystemName', () => {
                const result = client.matchNetworkCodeFromOperatingSystemName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.operatingSystemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOperatingSystemFromOperatingSystemName', () => {
                const result = client.matchOperatingSystemFromOperatingSystemName(fakePath);
                assert.strictEqual(result, "operatingSystemValue");
                assert((client.pathTemplates.operatingSystemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('operatingSystemVersion', async () => {
            const fakePath = "/rendered/path/operatingSystemVersion";
            const expectedParameters = {
                network_code: "networkCodeValue",
                operating_system_version: "operatingSystemVersionValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.operatingSystemVersionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.operatingSystemVersionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('operatingSystemVersionPath', () => {
                const result = client.operatingSystemVersionPath("networkCodeValue", "operatingSystemVersionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.operatingSystemVersionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromOperatingSystemVersionName', () => {
                const result = client.matchNetworkCodeFromOperatingSystemVersionName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.operatingSystemVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOperatingSystemVersionFromOperatingSystemVersionName', () => {
                const result = client.matchOperatingSystemVersionFromOperatingSystemVersionName(fakePath);
                assert.strictEqual(result, "operatingSystemVersionValue");
                assert((client.pathTemplates.operatingSystemVersionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('order', async () => {
            const fakePath = "/rendered/path/order";
            const expectedParameters = {
                network_code: "networkCodeValue",
                order: "orderValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.orderPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.orderPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('orderPath', () => {
                const result = client.orderPath("networkCodeValue", "orderValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.orderPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromOrderName', () => {
                const result = client.matchNetworkCodeFromOrderName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.orderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOrderFromOrderName', () => {
                const result = client.matchOrderFromOrderName(fakePath);
                assert.strictEqual(result, "orderValue");
                assert((client.pathTemplates.orderPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('placement', async () => {
            const fakePath = "/rendered/path/placement";
            const expectedParameters = {
                network_code: "networkCodeValue",
                placement: "placementValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.placementPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.placementPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('placementPath', () => {
                const result = client.placementPath("networkCodeValue", "placementValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.placementPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromPlacementName', () => {
                const result = client.matchNetworkCodeFromPlacementName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.placementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPlacementFromPlacementName', () => {
                const result = client.matchPlacementFromPlacementName(fakePath);
                assert.strictEqual(result, "placementValue");
                assert((client.pathTemplates.placementPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('privateAuction', async () => {
            const fakePath = "/rendered/path/privateAuction";
            const expectedParameters = {
                network_code: "networkCodeValue",
                private_auction: "privateAuctionValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.privateAuctionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.privateAuctionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('privateAuctionPath', () => {
                const result = client.privateAuctionPath("networkCodeValue", "privateAuctionValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.privateAuctionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromPrivateAuctionName', () => {
                const result = client.matchNetworkCodeFromPrivateAuctionName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.privateAuctionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPrivateAuctionFromPrivateAuctionName', () => {
                const result = client.matchPrivateAuctionFromPrivateAuctionName(fakePath);
                assert.strictEqual(result, "privateAuctionValue");
                assert((client.pathTemplates.privateAuctionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('privateAuctionDeal', async () => {
            const fakePath = "/rendered/path/privateAuctionDeal";
            const expectedParameters = {
                network_code: "networkCodeValue",
                private_auction_deal: "privateAuctionDealValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.privateAuctionDealPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.privateAuctionDealPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('privateAuctionDealPath', () => {
                const result = client.privateAuctionDealPath("networkCodeValue", "privateAuctionDealValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.privateAuctionDealPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromPrivateAuctionDealName', () => {
                const result = client.matchNetworkCodeFromPrivateAuctionDealName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.privateAuctionDealPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPrivateAuctionDealFromPrivateAuctionDealName', () => {
                const result = client.matchPrivateAuctionDealFromPrivateAuctionDealName(fakePath);
                assert.strictEqual(result, "privateAuctionDealValue");
                assert((client.pathTemplates.privateAuctionDealPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('programmaticBuyer', async () => {
            const fakePath = "/rendered/path/programmaticBuyer";
            const expectedParameters = {
                network_code: "networkCodeValue",
                programmatic_buyer: "programmaticBuyerValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.programmaticBuyerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.programmaticBuyerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('programmaticBuyerPath', () => {
                const result = client.programmaticBuyerPath("networkCodeValue", "programmaticBuyerValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.programmaticBuyerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromProgrammaticBuyerName', () => {
                const result = client.matchNetworkCodeFromProgrammaticBuyerName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.programmaticBuyerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProgrammaticBuyerFromProgrammaticBuyerName', () => {
                const result = client.matchProgrammaticBuyerFromProgrammaticBuyerName(fakePath);
                assert.strictEqual(result, "programmaticBuyerValue");
                assert((client.pathTemplates.programmaticBuyerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('report', async () => {
            const fakePath = "/rendered/path/report";
            const expectedParameters = {
                network_code: "networkCodeValue",
                report: "reportValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.reportPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.reportPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('reportPath', () => {
                const result = client.reportPath("networkCodeValue", "reportValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.reportPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromReportName', () => {
                const result = client.matchNetworkCodeFromReportName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.reportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReportFromReportName', () => {
                const result = client.matchReportFromReportName(fakePath);
                assert.strictEqual(result, "reportValue");
                assert((client.pathTemplates.reportPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('role', async () => {
            const fakePath = "/rendered/path/role";
            const expectedParameters = {
                network_code: "networkCodeValue",
                role: "roleValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.rolePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolePath', () => {
                const result = client.rolePath("networkCodeValue", "roleValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromRoleName', () => {
                const result = client.matchNetworkCodeFromRoleName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.rolePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRoleFromRoleName', () => {
                const result = client.matchRoleFromRoleName(fakePath);
                assert.strictEqual(result, "roleValue");
                assert((client.pathTemplates.rolePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('site', async () => {
            const fakePath = "/rendered/path/site";
            const expectedParameters = {
                network_code: "networkCodeValue",
                site: "siteValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.sitePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sitePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sitePath', () => {
                const result = client.sitePath("networkCodeValue", "siteValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sitePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromSiteName', () => {
                const result = client.matchNetworkCodeFromSiteName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.sitePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSiteFromSiteName', () => {
                const result = client.matchSiteFromSiteName(fakePath);
                assert.strictEqual(result, "siteValue");
                assert((client.pathTemplates.sitePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('taxonomyCategory', async () => {
            const fakePath = "/rendered/path/taxonomyCategory";
            const expectedParameters = {
                network_code: "networkCodeValue",
                taxonomy_category: "taxonomyCategoryValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.taxonomyCategoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.taxonomyCategoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('taxonomyCategoryPath', () => {
                const result = client.taxonomyCategoryPath("networkCodeValue", "taxonomyCategoryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.taxonomyCategoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromTaxonomyCategoryName', () => {
                const result = client.matchNetworkCodeFromTaxonomyCategoryName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTaxonomyCategoryFromTaxonomyCategoryName', () => {
                const result = client.matchTaxonomyCategoryFromTaxonomyCategoryName(fakePath);
                assert.strictEqual(result, "taxonomyCategoryValue");
                assert((client.pathTemplates.taxonomyCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('team', async () => {
            const fakePath = "/rendered/path/team";
            const expectedParameters = {
                network_code: "networkCodeValue",
                team: "teamValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.teamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.teamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('teamPath', () => {
                const result = client.teamPath("networkCodeValue", "teamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.teamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromTeamName', () => {
                const result = client.matchNetworkCodeFromTeamName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.teamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTeamFromTeamName', () => {
                const result = client.matchTeamFromTeamName(fakePath);
                assert.strictEqual(result, "teamValue");
                assert((client.pathTemplates.teamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('user', async () => {
            const fakePath = "/rendered/path/user";
            const expectedParameters = {
                network_code: "networkCodeValue",
                user: "userValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.userPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userPath', () => {
                const result = client.userPath("networkCodeValue", "userValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromUserName', () => {
                const result = client.matchNetworkCodeFromUserName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.userPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserFromUserName', () => {
                const result = client.matchUserFromUserName(fakePath);
                assert.strictEqual(result, "userValue");
                assert((client.pathTemplates.userPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('webProperty', async () => {
            const fakePath = "/rendered/path/webProperty";
            const expectedParameters = {
                network_code: "networkCodeValue",
                web_property: "webPropertyValue",
            };
            const client = new audiencesegmentserviceModule.v1.AudienceSegmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.webPropertyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.webPropertyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('webPropertyPath', () => {
                const result = client.webPropertyPath("networkCodeValue", "webPropertyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.webPropertyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchNetworkCodeFromWebPropertyName', () => {
                const result = client.matchNetworkCodeFromWebPropertyName(fakePath);
                assert.strictEqual(result, "networkCodeValue");
                assert((client.pathTemplates.webPropertyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWebPropertyFromWebPropertyName', () => {
                const result = client.matchWebPropertyFromWebPropertyName(fakePath);
                assert.strictEqual(result, "webPropertyValue");
                assert((client.pathTemplates.webPropertyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
