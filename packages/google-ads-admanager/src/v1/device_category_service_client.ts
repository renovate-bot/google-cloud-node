// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/device_category_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './device_category_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Provides methods for handling `DeviceCategory` objects.
 * @class
 * @memberof v1
 */
export class DeviceCategoryServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('admanager');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  deviceCategoryServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DeviceCategoryServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DeviceCategoryServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DeviceCategoryServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'admanager.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    // Implicitly enable HTTP transport for the APIs that use REST as transport (e.g. Google Cloud Compute).
    if (!opts) {
      opts = {fallback: true};
    } else {
      opts.fallback = opts.fallback ?? true;
    }
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      adBreakPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/liveStreamEventsByAssetKey/{asset_key}/adBreaks/{ad_break}'
      ),
      adReviewCenterAdPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/webProperties/{web_property_code}/adReviewCenterAds/{ad_review_center_ad}'
      ),
      adUnitPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/adUnits/{ad_unit}'
      ),
      applicationPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/applications/{application}'
      ),
      audienceSegmentPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/audienceSegments/{audience_segment}'
      ),
      bandwidthGroupPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/bandwidthGroups/{bandwidth_group}'
      ),
      browserPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/browsers/{browser}'
      ),
      browserLanguagePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/browserLanguages/{browser_language}'
      ),
      cmsMetadataKeyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/cmsMetadataKeys/{cms_metadata_key}'
      ),
      cmsMetadataValuePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/cmsMetadataValues/{cms_metadata_value}'
      ),
      companyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/companies/{company}'
      ),
      contactPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/contacts/{contact}'
      ),
      contentPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/content/{content}'
      ),
      contentBundlePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/contentBundles/{content_bundle}'
      ),
      contentLabelPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/contentLabels/{content_label}'
      ),
      creativeTemplatePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/creativeTemplates/{creative_template}'
      ),
      customFieldPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customFields/{custom_field}'
      ),
      customTargetingKeyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customTargetingKeys/{custom_targeting_key}'
      ),
      customTargetingValuePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/customTargetingValues/{custom_targeting_value}'
      ),
      deviceCapabilityPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/deviceCapabilities/{device_capability}'
      ),
      deviceCategoryPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/deviceCategories/{device_category}'
      ),
      deviceManufacturerPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/deviceManufacturers/{device_manufacturer}'
      ),
      entitySignalsMappingPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/entitySignalsMappings/{entity_signals_mapping}'
      ),
      geoTargetPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/geoTargets/{geo_target}'
      ),
      labelPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/labels/{label}'
      ),
      liveStreamEventPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/liveStreamEvents/{live_stream_event}'
      ),
      mobileCarrierPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/mobileCarriers/{mobile_carrier}'
      ),
      mobileDevicePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/mobileDevices/{mobile_device}'
      ),
      mobileDeviceSubmodelPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/mobileDeviceSubmodels/{mobile_device_submodel}'
      ),
      networkPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}'
      ),
      operatingSystemPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/operatingSystems/{operating_system}'
      ),
      operatingSystemVersionPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/operatingSystemVersions/{operating_system_version}'
      ),
      orderPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/orders/{order}'
      ),
      placementPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/placements/{placement}'
      ),
      privateAuctionPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/privateAuctions/{private_auction}'
      ),
      privateAuctionDealPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/privateAuctionDeals/{private_auction_deal}'
      ),
      programmaticBuyerPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/programmaticBuyers/{programmatic_buyer}'
      ),
      reportPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/reports/{report}'
      ),
      rolePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/roles/{role}'
      ),
      sitePathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/sites/{site}'
      ),
      taxonomyCategoryPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/taxonomyCategories/{taxonomy_category}'
      ),
      teamPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/teams/{team}'
      ),
      userPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/users/{user}'
      ),
      webPropertyPathTemplate: new this._gaxModule.PathTemplate(
        'networks/{network_code}/webProperties/{web_property}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDeviceCategories:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'deviceCategories')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.ads.admanager.v1.DeviceCategoryService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.deviceCategoryServiceStub) {
      return this.deviceCategoryServiceStub;
    }

    // Put together the "service stub" for
    // google.ads.admanager.v1.DeviceCategoryService.
    this.deviceCategoryServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.ads.admanager.v1.DeviceCategoryService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.ads.admanager.v1.DeviceCategoryService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const deviceCategoryServiceStubMethods =
        ['getDeviceCategory', 'listDeviceCategories'];
    for (const methodName of deviceCategoryServiceStubMethods) {
      const callPromise = this.deviceCategoryServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.deviceCategoryServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'admanager.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'admanager.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/admanager'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * API to retrieve a `DeviceCategory` object.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The resource name of the DeviceCategory.
 *   Format: `networks/{network_code}/deviceCategories/{device_category_id}`
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.ads.admanager.v1.DeviceCategory|DeviceCategory}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/device_category_service.get_device_category.js</caption>
 * region_tag:admanager_v1_generated_DeviceCategoryService_GetDeviceCategory_async
 */
  getDeviceCategory(
      request?: protos.google.ads.admanager.v1.IGetDeviceCategoryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.ads.admanager.v1.IDeviceCategory,
        protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|undefined, {}|undefined
      ]>;
  getDeviceCategory(
      request: protos.google.ads.admanager.v1.IGetDeviceCategoryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.ads.admanager.v1.IDeviceCategory,
          protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  getDeviceCategory(
      request: protos.google.ads.admanager.v1.IGetDeviceCategoryRequest,
      callback: Callback<
          protos.google.ads.admanager.v1.IDeviceCategory,
          protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  getDeviceCategory(
      request?: protos.google.ads.admanager.v1.IGetDeviceCategoryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.ads.admanager.v1.IDeviceCategory,
          protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.ads.admanager.v1.IDeviceCategory,
          protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.ads.admanager.v1.IDeviceCategory,
        protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getDeviceCategory request %j', request);
    const wrappedCallback: Callback<
        protos.google.ads.admanager.v1.IDeviceCategory,
        protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getDeviceCategory response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getDeviceCategory(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.ads.admanager.v1.IDeviceCategory,
        protos.google.ads.admanager.v1.IGetDeviceCategoryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getDeviceCategory response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

 /**
 * API to retrieve a list of `DeviceCategory` objects.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of DeviceCategories.
 *   Format: `networks/{network_code}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `DeviceCategories` to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   `DeviceCategories` will be returned. The maximum value is 1000; values
 *   greater than 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeviceCategories`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeviceCategories`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Expression to filter the response.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters
 * @param {string} [request.orderBy]
 *   Optional. Expression to specify sorting order.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters#order
 * @param {number} [request.skip]
 *   Optional. Number of individual resources to skip while paginating.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.ads.admanager.v1.DeviceCategory|DeviceCategory}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDeviceCategoriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDeviceCategories(
      request?: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.ads.admanager.v1.IDeviceCategory[],
        protos.google.ads.admanager.v1.IListDeviceCategoriesRequest|null,
        protos.google.ads.admanager.v1.IListDeviceCategoriesResponse
      ]>;
  listDeviceCategories(
      request: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
          protos.google.ads.admanager.v1.IListDeviceCategoriesResponse|null|undefined,
          protos.google.ads.admanager.v1.IDeviceCategory>): void;
  listDeviceCategories(
      request: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      callback: PaginationCallback<
          protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
          protos.google.ads.admanager.v1.IListDeviceCategoriesResponse|null|undefined,
          protos.google.ads.admanager.v1.IDeviceCategory>): void;
  listDeviceCategories(
      request?: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
          protos.google.ads.admanager.v1.IListDeviceCategoriesResponse|null|undefined,
          protos.google.ads.admanager.v1.IDeviceCategory>,
      callback?: PaginationCallback<
          protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
          protos.google.ads.admanager.v1.IListDeviceCategoriesResponse|null|undefined,
          protos.google.ads.admanager.v1.IDeviceCategory>):
      Promise<[
        protos.google.ads.admanager.v1.IDeviceCategory[],
        protos.google.ads.admanager.v1.IListDeviceCategoriesRequest|null,
        protos.google.ads.admanager.v1.IListDeviceCategoriesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      protos.google.ads.admanager.v1.IListDeviceCategoriesResponse|null|undefined,
      protos.google.ads.admanager.v1.IDeviceCategory>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDeviceCategories values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDeviceCategories request %j', request);
    return this.innerApiCalls
      .listDeviceCategories(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.ads.admanager.v1.IDeviceCategory[],
        protos.google.ads.admanager.v1.IListDeviceCategoriesRequest|null,
        protos.google.ads.admanager.v1.IListDeviceCategoriesResponse
      ]) => {
        this._log.info('listDeviceCategories values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDeviceCategories`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of DeviceCategories.
 *   Format: `networks/{network_code}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `DeviceCategories` to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   `DeviceCategories` will be returned. The maximum value is 1000; values
 *   greater than 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeviceCategories`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeviceCategories`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Expression to filter the response.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters
 * @param {string} [request.orderBy]
 *   Optional. Expression to specify sorting order.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters#order
 * @param {number} [request.skip]
 *   Optional. Number of individual resources to skip while paginating.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.ads.admanager.v1.DeviceCategory|DeviceCategory} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDeviceCategoriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDeviceCategoriesStream(
      request?: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDeviceCategories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDeviceCategories stream %j', request);
    return this.descriptors.page.listDeviceCategories.createStream(
      this.innerApiCalls.listDeviceCategories as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDeviceCategories`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which owns this collection of DeviceCategories.
 *   Format: `networks/{network_code}`
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of `DeviceCategories` to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   `DeviceCategories` will be returned. The maximum value is 1000; values
 *   greater than 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListDeviceCategories`
 *   call. Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListDeviceCategories`
 *   must match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Expression to filter the response.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters
 * @param {string} [request.orderBy]
 *   Optional. Expression to specify sorting order.
 *   See syntax details at
 *   https://developers.google.com/ad-manager/api/beta/filters#order
 * @param {number} [request.skip]
 *   Optional. Number of individual resources to skip while paginating.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.ads.admanager.v1.DeviceCategory|DeviceCategory}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/device_category_service.list_device_categories.js</caption>
 * region_tag:admanager_v1_generated_DeviceCategoryService_ListDeviceCategories_async
 */
  listDeviceCategoriesAsync(
      request?: protos.google.ads.admanager.v1.IListDeviceCategoriesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.ads.admanager.v1.IDeviceCategory>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDeviceCategories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDeviceCategories iterate %j', request);
    return this.descriptors.page.listDeviceCategories.asyncIterate(
      this.innerApiCalls['listDeviceCategories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.ads.admanager.v1.IDeviceCategory>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified adBreak resource name string.
   *
   * @param {string} network_code
   * @param {string} asset_key
   * @param {string} ad_break
   * @returns {string} Resource name string.
   */
  adBreakPath(networkCode:string,assetKey:string,adBreak:string) {
    return this.pathTemplates.adBreakPathTemplate.render({
      network_code: networkCode,
      asset_key: assetKey,
      ad_break: adBreak,
    });
  }

  /**
   * Parse the network_code from AdBreak resource.
   *
   * @param {string} adBreakName
   *   A fully-qualified path representing AdBreak resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromAdBreakName(adBreakName: string) {
    return this.pathTemplates.adBreakPathTemplate.match(adBreakName).network_code;
  }

  /**
   * Parse the asset_key from AdBreak resource.
   *
   * @param {string} adBreakName
   *   A fully-qualified path representing AdBreak resource.
   * @returns {string} A string representing the asset_key.
   */
  matchAssetKeyFromAdBreakName(adBreakName: string) {
    return this.pathTemplates.adBreakPathTemplate.match(adBreakName).asset_key;
  }

  /**
   * Parse the ad_break from AdBreak resource.
   *
   * @param {string} adBreakName
   *   A fully-qualified path representing AdBreak resource.
   * @returns {string} A string representing the ad_break.
   */
  matchAdBreakFromAdBreakName(adBreakName: string) {
    return this.pathTemplates.adBreakPathTemplate.match(adBreakName).ad_break;
  }

  /**
   * Return a fully-qualified adReviewCenterAd resource name string.
   *
   * @param {string} network_code
   * @param {string} web_property_code
   * @param {string} ad_review_center_ad
   * @returns {string} Resource name string.
   */
  adReviewCenterAdPath(networkCode:string,webPropertyCode:string,adReviewCenterAd:string) {
    return this.pathTemplates.adReviewCenterAdPathTemplate.render({
      network_code: networkCode,
      web_property_code: webPropertyCode,
      ad_review_center_ad: adReviewCenterAd,
    });
  }

  /**
   * Parse the network_code from AdReviewCenterAd resource.
   *
   * @param {string} adReviewCenterAdName
   *   A fully-qualified path representing AdReviewCenterAd resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromAdReviewCenterAdName(adReviewCenterAdName: string) {
    return this.pathTemplates.adReviewCenterAdPathTemplate.match(adReviewCenterAdName).network_code;
  }

  /**
   * Parse the web_property_code from AdReviewCenterAd resource.
   *
   * @param {string} adReviewCenterAdName
   *   A fully-qualified path representing AdReviewCenterAd resource.
   * @returns {string} A string representing the web_property_code.
   */
  matchWebPropertyCodeFromAdReviewCenterAdName(adReviewCenterAdName: string) {
    return this.pathTemplates.adReviewCenterAdPathTemplate.match(adReviewCenterAdName).web_property_code;
  }

  /**
   * Parse the ad_review_center_ad from AdReviewCenterAd resource.
   *
   * @param {string} adReviewCenterAdName
   *   A fully-qualified path representing AdReviewCenterAd resource.
   * @returns {string} A string representing the ad_review_center_ad.
   */
  matchAdReviewCenterAdFromAdReviewCenterAdName(adReviewCenterAdName: string) {
    return this.pathTemplates.adReviewCenterAdPathTemplate.match(adReviewCenterAdName).ad_review_center_ad;
  }

  /**
   * Return a fully-qualified adUnit resource name string.
   *
   * @param {string} network_code
   * @param {string} ad_unit
   * @returns {string} Resource name string.
   */
  adUnitPath(networkCode:string,adUnit:string) {
    return this.pathTemplates.adUnitPathTemplate.render({
      network_code: networkCode,
      ad_unit: adUnit,
    });
  }

  /**
   * Parse the network_code from AdUnit resource.
   *
   * @param {string} adUnitName
   *   A fully-qualified path representing AdUnit resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromAdUnitName(adUnitName: string) {
    return this.pathTemplates.adUnitPathTemplate.match(adUnitName).network_code;
  }

  /**
   * Parse the ad_unit from AdUnit resource.
   *
   * @param {string} adUnitName
   *   A fully-qualified path representing AdUnit resource.
   * @returns {string} A string representing the ad_unit.
   */
  matchAdUnitFromAdUnitName(adUnitName: string) {
    return this.pathTemplates.adUnitPathTemplate.match(adUnitName).ad_unit;
  }

  /**
   * Return a fully-qualified application resource name string.
   *
   * @param {string} network_code
   * @param {string} application
   * @returns {string} Resource name string.
   */
  applicationPath(networkCode:string,application:string) {
    return this.pathTemplates.applicationPathTemplate.render({
      network_code: networkCode,
      application: application,
    });
  }

  /**
   * Parse the network_code from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).network_code;
  }

  /**
   * Parse the application from Application resource.
   *
   * @param {string} applicationName
   *   A fully-qualified path representing Application resource.
   * @returns {string} A string representing the application.
   */
  matchApplicationFromApplicationName(applicationName: string) {
    return this.pathTemplates.applicationPathTemplate.match(applicationName).application;
  }

  /**
   * Return a fully-qualified audienceSegment resource name string.
   *
   * @param {string} network_code
   * @param {string} audience_segment
   * @returns {string} Resource name string.
   */
  audienceSegmentPath(networkCode:string,audienceSegment:string) {
    return this.pathTemplates.audienceSegmentPathTemplate.render({
      network_code: networkCode,
      audience_segment: audienceSegment,
    });
  }

  /**
   * Parse the network_code from AudienceSegment resource.
   *
   * @param {string} audienceSegmentName
   *   A fully-qualified path representing AudienceSegment resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromAudienceSegmentName(audienceSegmentName: string) {
    return this.pathTemplates.audienceSegmentPathTemplate.match(audienceSegmentName).network_code;
  }

  /**
   * Parse the audience_segment from AudienceSegment resource.
   *
   * @param {string} audienceSegmentName
   *   A fully-qualified path representing AudienceSegment resource.
   * @returns {string} A string representing the audience_segment.
   */
  matchAudienceSegmentFromAudienceSegmentName(audienceSegmentName: string) {
    return this.pathTemplates.audienceSegmentPathTemplate.match(audienceSegmentName).audience_segment;
  }

  /**
   * Return a fully-qualified bandwidthGroup resource name string.
   *
   * @param {string} network_code
   * @param {string} bandwidth_group
   * @returns {string} Resource name string.
   */
  bandwidthGroupPath(networkCode:string,bandwidthGroup:string) {
    return this.pathTemplates.bandwidthGroupPathTemplate.render({
      network_code: networkCode,
      bandwidth_group: bandwidthGroup,
    });
  }

  /**
   * Parse the network_code from BandwidthGroup resource.
   *
   * @param {string} bandwidthGroupName
   *   A fully-qualified path representing BandwidthGroup resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromBandwidthGroupName(bandwidthGroupName: string) {
    return this.pathTemplates.bandwidthGroupPathTemplate.match(bandwidthGroupName).network_code;
  }

  /**
   * Parse the bandwidth_group from BandwidthGroup resource.
   *
   * @param {string} bandwidthGroupName
   *   A fully-qualified path representing BandwidthGroup resource.
   * @returns {string} A string representing the bandwidth_group.
   */
  matchBandwidthGroupFromBandwidthGroupName(bandwidthGroupName: string) {
    return this.pathTemplates.bandwidthGroupPathTemplate.match(bandwidthGroupName).bandwidth_group;
  }

  /**
   * Return a fully-qualified browser resource name string.
   *
   * @param {string} network_code
   * @param {string} browser
   * @returns {string} Resource name string.
   */
  browserPath(networkCode:string,browser:string) {
    return this.pathTemplates.browserPathTemplate.render({
      network_code: networkCode,
      browser: browser,
    });
  }

  /**
   * Parse the network_code from Browser resource.
   *
   * @param {string} browserName
   *   A fully-qualified path representing Browser resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromBrowserName(browserName: string) {
    return this.pathTemplates.browserPathTemplate.match(browserName).network_code;
  }

  /**
   * Parse the browser from Browser resource.
   *
   * @param {string} browserName
   *   A fully-qualified path representing Browser resource.
   * @returns {string} A string representing the browser.
   */
  matchBrowserFromBrowserName(browserName: string) {
    return this.pathTemplates.browserPathTemplate.match(browserName).browser;
  }

  /**
   * Return a fully-qualified browserLanguage resource name string.
   *
   * @param {string} network_code
   * @param {string} browser_language
   * @returns {string} Resource name string.
   */
  browserLanguagePath(networkCode:string,browserLanguage:string) {
    return this.pathTemplates.browserLanguagePathTemplate.render({
      network_code: networkCode,
      browser_language: browserLanguage,
    });
  }

  /**
   * Parse the network_code from BrowserLanguage resource.
   *
   * @param {string} browserLanguageName
   *   A fully-qualified path representing BrowserLanguage resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromBrowserLanguageName(browserLanguageName: string) {
    return this.pathTemplates.browserLanguagePathTemplate.match(browserLanguageName).network_code;
  }

  /**
   * Parse the browser_language from BrowserLanguage resource.
   *
   * @param {string} browserLanguageName
   *   A fully-qualified path representing BrowserLanguage resource.
   * @returns {string} A string representing the browser_language.
   */
  matchBrowserLanguageFromBrowserLanguageName(browserLanguageName: string) {
    return this.pathTemplates.browserLanguagePathTemplate.match(browserLanguageName).browser_language;
  }

  /**
   * Return a fully-qualified cmsMetadataKey resource name string.
   *
   * @param {string} network_code
   * @param {string} cms_metadata_key
   * @returns {string} Resource name string.
   */
  cmsMetadataKeyPath(networkCode:string,cmsMetadataKey:string) {
    return this.pathTemplates.cmsMetadataKeyPathTemplate.render({
      network_code: networkCode,
      cms_metadata_key: cmsMetadataKey,
    });
  }

  /**
   * Parse the network_code from CmsMetadataKey resource.
   *
   * @param {string} cmsMetadataKeyName
   *   A fully-qualified path representing CmsMetadataKey resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCmsMetadataKeyName(cmsMetadataKeyName: string) {
    return this.pathTemplates.cmsMetadataKeyPathTemplate.match(cmsMetadataKeyName).network_code;
  }

  /**
   * Parse the cms_metadata_key from CmsMetadataKey resource.
   *
   * @param {string} cmsMetadataKeyName
   *   A fully-qualified path representing CmsMetadataKey resource.
   * @returns {string} A string representing the cms_metadata_key.
   */
  matchCmsMetadataKeyFromCmsMetadataKeyName(cmsMetadataKeyName: string) {
    return this.pathTemplates.cmsMetadataKeyPathTemplate.match(cmsMetadataKeyName).cms_metadata_key;
  }

  /**
   * Return a fully-qualified cmsMetadataValue resource name string.
   *
   * @param {string} network_code
   * @param {string} cms_metadata_value
   * @returns {string} Resource name string.
   */
  cmsMetadataValuePath(networkCode:string,cmsMetadataValue:string) {
    return this.pathTemplates.cmsMetadataValuePathTemplate.render({
      network_code: networkCode,
      cms_metadata_value: cmsMetadataValue,
    });
  }

  /**
   * Parse the network_code from CmsMetadataValue resource.
   *
   * @param {string} cmsMetadataValueName
   *   A fully-qualified path representing CmsMetadataValue resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCmsMetadataValueName(cmsMetadataValueName: string) {
    return this.pathTemplates.cmsMetadataValuePathTemplate.match(cmsMetadataValueName).network_code;
  }

  /**
   * Parse the cms_metadata_value from CmsMetadataValue resource.
   *
   * @param {string} cmsMetadataValueName
   *   A fully-qualified path representing CmsMetadataValue resource.
   * @returns {string} A string representing the cms_metadata_value.
   */
  matchCmsMetadataValueFromCmsMetadataValueName(cmsMetadataValueName: string) {
    return this.pathTemplates.cmsMetadataValuePathTemplate.match(cmsMetadataValueName).cms_metadata_value;
  }

  /**
   * Return a fully-qualified company resource name string.
   *
   * @param {string} network_code
   * @param {string} company
   * @returns {string} Resource name string.
   */
  companyPath(networkCode:string,company:string) {
    return this.pathTemplates.companyPathTemplate.render({
      network_code: networkCode,
      company: company,
    });
  }

  /**
   * Parse the network_code from Company resource.
   *
   * @param {string} companyName
   *   A fully-qualified path representing Company resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCompanyName(companyName: string) {
    return this.pathTemplates.companyPathTemplate.match(companyName).network_code;
  }

  /**
   * Parse the company from Company resource.
   *
   * @param {string} companyName
   *   A fully-qualified path representing Company resource.
   * @returns {string} A string representing the company.
   */
  matchCompanyFromCompanyName(companyName: string) {
    return this.pathTemplates.companyPathTemplate.match(companyName).company;
  }

  /**
   * Return a fully-qualified contact resource name string.
   *
   * @param {string} network_code
   * @param {string} contact
   * @returns {string} Resource name string.
   */
  contactPath(networkCode:string,contact:string) {
    return this.pathTemplates.contactPathTemplate.render({
      network_code: networkCode,
      contact: contact,
    });
  }

  /**
   * Parse the network_code from Contact resource.
   *
   * @param {string} contactName
   *   A fully-qualified path representing Contact resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromContactName(contactName: string) {
    return this.pathTemplates.contactPathTemplate.match(contactName).network_code;
  }

  /**
   * Parse the contact from Contact resource.
   *
   * @param {string} contactName
   *   A fully-qualified path representing Contact resource.
   * @returns {string} A string representing the contact.
   */
  matchContactFromContactName(contactName: string) {
    return this.pathTemplates.contactPathTemplate.match(contactName).contact;
  }

  /**
   * Return a fully-qualified content resource name string.
   *
   * @param {string} network_code
   * @param {string} content
   * @returns {string} Resource name string.
   */
  contentPath(networkCode:string,content:string) {
    return this.pathTemplates.contentPathTemplate.render({
      network_code: networkCode,
      content: content,
    });
  }

  /**
   * Parse the network_code from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).network_code;
  }

  /**
   * Parse the content from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the content.
   */
  matchContentFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).content;
  }

  /**
   * Return a fully-qualified contentBundle resource name string.
   *
   * @param {string} network_code
   * @param {string} content_bundle
   * @returns {string} Resource name string.
   */
  contentBundlePath(networkCode:string,contentBundle:string) {
    return this.pathTemplates.contentBundlePathTemplate.render({
      network_code: networkCode,
      content_bundle: contentBundle,
    });
  }

  /**
   * Parse the network_code from ContentBundle resource.
   *
   * @param {string} contentBundleName
   *   A fully-qualified path representing ContentBundle resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromContentBundleName(contentBundleName: string) {
    return this.pathTemplates.contentBundlePathTemplate.match(contentBundleName).network_code;
  }

  /**
   * Parse the content_bundle from ContentBundle resource.
   *
   * @param {string} contentBundleName
   *   A fully-qualified path representing ContentBundle resource.
   * @returns {string} A string representing the content_bundle.
   */
  matchContentBundleFromContentBundleName(contentBundleName: string) {
    return this.pathTemplates.contentBundlePathTemplate.match(contentBundleName).content_bundle;
  }

  /**
   * Return a fully-qualified contentLabel resource name string.
   *
   * @param {string} network_code
   * @param {string} content_label
   * @returns {string} Resource name string.
   */
  contentLabelPath(networkCode:string,contentLabel:string) {
    return this.pathTemplates.contentLabelPathTemplate.render({
      network_code: networkCode,
      content_label: contentLabel,
    });
  }

  /**
   * Parse the network_code from ContentLabel resource.
   *
   * @param {string} contentLabelName
   *   A fully-qualified path representing ContentLabel resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromContentLabelName(contentLabelName: string) {
    return this.pathTemplates.contentLabelPathTemplate.match(contentLabelName).network_code;
  }

  /**
   * Parse the content_label from ContentLabel resource.
   *
   * @param {string} contentLabelName
   *   A fully-qualified path representing ContentLabel resource.
   * @returns {string} A string representing the content_label.
   */
  matchContentLabelFromContentLabelName(contentLabelName: string) {
    return this.pathTemplates.contentLabelPathTemplate.match(contentLabelName).content_label;
  }

  /**
   * Return a fully-qualified creativeTemplate resource name string.
   *
   * @param {string} network_code
   * @param {string} creative_template
   * @returns {string} Resource name string.
   */
  creativeTemplatePath(networkCode:string,creativeTemplate:string) {
    return this.pathTemplates.creativeTemplatePathTemplate.render({
      network_code: networkCode,
      creative_template: creativeTemplate,
    });
  }

  /**
   * Parse the network_code from CreativeTemplate resource.
   *
   * @param {string} creativeTemplateName
   *   A fully-qualified path representing CreativeTemplate resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCreativeTemplateName(creativeTemplateName: string) {
    return this.pathTemplates.creativeTemplatePathTemplate.match(creativeTemplateName).network_code;
  }

  /**
   * Parse the creative_template from CreativeTemplate resource.
   *
   * @param {string} creativeTemplateName
   *   A fully-qualified path representing CreativeTemplate resource.
   * @returns {string} A string representing the creative_template.
   */
  matchCreativeTemplateFromCreativeTemplateName(creativeTemplateName: string) {
    return this.pathTemplates.creativeTemplatePathTemplate.match(creativeTemplateName).creative_template;
  }

  /**
   * Return a fully-qualified customField resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_field
   * @returns {string} Resource name string.
   */
  customFieldPath(networkCode:string,customField:string) {
    return this.pathTemplates.customFieldPathTemplate.render({
      network_code: networkCode,
      custom_field: customField,
    });
  }

  /**
   * Parse the network_code from CustomField resource.
   *
   * @param {string} customFieldName
   *   A fully-qualified path representing CustomField resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomFieldName(customFieldName: string) {
    return this.pathTemplates.customFieldPathTemplate.match(customFieldName).network_code;
  }

  /**
   * Parse the custom_field from CustomField resource.
   *
   * @param {string} customFieldName
   *   A fully-qualified path representing CustomField resource.
   * @returns {string} A string representing the custom_field.
   */
  matchCustomFieldFromCustomFieldName(customFieldName: string) {
    return this.pathTemplates.customFieldPathTemplate.match(customFieldName).custom_field;
  }

  /**
   * Return a fully-qualified customTargetingKey resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_targeting_key
   * @returns {string} Resource name string.
   */
  customTargetingKeyPath(networkCode:string,customTargetingKey:string) {
    return this.pathTemplates.customTargetingKeyPathTemplate.render({
      network_code: networkCode,
      custom_targeting_key: customTargetingKey,
    });
  }

  /**
   * Parse the network_code from CustomTargetingKey resource.
   *
   * @param {string} customTargetingKeyName
   *   A fully-qualified path representing CustomTargetingKey resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomTargetingKeyName(customTargetingKeyName: string) {
    return this.pathTemplates.customTargetingKeyPathTemplate.match(customTargetingKeyName).network_code;
  }

  /**
   * Parse the custom_targeting_key from CustomTargetingKey resource.
   *
   * @param {string} customTargetingKeyName
   *   A fully-qualified path representing CustomTargetingKey resource.
   * @returns {string} A string representing the custom_targeting_key.
   */
  matchCustomTargetingKeyFromCustomTargetingKeyName(customTargetingKeyName: string) {
    return this.pathTemplates.customTargetingKeyPathTemplate.match(customTargetingKeyName).custom_targeting_key;
  }

  /**
   * Return a fully-qualified customTargetingValue resource name string.
   *
   * @param {string} network_code
   * @param {string} custom_targeting_value
   * @returns {string} Resource name string.
   */
  customTargetingValuePath(networkCode:string,customTargetingValue:string) {
    return this.pathTemplates.customTargetingValuePathTemplate.render({
      network_code: networkCode,
      custom_targeting_value: customTargetingValue,
    });
  }

  /**
   * Parse the network_code from CustomTargetingValue resource.
   *
   * @param {string} customTargetingValueName
   *   A fully-qualified path representing CustomTargetingValue resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromCustomTargetingValueName(customTargetingValueName: string) {
    return this.pathTemplates.customTargetingValuePathTemplate.match(customTargetingValueName).network_code;
  }

  /**
   * Parse the custom_targeting_value from CustomTargetingValue resource.
   *
   * @param {string} customTargetingValueName
   *   A fully-qualified path representing CustomTargetingValue resource.
   * @returns {string} A string representing the custom_targeting_value.
   */
  matchCustomTargetingValueFromCustomTargetingValueName(customTargetingValueName: string) {
    return this.pathTemplates.customTargetingValuePathTemplate.match(customTargetingValueName).custom_targeting_value;
  }

  /**
   * Return a fully-qualified deviceCapability resource name string.
   *
   * @param {string} network_code
   * @param {string} device_capability
   * @returns {string} Resource name string.
   */
  deviceCapabilityPath(networkCode:string,deviceCapability:string) {
    return this.pathTemplates.deviceCapabilityPathTemplate.render({
      network_code: networkCode,
      device_capability: deviceCapability,
    });
  }

  /**
   * Parse the network_code from DeviceCapability resource.
   *
   * @param {string} deviceCapabilityName
   *   A fully-qualified path representing DeviceCapability resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromDeviceCapabilityName(deviceCapabilityName: string) {
    return this.pathTemplates.deviceCapabilityPathTemplate.match(deviceCapabilityName).network_code;
  }

  /**
   * Parse the device_capability from DeviceCapability resource.
   *
   * @param {string} deviceCapabilityName
   *   A fully-qualified path representing DeviceCapability resource.
   * @returns {string} A string representing the device_capability.
   */
  matchDeviceCapabilityFromDeviceCapabilityName(deviceCapabilityName: string) {
    return this.pathTemplates.deviceCapabilityPathTemplate.match(deviceCapabilityName).device_capability;
  }

  /**
   * Return a fully-qualified deviceCategory resource name string.
   *
   * @param {string} network_code
   * @param {string} device_category
   * @returns {string} Resource name string.
   */
  deviceCategoryPath(networkCode:string,deviceCategory:string) {
    return this.pathTemplates.deviceCategoryPathTemplate.render({
      network_code: networkCode,
      device_category: deviceCategory,
    });
  }

  /**
   * Parse the network_code from DeviceCategory resource.
   *
   * @param {string} deviceCategoryName
   *   A fully-qualified path representing DeviceCategory resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromDeviceCategoryName(deviceCategoryName: string) {
    return this.pathTemplates.deviceCategoryPathTemplate.match(deviceCategoryName).network_code;
  }

  /**
   * Parse the device_category from DeviceCategory resource.
   *
   * @param {string} deviceCategoryName
   *   A fully-qualified path representing DeviceCategory resource.
   * @returns {string} A string representing the device_category.
   */
  matchDeviceCategoryFromDeviceCategoryName(deviceCategoryName: string) {
    return this.pathTemplates.deviceCategoryPathTemplate.match(deviceCategoryName).device_category;
  }

  /**
   * Return a fully-qualified deviceManufacturer resource name string.
   *
   * @param {string} network_code
   * @param {string} device_manufacturer
   * @returns {string} Resource name string.
   */
  deviceManufacturerPath(networkCode:string,deviceManufacturer:string) {
    return this.pathTemplates.deviceManufacturerPathTemplate.render({
      network_code: networkCode,
      device_manufacturer: deviceManufacturer,
    });
  }

  /**
   * Parse the network_code from DeviceManufacturer resource.
   *
   * @param {string} deviceManufacturerName
   *   A fully-qualified path representing DeviceManufacturer resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromDeviceManufacturerName(deviceManufacturerName: string) {
    return this.pathTemplates.deviceManufacturerPathTemplate.match(deviceManufacturerName).network_code;
  }

  /**
   * Parse the device_manufacturer from DeviceManufacturer resource.
   *
   * @param {string} deviceManufacturerName
   *   A fully-qualified path representing DeviceManufacturer resource.
   * @returns {string} A string representing the device_manufacturer.
   */
  matchDeviceManufacturerFromDeviceManufacturerName(deviceManufacturerName: string) {
    return this.pathTemplates.deviceManufacturerPathTemplate.match(deviceManufacturerName).device_manufacturer;
  }

  /**
   * Return a fully-qualified entitySignalsMapping resource name string.
   *
   * @param {string} network_code
   * @param {string} entity_signals_mapping
   * @returns {string} Resource name string.
   */
  entitySignalsMappingPath(networkCode:string,entitySignalsMapping:string) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.render({
      network_code: networkCode,
      entity_signals_mapping: entitySignalsMapping,
    });
  }

  /**
   * Parse the network_code from EntitySignalsMapping resource.
   *
   * @param {string} entitySignalsMappingName
   *   A fully-qualified path representing EntitySignalsMapping resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromEntitySignalsMappingName(entitySignalsMappingName: string) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.match(entitySignalsMappingName).network_code;
  }

  /**
   * Parse the entity_signals_mapping from EntitySignalsMapping resource.
   *
   * @param {string} entitySignalsMappingName
   *   A fully-qualified path representing EntitySignalsMapping resource.
   * @returns {string} A string representing the entity_signals_mapping.
   */
  matchEntitySignalsMappingFromEntitySignalsMappingName(entitySignalsMappingName: string) {
    return this.pathTemplates.entitySignalsMappingPathTemplate.match(entitySignalsMappingName).entity_signals_mapping;
  }

  /**
   * Return a fully-qualified geoTarget resource name string.
   *
   * @param {string} network_code
   * @param {string} geo_target
   * @returns {string} Resource name string.
   */
  geoTargetPath(networkCode:string,geoTarget:string) {
    return this.pathTemplates.geoTargetPathTemplate.render({
      network_code: networkCode,
      geo_target: geoTarget,
    });
  }

  /**
   * Parse the network_code from GeoTarget resource.
   *
   * @param {string} geoTargetName
   *   A fully-qualified path representing GeoTarget resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromGeoTargetName(geoTargetName: string) {
    return this.pathTemplates.geoTargetPathTemplate.match(geoTargetName).network_code;
  }

  /**
   * Parse the geo_target from GeoTarget resource.
   *
   * @param {string} geoTargetName
   *   A fully-qualified path representing GeoTarget resource.
   * @returns {string} A string representing the geo_target.
   */
  matchGeoTargetFromGeoTargetName(geoTargetName: string) {
    return this.pathTemplates.geoTargetPathTemplate.match(geoTargetName).geo_target;
  }

  /**
   * Return a fully-qualified label resource name string.
   *
   * @param {string} network_code
   * @param {string} label
   * @returns {string} Resource name string.
   */
  labelPath(networkCode:string,label:string) {
    return this.pathTemplates.labelPathTemplate.render({
      network_code: networkCode,
      label: label,
    });
  }

  /**
   * Parse the network_code from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).network_code;
  }

  /**
   * Parse the label from Label resource.
   *
   * @param {string} labelName
   *   A fully-qualified path representing Label resource.
   * @returns {string} A string representing the label.
   */
  matchLabelFromLabelName(labelName: string) {
    return this.pathTemplates.labelPathTemplate.match(labelName).label;
  }

  /**
   * Return a fully-qualified liveStreamEvent resource name string.
   *
   * @param {string} network_code
   * @param {string} live_stream_event
   * @returns {string} Resource name string.
   */
  liveStreamEventPath(networkCode:string,liveStreamEvent:string) {
    return this.pathTemplates.liveStreamEventPathTemplate.render({
      network_code: networkCode,
      live_stream_event: liveStreamEvent,
    });
  }

  /**
   * Parse the network_code from LiveStreamEvent resource.
   *
   * @param {string} liveStreamEventName
   *   A fully-qualified path representing LiveStreamEvent resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromLiveStreamEventName(liveStreamEventName: string) {
    return this.pathTemplates.liveStreamEventPathTemplate.match(liveStreamEventName).network_code;
  }

  /**
   * Parse the live_stream_event from LiveStreamEvent resource.
   *
   * @param {string} liveStreamEventName
   *   A fully-qualified path representing LiveStreamEvent resource.
   * @returns {string} A string representing the live_stream_event.
   */
  matchLiveStreamEventFromLiveStreamEventName(liveStreamEventName: string) {
    return this.pathTemplates.liveStreamEventPathTemplate.match(liveStreamEventName).live_stream_event;
  }

  /**
   * Return a fully-qualified mobileCarrier resource name string.
   *
   * @param {string} network_code
   * @param {string} mobile_carrier
   * @returns {string} Resource name string.
   */
  mobileCarrierPath(networkCode:string,mobileCarrier:string) {
    return this.pathTemplates.mobileCarrierPathTemplate.render({
      network_code: networkCode,
      mobile_carrier: mobileCarrier,
    });
  }

  /**
   * Parse the network_code from MobileCarrier resource.
   *
   * @param {string} mobileCarrierName
   *   A fully-qualified path representing MobileCarrier resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromMobileCarrierName(mobileCarrierName: string) {
    return this.pathTemplates.mobileCarrierPathTemplate.match(mobileCarrierName).network_code;
  }

  /**
   * Parse the mobile_carrier from MobileCarrier resource.
   *
   * @param {string} mobileCarrierName
   *   A fully-qualified path representing MobileCarrier resource.
   * @returns {string} A string representing the mobile_carrier.
   */
  matchMobileCarrierFromMobileCarrierName(mobileCarrierName: string) {
    return this.pathTemplates.mobileCarrierPathTemplate.match(mobileCarrierName).mobile_carrier;
  }

  /**
   * Return a fully-qualified mobileDevice resource name string.
   *
   * @param {string} network_code
   * @param {string} mobile_device
   * @returns {string} Resource name string.
   */
  mobileDevicePath(networkCode:string,mobileDevice:string) {
    return this.pathTemplates.mobileDevicePathTemplate.render({
      network_code: networkCode,
      mobile_device: mobileDevice,
    });
  }

  /**
   * Parse the network_code from MobileDevice resource.
   *
   * @param {string} mobileDeviceName
   *   A fully-qualified path representing MobileDevice resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromMobileDeviceName(mobileDeviceName: string) {
    return this.pathTemplates.mobileDevicePathTemplate.match(mobileDeviceName).network_code;
  }

  /**
   * Parse the mobile_device from MobileDevice resource.
   *
   * @param {string} mobileDeviceName
   *   A fully-qualified path representing MobileDevice resource.
   * @returns {string} A string representing the mobile_device.
   */
  matchMobileDeviceFromMobileDeviceName(mobileDeviceName: string) {
    return this.pathTemplates.mobileDevicePathTemplate.match(mobileDeviceName).mobile_device;
  }

  /**
   * Return a fully-qualified mobileDeviceSubmodel resource name string.
   *
   * @param {string} network_code
   * @param {string} mobile_device_submodel
   * @returns {string} Resource name string.
   */
  mobileDeviceSubmodelPath(networkCode:string,mobileDeviceSubmodel:string) {
    return this.pathTemplates.mobileDeviceSubmodelPathTemplate.render({
      network_code: networkCode,
      mobile_device_submodel: mobileDeviceSubmodel,
    });
  }

  /**
   * Parse the network_code from MobileDeviceSubmodel resource.
   *
   * @param {string} mobileDeviceSubmodelName
   *   A fully-qualified path representing MobileDeviceSubmodel resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromMobileDeviceSubmodelName(mobileDeviceSubmodelName: string) {
    return this.pathTemplates.mobileDeviceSubmodelPathTemplate.match(mobileDeviceSubmodelName).network_code;
  }

  /**
   * Parse the mobile_device_submodel from MobileDeviceSubmodel resource.
   *
   * @param {string} mobileDeviceSubmodelName
   *   A fully-qualified path representing MobileDeviceSubmodel resource.
   * @returns {string} A string representing the mobile_device_submodel.
   */
  matchMobileDeviceSubmodelFromMobileDeviceSubmodelName(mobileDeviceSubmodelName: string) {
    return this.pathTemplates.mobileDeviceSubmodelPathTemplate.match(mobileDeviceSubmodelName).mobile_device_submodel;
  }

  /**
   * Return a fully-qualified network resource name string.
   *
   * @param {string} network_code
   * @returns {string} Resource name string.
   */
  networkPath(networkCode:string) {
    return this.pathTemplates.networkPathTemplate.render({
      network_code: networkCode,
    });
  }

  /**
   * Parse the network_code from Network resource.
   *
   * @param {string} networkName
   *   A fully-qualified path representing Network resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromNetworkName(networkName: string) {
    return this.pathTemplates.networkPathTemplate.match(networkName).network_code;
  }

  /**
   * Return a fully-qualified operatingSystem resource name string.
   *
   * @param {string} network_code
   * @param {string} operating_system
   * @returns {string} Resource name string.
   */
  operatingSystemPath(networkCode:string,operatingSystem:string) {
    return this.pathTemplates.operatingSystemPathTemplate.render({
      network_code: networkCode,
      operating_system: operatingSystem,
    });
  }

  /**
   * Parse the network_code from OperatingSystem resource.
   *
   * @param {string} operatingSystemName
   *   A fully-qualified path representing OperatingSystem resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromOperatingSystemName(operatingSystemName: string) {
    return this.pathTemplates.operatingSystemPathTemplate.match(operatingSystemName).network_code;
  }

  /**
   * Parse the operating_system from OperatingSystem resource.
   *
   * @param {string} operatingSystemName
   *   A fully-qualified path representing OperatingSystem resource.
   * @returns {string} A string representing the operating_system.
   */
  matchOperatingSystemFromOperatingSystemName(operatingSystemName: string) {
    return this.pathTemplates.operatingSystemPathTemplate.match(operatingSystemName).operating_system;
  }

  /**
   * Return a fully-qualified operatingSystemVersion resource name string.
   *
   * @param {string} network_code
   * @param {string} operating_system_version
   * @returns {string} Resource name string.
   */
  operatingSystemVersionPath(networkCode:string,operatingSystemVersion:string) {
    return this.pathTemplates.operatingSystemVersionPathTemplate.render({
      network_code: networkCode,
      operating_system_version: operatingSystemVersion,
    });
  }

  /**
   * Parse the network_code from OperatingSystemVersion resource.
   *
   * @param {string} operatingSystemVersionName
   *   A fully-qualified path representing OperatingSystemVersion resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromOperatingSystemVersionName(operatingSystemVersionName: string) {
    return this.pathTemplates.operatingSystemVersionPathTemplate.match(operatingSystemVersionName).network_code;
  }

  /**
   * Parse the operating_system_version from OperatingSystemVersion resource.
   *
   * @param {string} operatingSystemVersionName
   *   A fully-qualified path representing OperatingSystemVersion resource.
   * @returns {string} A string representing the operating_system_version.
   */
  matchOperatingSystemVersionFromOperatingSystemVersionName(operatingSystemVersionName: string) {
    return this.pathTemplates.operatingSystemVersionPathTemplate.match(operatingSystemVersionName).operating_system_version;
  }

  /**
   * Return a fully-qualified order resource name string.
   *
   * @param {string} network_code
   * @param {string} order
   * @returns {string} Resource name string.
   */
  orderPath(networkCode:string,order:string) {
    return this.pathTemplates.orderPathTemplate.render({
      network_code: networkCode,
      order: order,
    });
  }

  /**
   * Parse the network_code from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).network_code;
  }

  /**
   * Parse the order from Order resource.
   *
   * @param {string} orderName
   *   A fully-qualified path representing Order resource.
   * @returns {string} A string representing the order.
   */
  matchOrderFromOrderName(orderName: string) {
    return this.pathTemplates.orderPathTemplate.match(orderName).order;
  }

  /**
   * Return a fully-qualified placement resource name string.
   *
   * @param {string} network_code
   * @param {string} placement
   * @returns {string} Resource name string.
   */
  placementPath(networkCode:string,placement:string) {
    return this.pathTemplates.placementPathTemplate.render({
      network_code: networkCode,
      placement: placement,
    });
  }

  /**
   * Parse the network_code from Placement resource.
   *
   * @param {string} placementName
   *   A fully-qualified path representing Placement resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromPlacementName(placementName: string) {
    return this.pathTemplates.placementPathTemplate.match(placementName).network_code;
  }

  /**
   * Parse the placement from Placement resource.
   *
   * @param {string} placementName
   *   A fully-qualified path representing Placement resource.
   * @returns {string} A string representing the placement.
   */
  matchPlacementFromPlacementName(placementName: string) {
    return this.pathTemplates.placementPathTemplate.match(placementName).placement;
  }

  /**
   * Return a fully-qualified privateAuction resource name string.
   *
   * @param {string} network_code
   * @param {string} private_auction
   * @returns {string} Resource name string.
   */
  privateAuctionPath(networkCode:string,privateAuction:string) {
    return this.pathTemplates.privateAuctionPathTemplate.render({
      network_code: networkCode,
      private_auction: privateAuction,
    });
  }

  /**
   * Parse the network_code from PrivateAuction resource.
   *
   * @param {string} privateAuctionName
   *   A fully-qualified path representing PrivateAuction resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromPrivateAuctionName(privateAuctionName: string) {
    return this.pathTemplates.privateAuctionPathTemplate.match(privateAuctionName).network_code;
  }

  /**
   * Parse the private_auction from PrivateAuction resource.
   *
   * @param {string} privateAuctionName
   *   A fully-qualified path representing PrivateAuction resource.
   * @returns {string} A string representing the private_auction.
   */
  matchPrivateAuctionFromPrivateAuctionName(privateAuctionName: string) {
    return this.pathTemplates.privateAuctionPathTemplate.match(privateAuctionName).private_auction;
  }

  /**
   * Return a fully-qualified privateAuctionDeal resource name string.
   *
   * @param {string} network_code
   * @param {string} private_auction_deal
   * @returns {string} Resource name string.
   */
  privateAuctionDealPath(networkCode:string,privateAuctionDeal:string) {
    return this.pathTemplates.privateAuctionDealPathTemplate.render({
      network_code: networkCode,
      private_auction_deal: privateAuctionDeal,
    });
  }

  /**
   * Parse the network_code from PrivateAuctionDeal resource.
   *
   * @param {string} privateAuctionDealName
   *   A fully-qualified path representing PrivateAuctionDeal resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromPrivateAuctionDealName(privateAuctionDealName: string) {
    return this.pathTemplates.privateAuctionDealPathTemplate.match(privateAuctionDealName).network_code;
  }

  /**
   * Parse the private_auction_deal from PrivateAuctionDeal resource.
   *
   * @param {string} privateAuctionDealName
   *   A fully-qualified path representing PrivateAuctionDeal resource.
   * @returns {string} A string representing the private_auction_deal.
   */
  matchPrivateAuctionDealFromPrivateAuctionDealName(privateAuctionDealName: string) {
    return this.pathTemplates.privateAuctionDealPathTemplate.match(privateAuctionDealName).private_auction_deal;
  }

  /**
   * Return a fully-qualified programmaticBuyer resource name string.
   *
   * @param {string} network_code
   * @param {string} programmatic_buyer
   * @returns {string} Resource name string.
   */
  programmaticBuyerPath(networkCode:string,programmaticBuyer:string) {
    return this.pathTemplates.programmaticBuyerPathTemplate.render({
      network_code: networkCode,
      programmatic_buyer: programmaticBuyer,
    });
  }

  /**
   * Parse the network_code from ProgrammaticBuyer resource.
   *
   * @param {string} programmaticBuyerName
   *   A fully-qualified path representing ProgrammaticBuyer resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromProgrammaticBuyerName(programmaticBuyerName: string) {
    return this.pathTemplates.programmaticBuyerPathTemplate.match(programmaticBuyerName).network_code;
  }

  /**
   * Parse the programmatic_buyer from ProgrammaticBuyer resource.
   *
   * @param {string} programmaticBuyerName
   *   A fully-qualified path representing ProgrammaticBuyer resource.
   * @returns {string} A string representing the programmatic_buyer.
   */
  matchProgrammaticBuyerFromProgrammaticBuyerName(programmaticBuyerName: string) {
    return this.pathTemplates.programmaticBuyerPathTemplate.match(programmaticBuyerName).programmatic_buyer;
  }

  /**
   * Return a fully-qualified report resource name string.
   *
   * @param {string} network_code
   * @param {string} report
   * @returns {string} Resource name string.
   */
  reportPath(networkCode:string,report:string) {
    return this.pathTemplates.reportPathTemplate.render({
      network_code: networkCode,
      report: report,
    });
  }

  /**
   * Parse the network_code from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).network_code;
  }

  /**
   * Parse the report from Report resource.
   *
   * @param {string} reportName
   *   A fully-qualified path representing Report resource.
   * @returns {string} A string representing the report.
   */
  matchReportFromReportName(reportName: string) {
    return this.pathTemplates.reportPathTemplate.match(reportName).report;
  }

  /**
   * Return a fully-qualified role resource name string.
   *
   * @param {string} network_code
   * @param {string} role
   * @returns {string} Resource name string.
   */
  rolePath(networkCode:string,role:string) {
    return this.pathTemplates.rolePathTemplate.render({
      network_code: networkCode,
      role: role,
    });
  }

  /**
   * Parse the network_code from Role resource.
   *
   * @param {string} roleName
   *   A fully-qualified path representing Role resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromRoleName(roleName: string) {
    return this.pathTemplates.rolePathTemplate.match(roleName).network_code;
  }

  /**
   * Parse the role from Role resource.
   *
   * @param {string} roleName
   *   A fully-qualified path representing Role resource.
   * @returns {string} A string representing the role.
   */
  matchRoleFromRoleName(roleName: string) {
    return this.pathTemplates.rolePathTemplate.match(roleName).role;
  }

  /**
   * Return a fully-qualified site resource name string.
   *
   * @param {string} network_code
   * @param {string} site
   * @returns {string} Resource name string.
   */
  sitePath(networkCode:string,site:string) {
    return this.pathTemplates.sitePathTemplate.render({
      network_code: networkCode,
      site: site,
    });
  }

  /**
   * Parse the network_code from Site resource.
   *
   * @param {string} siteName
   *   A fully-qualified path representing Site resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromSiteName(siteName: string) {
    return this.pathTemplates.sitePathTemplate.match(siteName).network_code;
  }

  /**
   * Parse the site from Site resource.
   *
   * @param {string} siteName
   *   A fully-qualified path representing Site resource.
   * @returns {string} A string representing the site.
   */
  matchSiteFromSiteName(siteName: string) {
    return this.pathTemplates.sitePathTemplate.match(siteName).site;
  }

  /**
   * Return a fully-qualified taxonomyCategory resource name string.
   *
   * @param {string} network_code
   * @param {string} taxonomy_category
   * @returns {string} Resource name string.
   */
  taxonomyCategoryPath(networkCode:string,taxonomyCategory:string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.render({
      network_code: networkCode,
      taxonomy_category: taxonomyCategory,
    });
  }

  /**
   * Parse the network_code from TaxonomyCategory resource.
   *
   * @param {string} taxonomyCategoryName
   *   A fully-qualified path representing TaxonomyCategory resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromTaxonomyCategoryName(taxonomyCategoryName: string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.match(taxonomyCategoryName).network_code;
  }

  /**
   * Parse the taxonomy_category from TaxonomyCategory resource.
   *
   * @param {string} taxonomyCategoryName
   *   A fully-qualified path representing TaxonomyCategory resource.
   * @returns {string} A string representing the taxonomy_category.
   */
  matchTaxonomyCategoryFromTaxonomyCategoryName(taxonomyCategoryName: string) {
    return this.pathTemplates.taxonomyCategoryPathTemplate.match(taxonomyCategoryName).taxonomy_category;
  }

  /**
   * Return a fully-qualified team resource name string.
   *
   * @param {string} network_code
   * @param {string} team
   * @returns {string} Resource name string.
   */
  teamPath(networkCode:string,team:string) {
    return this.pathTemplates.teamPathTemplate.render({
      network_code: networkCode,
      team: team,
    });
  }

  /**
   * Parse the network_code from Team resource.
   *
   * @param {string} teamName
   *   A fully-qualified path representing Team resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromTeamName(teamName: string) {
    return this.pathTemplates.teamPathTemplate.match(teamName).network_code;
  }

  /**
   * Parse the team from Team resource.
   *
   * @param {string} teamName
   *   A fully-qualified path representing Team resource.
   * @returns {string} A string representing the team.
   */
  matchTeamFromTeamName(teamName: string) {
    return this.pathTemplates.teamPathTemplate.match(teamName).team;
  }

  /**
   * Return a fully-qualified user resource name string.
   *
   * @param {string} network_code
   * @param {string} user
   * @returns {string} Resource name string.
   */
  userPath(networkCode:string,user:string) {
    return this.pathTemplates.userPathTemplate.render({
      network_code: networkCode,
      user: user,
    });
  }

  /**
   * Parse the network_code from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).network_code;
  }

  /**
   * Parse the user from User resource.
   *
   * @param {string} userName
   *   A fully-qualified path representing User resource.
   * @returns {string} A string representing the user.
   */
  matchUserFromUserName(userName: string) {
    return this.pathTemplates.userPathTemplate.match(userName).user;
  }

  /**
   * Return a fully-qualified webProperty resource name string.
   *
   * @param {string} network_code
   * @param {string} web_property
   * @returns {string} Resource name string.
   */
  webPropertyPath(networkCode:string,webProperty:string) {
    return this.pathTemplates.webPropertyPathTemplate.render({
      network_code: networkCode,
      web_property: webProperty,
    });
  }

  /**
   * Parse the network_code from WebProperty resource.
   *
   * @param {string} webPropertyName
   *   A fully-qualified path representing WebProperty resource.
   * @returns {string} A string representing the network_code.
   */
  matchNetworkCodeFromWebPropertyName(webPropertyName: string) {
    return this.pathTemplates.webPropertyPathTemplate.match(webPropertyName).network_code;
  }

  /**
   * Parse the web_property from WebProperty resource.
   *
   * @param {string} webPropertyName
   *   A fully-qualified path representing WebProperty resource.
   * @returns {string} A string representing the web_property.
   */
  matchWebPropertyFromWebPropertyName(webPropertyName: string) {
    return this.pathTemplates.webPropertyPathTemplate.match(webPropertyName).web_property;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.deviceCategoryServiceStub && !this._terminated) {
      return this.deviceCategoryServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}