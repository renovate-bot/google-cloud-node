// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START cloudlocationfinder_v1_generated_CloudLocationFinder_ListCloudLocations_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The parent, which owns this collection of cloud locations.
   *  Format: projects/{project}/locations/{location}
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of cloud locations to return per page. The
   *  service might return fewer cloud locations than this value. If unspecified,
   *  server will pick an appropriate default.
   */
  // const pageSize = 1234
  /**
   *  Optional. A token identifying a page of results the server should return.
   *  Provide page token returned by a previous 'ListCloudLocations' call to
   *  retrieve the next page of results. When paginating, all other parameters
   *  provided to 'ListCloudLocations' must match the call that provided the page
   *  token.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. A filter expression that filters resources listed in the
   *  response. The expression is in the form of field=value. For example,
   *  'cloud_location_type=CLOUD_LOCATION_TYPE_REGION'. Multiple filter queries
   *  are space-separated. For example,
   *  'cloud_location_type=CLOUD_LOCATION_TYPE_REGION territory_code="US"' By
   *  default, each expression is an AND expression. However, you can include AND
   *  and OR expressions explicitly.
   */
  // const filter = 'abc123'

  // Imports the Locationfinder library
  const {CloudLocationFinderClient} = require('@google-cloud/locationfinder').v1;

  // Instantiates a client
  const locationfinderClient = new CloudLocationFinderClient();

  async function callListCloudLocations() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = locationfinderClient.listCloudLocationsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListCloudLocations();
  // [END cloudlocationfinder_v1_generated_CloudLocationFinder_ListCloudLocations_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
