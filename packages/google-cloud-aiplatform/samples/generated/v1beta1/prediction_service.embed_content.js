// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main() {
  // [START aiplatform_v1beta1_generated_PredictionService_EmbedContent_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the publisher model requested to serve the
   *  prediction. Format:
   *  `projects/{project}/locations/{location}/publishers/* /models/*`
   */
  // const model = 'abc123'
  /**
   *  Required. Input content to be embedded. Required.
   */
  // const content = {}
  /**
   *  Optional. An optional title for the text.
   */
  // const title = 'abc123'
  /**
   *  Optional. The task type of the embedding.
   */
  // const taskType = {}
  /**
   *  Optional. Optional reduced dimension for the output embedding. If set,
   *  excessive values in the output embedding are truncated from the end.
   */
  // const outputDimensionality = 1234
  /**
   *  Optional. Whether to silently truncate the input content if it's longer
   *  than the maximum sequence length.
   */
  // const autoTruncate = true

  // Imports the Aiplatform library
  const {PredictionServiceClient} = require('@google-cloud/aiplatform').v1beta1;

  // Instantiates a client
  const aiplatformClient = new PredictionServiceClient();

  async function callEmbedContent() {
    // Construct request
    const request = {
    };

    // Run request
    const response = await aiplatformClient.embedContent(request);
    console.log(response);
  }

  callEmbedContent();
  // [END aiplatform_v1beta1_generated_PredictionService_EmbedContent_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
