// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(identityMappingStore) {
  // [START discoveryengine_v1_generated_IdentityMappingStoreService_PurgeIdentityMappings_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  The inline source to purge identity mapping entries from.
   */
  // const inlineSource = {}
  /**
   *  Required. The name of the Identity Mapping Store to purge Identity Mapping
   *  Entries from. Format:
   *  `projects/{project}/locations/{location}/identityMappingStores/{identityMappingStore}`
   */
  // const identityMappingStore = 'abc123'
  /**
   *  Filter matching identity mappings to purge.
   *  The eligible field for filtering is:
   *  * `update_time`: in ISO 8601 "zulu" format.
   *  * `external_id`
   *  Examples:
   *  * Deleting all identity mappings updated in a time range:
   *    `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
   *    "2012-04-23T18:30:43.511Z"`
   *  * Deleting all identity mappings for a given external_id:
   *  `external_id = "id1"`
   *  * Deleting all identity mappings inside an identity mapping store:
   *    `*`
   *  The filtering fields are assumed to have an implicit AND.
   *  Should not be used with source. An error will be thrown, if both are
   *  provided.
   */
  // const filter = 'abc123'
  /**
   *  Actually performs the purge. If `force` is set to false, return the
   *  expected purge count without deleting any identity mappings. This field is
   *  only supported for purge with filter. For input source this field is
   *  ignored and data will be purged regardless of the value of this field.
   */
  // const force = true

  // Imports the Discoveryengine library
  const {IdentityMappingStoreServiceClient} = require('@google-cloud/discoveryengine').v1;

  // Instantiates a client
  const discoveryengineClient = new IdentityMappingStoreServiceClient();

  async function callPurgeIdentityMappings() {
    // Construct request
    const request = {
      identityMappingStore,
    };

    // Run request
    const [operation] = await discoveryengineClient.purgeIdentityMappings(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callPurgeIdentityMappings();
  // [END discoveryengine_v1_generated_IdentityMappingStoreService_PurgeIdentityMappings_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
