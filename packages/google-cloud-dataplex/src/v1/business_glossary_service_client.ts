// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/business_glossary_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './business_glossary_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  BusinessGlossaryService provides APIs for managing business glossary
 *  resources for enterprise customers.
 *  The resources currently supported in Business Glossary are:
 *  1. Glossary
 *  2. GlossaryCategory
 *  3. GlossaryTerm
 * @class
 * @memberof v1
 */
export class BusinessGlossaryServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('dataplex');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  businessGlossaryServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of BusinessGlossaryServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new BusinessGlossaryServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof BusinessGlossaryServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'dataplex.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      aspectTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/aspectTypes/{aspect_type}'
      ),
      assetPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}'
      ),
      contentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/content/{content}'
      ),
      dataAttributePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}'
      ),
      dataAttributeBindingPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}'
      ),
      dataScanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}'
      ),
      dataScanJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataScans/{dataScan}/jobs/{job}'
      ),
      dataTaxonomyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataTaxonomies/{data_taxonomy_id}'
      ),
      encryptionConfigPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/encryptionConfigs/{encryption_config}'
      ),
      entityPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}'
      ),
      entryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entries/{entry}'
      ),
      entryGroupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}'
      ),
      entryLinkPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryGroups/{entry_group}/entryLinks/{entry_link}'
      ),
      entryTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entryTypes/{entry_type}'
      ),
      environmentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}'
      ),
      glossaryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/glossaries/{glossary}'
      ),
      glossaryCategoryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/glossaries/{glossary}/categories/{glossary_category}'
      ),
      glossaryTermPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/glossaries/{glossary}/terms/{glossary_term}'
      ),
      jobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}/jobs/{job}'
      ),
      lakePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      metadataJobPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/metadataJobs/{metadataJob}'
      ),
      partitionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity}/partitions/{partition}'
      ),
      projectLocationLakeActionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/actions/{action}'
      ),
      projectLocationLakeZoneActionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action}'
      ),
      projectLocationLakeZoneAssetActionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}'
      ),
      sessionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/environments/{environment}/sessions/{session}'
      ),
      taskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/tasks/{task}'
      ),
      zonePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listGlossaries:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries'),
      listGlossaryCategories:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'categories'),
      listGlossaryTerms:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'terms')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1/{resource=projects/*/locations/*/lakes/*}:getIamPolicy',additional_bindings: [{get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/dataScans/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/entryTypes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/entryLinkTypes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/entryGroups/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/governanceRules/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/glossaries/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/glossaries/*/categories/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/glossaries/*/terms/*}:getIamPolicy',},{get: '/v1/{resource=organizations/*/locations/*/encryptionConfigs/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/*/lakes/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataScans/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryLinkTypes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/governanceRules/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*/categories/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*/terms/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=organizations/*/locations/*/encryptionConfigs/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataProducts/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataProducts/*/dataAssets/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/*/lakes/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/zones/*/assets/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/tasks/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/lakes/*/environments/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataScans/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataTaxonomies/*/attributes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataAttributeBindings/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryTypes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryLinkTypes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/aspectTypes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/entryGroups/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/governanceRules/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*/categories/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/glossaries/*/terms/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=organizations/*/locations/*/encryptionConfigs/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataProducts/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/dataProducts/*/dataAssets/*}:testIamPermissions',body: '*',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',additional_bindings: [{post: '/v1/{name=organizations/*/locations/*/operations/*}:cancel',body: '*',}],
      },{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',additional_bindings: [{delete: '/v1/{name=organizations/*/locations/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',additional_bindings: [{get: '/v1/{name=organizations/*/locations/*/operations/*}',}],
      },{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',additional_bindings: [{get: '/v1/{name=organizations/*/locations/*}/operations',}],
      }];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createGlossaryResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.Glossary') as gax.protobuf.Type;
    const createGlossaryMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata') as gax.protobuf.Type;
    const updateGlossaryResponse = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.Glossary') as gax.protobuf.Type;
    const updateGlossaryMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteGlossaryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteGlossaryMetadata = protoFilesRoot.lookup(
      '.google.cloud.dataplex.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createGlossary: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createGlossaryResponse.decode.bind(createGlossaryResponse),
        createGlossaryMetadata.decode.bind(createGlossaryMetadata)),
      updateGlossary: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateGlossaryResponse.decode.bind(updateGlossaryResponse),
        updateGlossaryMetadata.decode.bind(updateGlossaryMetadata)),
      deleteGlossary: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteGlossaryResponse.decode.bind(deleteGlossaryResponse),
        deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.dataplex.v1.BusinessGlossaryService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.businessGlossaryServiceStub) {
      return this.businessGlossaryServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.dataplex.v1.BusinessGlossaryService.
    this.businessGlossaryServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.dataplex.v1.BusinessGlossaryService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.dataplex.v1.BusinessGlossaryService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const businessGlossaryServiceStubMethods =
        ['createGlossary', 'updateGlossary', 'deleteGlossary', 'getGlossary', 'listGlossaries', 'createGlossaryCategory', 'updateGlossaryCategory', 'deleteGlossaryCategory', 'getGlossaryCategory', 'listGlossaryCategories', 'createGlossaryTerm', 'updateGlossaryTerm', 'deleteGlossaryTerm', 'getGlossaryTerm', 'listGlossaryTerms'];
    for (const methodName of businessGlossaryServiceStubMethods) {
      const callPromise = this.businessGlossaryServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.businessGlossaryServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'dataplex.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'dataplex.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets a Glossary resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Glossary to retrieve.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.Glossary|Glossary}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.get_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_GetGlossary_async
 */
  getGlossary(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossary,
        protos.google.cloud.dataplex.v1.IGetGlossaryRequest|undefined, {}|undefined
      ]>;
  getGlossary(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossary,
          protos.google.cloud.dataplex.v1.IGetGlossaryRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossary(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossary,
          protos.google.cloud.dataplex.v1.IGetGlossaryRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossary(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossary,
          protos.google.cloud.dataplex.v1.IGetGlossaryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossary,
          protos.google.cloud.dataplex.v1.IGetGlossaryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossary,
        protos.google.cloud.dataplex.v1.IGetGlossaryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getGlossary request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossary,
        protos.google.cloud.dataplex.v1.IGetGlossaryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getGlossary response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getGlossary(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossary,
        protos.google.cloud.dataplex.v1.IGetGlossaryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getGlossary response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a new GlossaryCategory resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this GlossaryCategory will be created.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   where `locationId` refers to a Google Cloud region.
 * @param {string} request.categoryId
 *   Required. GlossaryCategory identifier.
 * @param {google.cloud.dataplex.v1.GlossaryCategory} request.category
 *   Required. The GlossaryCategory to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.create_glossary_category.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_CreateGlossaryCategory_async
 */
  createGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|undefined, {}|undefined
      ]>;
  createGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  createGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  createGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createGlossaryCategory request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createGlossaryCategory response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createGlossaryCategory(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.ICreateGlossaryCategoryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createGlossaryCategory response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a GlossaryCategory resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.dataplex.v1.GlossaryCategory} request.category
 *   Required. The GlossaryCategory to update.
 *   The GlossaryCategory's `name` field is used to identify the
 *   GlossaryCategory to update. Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.update_glossary_category.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_UpdateGlossaryCategory_async
 */
  updateGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|undefined, {}|undefined
      ]>;
  updateGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  updateGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  updateGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'category.name': request.category!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateGlossaryCategory request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateGlossaryCategory response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateGlossaryCategory(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryCategoryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateGlossaryCategory response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a GlossaryCategory resource. All the GlossaryCategories and
 * GlossaryTerms nested directly under the specified GlossaryCategory will be
 * moved one level up to the parent in the hierarchy.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the GlossaryCategory to delete.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.delete_glossary_category.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_DeleteGlossaryCategory_async
 */
  deleteGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|undefined, {}|undefined
      ]>;
  deleteGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteGlossaryCategory request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteGlossaryCategory response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteGlossaryCategory(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryCategoryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteGlossaryCategory response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a GlossaryCategory resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the GlossaryCategory to retrieve.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.get_glossary_category.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_GetGlossaryCategory_async
 */
  getGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|undefined, {}|undefined
      ]>;
  getGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossaryCategory(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossaryCategory(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryCategory,
          protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getGlossaryCategory request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getGlossaryCategory response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getGlossaryCategory(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryCategory,
        protos.google.cloud.dataplex.v1.IGetGlossaryCategoryRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getGlossaryCategory response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a new GlossaryTerm resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where the GlossaryTerm will be created.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {string} request.termId
 *   Required. GlossaryTerm identifier.
 * @param {google.cloud.dataplex.v1.GlossaryTerm} request.term
 *   Required. The GlossaryTerm to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.create_glossary_term.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_CreateGlossaryTerm_async
 */
  createGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|undefined, {}|undefined
      ]>;
  createGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  createGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  createGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createGlossaryTerm request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createGlossaryTerm response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createGlossaryTerm(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.ICreateGlossaryTermRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createGlossaryTerm response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a GlossaryTerm resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.dataplex.v1.GlossaryTerm} request.term
 *   Required. The GlossaryTerm to update.
 *   The GlossaryTerm's `name` field is used to identify the GlossaryTerm to
 *   update. Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/terms/{term_id}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.update_glossary_term.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_UpdateGlossaryTerm_async
 */
  updateGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|undefined, {}|undefined
      ]>;
  updateGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  updateGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  updateGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'term.name': request.term!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateGlossaryTerm request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateGlossaryTerm response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateGlossaryTerm(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IUpdateGlossaryTermRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateGlossaryTerm response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a GlossaryTerm resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the GlossaryTerm to delete.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/terms/{term_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.delete_glossary_term.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_DeleteGlossaryTerm_async
 */
  deleteGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|undefined, {}|undefined
      ]>;
  deleteGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteGlossaryTerm request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteGlossaryTerm response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteGlossaryTerm(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.dataplex.v1.IDeleteGlossaryTermRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteGlossaryTerm response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets a GlossaryTerm resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the GlossaryTerm to retrieve.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/terms/{term_id}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.get_glossary_term.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_GetGlossaryTerm_async
 */
  getGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|undefined, {}|undefined
      ]>;
  getGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossaryTerm(
      request: protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest,
      callback: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|null|undefined,
          {}|null|undefined>): void;
  getGlossaryTerm(
      request?: protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.dataplex.v1.IGlossaryTerm,
          protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getGlossaryTerm request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getGlossaryTerm response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getGlossaryTerm(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.dataplex.v1.IGlossaryTerm,
        protos.google.cloud.dataplex.v1.IGetGlossaryTermRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getGlossaryTerm response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Creates a new Glossary resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource where this Glossary will be created.
 *   Format: projects/{project_id_or_number}/locations/{location_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {string} request.glossaryId
 *   Required. Glossary ID: Glossary identifier.
 * @param {google.cloud.dataplex.v1.Glossary} request.glossary
 *   Required. The Glossary to create.
 * @param {boolean} [request.validateOnly]
 *   Optional. Validates the request without actually creating the Glossary.
 *   Default: false.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.create_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_CreateGlossary_async
 */
  createGlossary(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createGlossary(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createGlossary(
      request: protos.google.cloud.dataplex.v1.ICreateGlossaryRequest,
      callback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createGlossary(
      request?: protos.google.cloud.dataplex.v1.ICreateGlossaryRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createGlossary response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createGlossary request %j', request);
    return this.innerApiCalls.createGlossary(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createGlossary response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createGlossary()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.create_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_CreateGlossary_async
 */
  async checkCreateGlossaryProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Glossary, protos.google.cloud.dataplex.v1.OperationMetadata>>{
    this._log.info('createGlossary long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createGlossary, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.dataplex.v1.Glossary, protos.google.cloud.dataplex.v1.OperationMetadata>;
  }
/**
 * Updates a Glossary resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.cloud.dataplex.v1.Glossary} request.glossary
 *   Required. The Glossary to update.
 *   The Glossary's `name` field is used to identify the Glossary to update.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to update.
 * @param {boolean} [request.validateOnly]
 *   Optional. Validates the request without actually updating the Glossary.
 *   Default: false.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.update_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_UpdateGlossary_async
 */
  updateGlossary(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateGlossary(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateGlossary(
      request: protos.google.cloud.dataplex.v1.IUpdateGlossaryRequest,
      callback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateGlossary(
      request?: protos.google.cloud.dataplex.v1.IUpdateGlossaryRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'glossary.name': request.glossary!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateGlossary response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateGlossary request %j', request);
    return this.innerApiCalls.updateGlossary(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.dataplex.v1.IGlossary, protos.google.cloud.dataplex.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateGlossary response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateGlossary()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.update_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_UpdateGlossary_async
 */
  async checkUpdateGlossaryProgress(name: string): Promise<LROperation<protos.google.cloud.dataplex.v1.Glossary, protos.google.cloud.dataplex.v1.OperationMetadata>>{
    this._log.info('updateGlossary long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateGlossary, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.dataplex.v1.Glossary, protos.google.cloud.dataplex.v1.OperationMetadata>;
  }
/**
 * Deletes a Glossary resource. All the categories and terms within the
 * Glossary must be deleted before the Glossary can be deleted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Glossary to delete.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 * @param {string} [request.etag]
 *   Optional. The etag of the Glossary.
 *   If this is provided, it must match the server's etag.
 *   If the etag is provided and does not match the server-computed etag,
 *   the request must fail with a ABORTED error code.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.delete_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_DeleteGlossary_async
 */
  deleteGlossary(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteGlossary(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteGlossary(
      request: protos.google.cloud.dataplex.v1.IDeleteGlossaryRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteGlossary(
      request?: protos.google.cloud.dataplex.v1.IDeleteGlossaryRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteGlossary response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteGlossary request %j', request);
    return this.innerApiCalls.deleteGlossary(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.dataplex.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteGlossary response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteGlossary()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.delete_glossary.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_DeleteGlossary_async
 */
  async checkDeleteGlossaryProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>>{
    this._log.info('deleteGlossary long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteGlossary, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.dataplex.v1.OperationMetadata>;
  }
 /**
 * Lists Glossary resources in a project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of Glossaries.
 *   Format: projects/{project_id_or_number}/locations/{location_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Glossaries to return. The service may
 *   return fewer than this value. If unspecified, at most 50 Glossaries will be
 *   returned. The maximum value is 1000; values above 1000 will be coerced to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaries` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters Glossaries listed in the response.
 *   Filters on proto fields of Glossary are supported.
 *   Examples of using a filter are:
 *     - `display_name="my-glossary"`
 *     - `categoryCount=1`
 *     - `termCount=0`
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders Glossaries listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.Glossary|Glossary}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGlossariesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossaries(
      request?: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossary[],
        protos.google.cloud.dataplex.v1.IListGlossariesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossariesResponse
      ]>;
  listGlossaries(
      request: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossariesRequest,
          protos.google.cloud.dataplex.v1.IListGlossariesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossary>): void;
  listGlossaries(
      request: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossariesRequest,
          protos.google.cloud.dataplex.v1.IListGlossariesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossary>): void;
  listGlossaries(
      request?: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossariesRequest,
          protos.google.cloud.dataplex.v1.IListGlossariesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossary>,
      callback?: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossariesRequest,
          protos.google.cloud.dataplex.v1.IListGlossariesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossary>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossary[],
        protos.google.cloud.dataplex.v1.IListGlossariesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossariesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      protos.google.cloud.dataplex.v1.IListGlossariesResponse|null|undefined,
      protos.google.cloud.dataplex.v1.IGlossary>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listGlossaries values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listGlossaries request %j', request);
    return this.innerApiCalls
      .listGlossaries(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.dataplex.v1.IGlossary[],
        protos.google.cloud.dataplex.v1.IListGlossariesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossariesResponse
      ]) => {
        this._log.info('listGlossaries values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listGlossaries`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of Glossaries.
 *   Format: projects/{project_id_or_number}/locations/{location_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Glossaries to return. The service may
 *   return fewer than this value. If unspecified, at most 50 Glossaries will be
 *   returned. The maximum value is 1000; values above 1000 will be coerced to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaries` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters Glossaries listed in the response.
 *   Filters on proto fields of Glossary are supported.
 *   Examples of using a filter are:
 *     - `display_name="my-glossary"`
 *     - `categoryCount=1`
 *     - `termCount=0`
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders Glossaries listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.Glossary|Glossary} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGlossariesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossariesStream(
      request?: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaries stream %j', request);
    return this.descriptors.page.listGlossaries.createStream(
      this.innerApiCalls.listGlossaries as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGlossaries`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of Glossaries.
 *   Format: projects/{project_id_or_number}/locations/{location_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of Glossaries to return. The service may
 *   return fewer than this value. If unspecified, at most 50 Glossaries will be
 *   returned. The maximum value is 1000; values above 1000 will be coerced to
 *   1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaries` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters Glossaries listed in the response.
 *   Filters on proto fields of Glossary are supported.
 *   Examples of using a filter are:
 *     - `display_name="my-glossary"`
 *     - `categoryCount=1`
 *     - `termCount=0`
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders Glossaries listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.dataplex.v1.Glossary|Glossary}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.list_glossaries.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_ListGlossaries_async
 */
  listGlossariesAsync(
      request?: protos.google.cloud.dataplex.v1.IListGlossariesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.dataplex.v1.IGlossary>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaries iterate %j', request);
    return this.descriptors.page.listGlossaries.asyncIterate(
      this.innerApiCalls['listGlossaries'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IGlossary>;
  }
 /**
 * Lists GlossaryCategory resources in a Glossary.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryCategories.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   Location is the Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryCategories to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   GlossaryCategories will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryCategories`
 *   call. Provide this to retrieve the subsequent page. When paginating, all
 *   other parameters provided to `ListGlossaryCategories` must match the call
 *   that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryCategories listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryCategories that are directly nested
 *   under the specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryCategories listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGlossaryCategoriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossaryCategories(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory[],
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse
      ]>;
  listGlossaryCategories(
      request: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryCategory>): void;
  listGlossaryCategories(
      request: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryCategory>): void;
  listGlossaryCategories(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryCategory>,
      callback?: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryCategory>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryCategory[],
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse|null|undefined,
      protos.google.cloud.dataplex.v1.IGlossaryCategory>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listGlossaryCategories values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listGlossaryCategories request %j', request);
    return this.innerApiCalls
      .listGlossaryCategories(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.dataplex.v1.IGlossaryCategory[],
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryCategoriesResponse
      ]) => {
        this._log.info('listGlossaryCategories values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listGlossaryCategories`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryCategories.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   Location is the Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryCategories to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   GlossaryCategories will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryCategories`
 *   call. Provide this to retrieve the subsequent page. When paginating, all
 *   other parameters provided to `ListGlossaryCategories` must match the call
 *   that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryCategories listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryCategories that are directly nested
 *   under the specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryCategories listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGlossaryCategoriesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossaryCategoriesStream(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaryCategories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaryCategories stream %j', request);
    return this.descriptors.page.listGlossaryCategories.createStream(
      this.innerApiCalls.listGlossaryCategories as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGlossaryCategories`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryCategories.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   Location is the Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryCategories to return. The service
 *   may return fewer than this value. If unspecified, at most 50
 *   GlossaryCategories will be returned. The maximum value is 1000; values
 *   above 1000 will be coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryCategories`
 *   call. Provide this to retrieve the subsequent page. When paginating, all
 *   other parameters provided to `ListGlossaryCategories` must match the call
 *   that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryCategories listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryCategories that are directly nested
 *   under the specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryCategories listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.dataplex.v1.GlossaryCategory|GlossaryCategory}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.list_glossary_categories.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_ListGlossaryCategories_async
 */
  listGlossaryCategoriesAsync(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryCategoriesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.dataplex.v1.IGlossaryCategory>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaryCategories'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaryCategories iterate %j', request);
    return this.descriptors.page.listGlossaryCategories.asyncIterate(
      this.innerApiCalls['listGlossaryCategories'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IGlossaryCategory>;
  }
 /**
 * Lists GlossaryTerm resources in a Glossary.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryTerms.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryTerms to return. The service may
 *   return fewer than this value. If unspecified, at most 50 GlossaryTerms will
 *   be returned. The maximum value is 1000; values above 1000 will be coerced
 *   to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryTerms` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaryTerms` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryTerms listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryTerms that are directly nested under the
 *   specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryTerms listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGlossaryTermsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossaryTerms(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm[],
        protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse
      ]>;
  listGlossaryTerms(
      request: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryTerm>): void;
  listGlossaryTerms(
      request: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      callback: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryTerm>): void;
  listGlossaryTerms(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryTerm>,
      callback?: PaginationCallback<
          protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
          protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse|null|undefined,
          protos.google.cloud.dataplex.v1.IGlossaryTerm>):
      Promise<[
        protos.google.cloud.dataplex.v1.IGlossaryTerm[],
        protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse|null|undefined,
      protos.google.cloud.dataplex.v1.IGlossaryTerm>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listGlossaryTerms values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listGlossaryTerms request %j', request);
    return this.innerApiCalls
      .listGlossaryTerms(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.dataplex.v1.IGlossaryTerm[],
        protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest|null,
        protos.google.cloud.dataplex.v1.IListGlossaryTermsResponse
      ]) => {
        this._log.info('listGlossaryTerms values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listGlossaryTerms`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryTerms.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryTerms to return. The service may
 *   return fewer than this value. If unspecified, at most 50 GlossaryTerms will
 *   be returned. The maximum value is 1000; values above 1000 will be coerced
 *   to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryTerms` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaryTerms` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryTerms listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryTerms that are directly nested under the
 *   specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryTerms listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGlossaryTermsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listGlossaryTermsStream(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaryTerms'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaryTerms stream %j', request);
    return this.descriptors.page.listGlossaryTerms.createStream(
      this.innerApiCalls.listGlossaryTerms as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGlossaryTerms`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent, which has this collection of GlossaryTerms.
 *   Format:
 *   projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}
 *   where `location_id` refers to a Google Cloud region.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of GlossaryTerms to return. The service may
 *   return fewer than this value. If unspecified, at most 50 GlossaryTerms will
 *   be returned. The maximum value is 1000; values above 1000 will be coerced
 *   to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `ListGlossaryTerms` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListGlossaryTerms` must
 *   match the call that provided the page token.
 * @param {string} [request.filter]
 *   Optional. Filter expression that filters GlossaryTerms listed in the
 *   response. Filters are supported on the following fields:
 *     - immediate_parent
 *
 *   Examples of using a filter are:
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}"`
 *     -
 *     `immediate_parent="projects/{project_id_or_number}/locations/{location_id}/glossaries/{glossary_id}/categories/{category_id}"`
 *
 *   This will only return the GlossaryTerms that are directly nested under the
 *   specified parent.
 * @param {string} [request.orderBy]
 *   Optional. Order by expression that orders GlossaryTerms listed in the
 *   response. Order by fields are: `name` or `create_time` for the result. If
 *   not specified, the ordering is undefined.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.dataplex.v1.GlossaryTerm|GlossaryTerm}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/business_glossary_service.list_glossary_terms.js</caption>
 * region_tag:dataplex_v1_generated_BusinessGlossaryService_ListGlossaryTerms_async
 */
  listGlossaryTermsAsync(
      request?: protos.google.cloud.dataplex.v1.IListGlossaryTermsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.dataplex.v1.IGlossaryTerm>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listGlossaryTerms'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listGlossaryTerms iterate %j', request);
    return this.descriptors.page.listGlossaryTerms.asyncIterate(
      this.innerApiCalls['listGlossaryTerms'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.dataplex.v1.IGlossaryTerm>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified aspectType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aspect_type
   * @returns {string} Resource name string.
   */
  aspectTypePath(project:string,location:string,aspectType:string) {
    return this.pathTemplates.aspectTypePathTemplate.render({
      project: project,
      location: location,
      aspect_type: aspectType,
    });
  }

  /**
   * Parse the project from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName).project;
  }

  /**
   * Parse the location from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName).location;
  }

  /**
   * Parse the aspect_type from AspectType resource.
   *
   * @param {string} aspectTypeName
   *   A fully-qualified path representing AspectType resource.
   * @returns {string} A string representing the aspect_type.
   */
  matchAspectTypeFromAspectTypeName(aspectTypeName: string) {
    return this.pathTemplates.aspectTypePathTemplate.match(aspectTypeName).aspect_type;
  }

  /**
   * Return a fully-qualified asset resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @returns {string} Resource name string.
   */
  assetPath(project:string,location:string,lake:string,zone:string,asset:string) {
    return this.pathTemplates.assetPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      asset: asset,
    });
  }

  /**
   * Parse the project from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).project;
  }

  /**
   * Parse the location from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).location;
  }

  /**
   * Parse the lake from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).lake;
  }

  /**
   * Parse the zone from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).zone;
  }

  /**
   * Parse the asset from Asset resource.
   *
   * @param {string} assetName
   *   A fully-qualified path representing Asset resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromAssetName(assetName: string) {
    return this.pathTemplates.assetPathTemplate.match(assetName).asset;
  }

  /**
   * Return a fully-qualified content resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} content
   * @returns {string} Resource name string.
   */
  contentPath(project:string,location:string,lake:string,content:string) {
    return this.pathTemplates.contentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      content: content,
    });
  }

  /**
   * Parse the project from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).project;
  }

  /**
   * Parse the location from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).location;
  }

  /**
   * Parse the lake from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).lake;
  }

  /**
   * Parse the content from Content resource.
   *
   * @param {string} contentName
   *   A fully-qualified path representing Content resource.
   * @returns {string} A string representing the content.
   */
  matchContentFromContentName(contentName: string) {
    return this.pathTemplates.contentPathTemplate.match(contentName).content;
  }

  /**
   * Return a fully-qualified dataAttribute resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataTaxonomy
   * @param {string} data_attribute_id
   * @returns {string} Resource name string.
   */
  dataAttributePath(project:string,location:string,dataTaxonomy:string,dataAttributeId:string) {
    return this.pathTemplates.dataAttributePathTemplate.render({
      project: project,
      location: location,
      dataTaxonomy: dataTaxonomy,
      data_attribute_id: dataAttributeId,
    });
  }

  /**
   * Parse the project from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName).project;
  }

  /**
   * Parse the location from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName).location;
  }

  /**
   * Parse the dataTaxonomy from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the dataTaxonomy.
   */
  matchDataTaxonomyFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName).dataTaxonomy;
  }

  /**
   * Parse the data_attribute_id from DataAttribute resource.
   *
   * @param {string} dataAttributeName
   *   A fully-qualified path representing DataAttribute resource.
   * @returns {string} A string representing the data_attribute_id.
   */
  matchDataAttributeIdFromDataAttributeName(dataAttributeName: string) {
    return this.pathTemplates.dataAttributePathTemplate.match(dataAttributeName).data_attribute_id;
  }

  /**
   * Return a fully-qualified dataAttributeBinding resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_attribute_binding_id
   * @returns {string} Resource name string.
   */
  dataAttributeBindingPath(project:string,location:string,dataAttributeBindingId:string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.render({
      project: project,
      location: location,
      data_attribute_binding_id: dataAttributeBindingId,
    });
  }

  /**
   * Parse the project from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAttributeBindingName(dataAttributeBindingName: string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).project;
  }

  /**
   * Parse the location from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAttributeBindingName(dataAttributeBindingName: string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).location;
  }

  /**
   * Parse the data_attribute_binding_id from DataAttributeBinding resource.
   *
   * @param {string} dataAttributeBindingName
   *   A fully-qualified path representing DataAttributeBinding resource.
   * @returns {string} A string representing the data_attribute_binding_id.
   */
  matchDataAttributeBindingIdFromDataAttributeBindingName(dataAttributeBindingName: string) {
    return this.pathTemplates.dataAttributeBindingPathTemplate.match(dataAttributeBindingName).data_attribute_binding_id;
  }

  /**
   * Return a fully-qualified dataScan resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @returns {string} Resource name string.
   */
  dataScanPath(project:string,location:string,dataScan:string) {
    return this.pathTemplates.dataScanPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
    });
  }

  /**
   * Parse the project from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).project;
  }

  /**
   * Parse the location from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).location;
  }

  /**
   * Parse the dataScan from DataScan resource.
   *
   * @param {string} dataScanName
   *   A fully-qualified path representing DataScan resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanName(dataScanName: string) {
    return this.pathTemplates.dataScanPathTemplate.match(dataScanName).dataScan;
  }

  /**
   * Return a fully-qualified dataScanJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dataScan
   * @param {string} job
   * @returns {string} Resource name string.
   */
  dataScanJobPath(project:string,location:string,dataScan:string,job:string) {
    return this.pathTemplates.dataScanJobPathTemplate.render({
      project: project,
      location: location,
      dataScan: dataScan,
      job: job,
    });
  }

  /**
   * Parse the project from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName).project;
  }

  /**
   * Parse the location from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName).location;
  }

  /**
   * Parse the dataScan from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the dataScan.
   */
  matchDataScanFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName).dataScan;
  }

  /**
   * Parse the job from DataScanJob resource.
   *
   * @param {string} dataScanJobName
   *   A fully-qualified path representing DataScanJob resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromDataScanJobName(dataScanJobName: string) {
    return this.pathTemplates.dataScanJobPathTemplate.match(dataScanJobName).job;
  }

  /**
   * Return a fully-qualified dataTaxonomy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_taxonomy_id
   * @returns {string} Resource name string.
   */
  dataTaxonomyPath(project:string,location:string,dataTaxonomyId:string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.render({
      project: project,
      location: location,
      data_taxonomy_id: dataTaxonomyId,
    });
  }

  /**
   * Parse the project from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName).project;
  }

  /**
   * Parse the location from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName).location;
  }

  /**
   * Parse the data_taxonomy_id from DataTaxonomy resource.
   *
   * @param {string} dataTaxonomyName
   *   A fully-qualified path representing DataTaxonomy resource.
   * @returns {string} A string representing the data_taxonomy_id.
   */
  matchDataTaxonomyIdFromDataTaxonomyName(dataTaxonomyName: string) {
    return this.pathTemplates.dataTaxonomyPathTemplate.match(dataTaxonomyName).data_taxonomy_id;
  }

  /**
   * Return a fully-qualified encryptionConfig resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} encryption_config
   * @returns {string} Resource name string.
   */
  encryptionConfigPath(organization:string,location:string,encryptionConfig:string) {
    return this.pathTemplates.encryptionConfigPathTemplate.render({
      organization: organization,
      location: location,
      encryption_config: encryptionConfig,
    });
  }

  /**
   * Parse the organization from EncryptionConfig resource.
   *
   * @param {string} encryptionConfigName
   *   A fully-qualified path representing EncryptionConfig resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromEncryptionConfigName(encryptionConfigName: string) {
    return this.pathTemplates.encryptionConfigPathTemplate.match(encryptionConfigName).organization;
  }

  /**
   * Parse the location from EncryptionConfig resource.
   *
   * @param {string} encryptionConfigName
   *   A fully-qualified path representing EncryptionConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEncryptionConfigName(encryptionConfigName: string) {
    return this.pathTemplates.encryptionConfigPathTemplate.match(encryptionConfigName).location;
  }

  /**
   * Parse the encryption_config from EncryptionConfig resource.
   *
   * @param {string} encryptionConfigName
   *   A fully-qualified path representing EncryptionConfig resource.
   * @returns {string} A string representing the encryption_config.
   */
  matchEncryptionConfigFromEncryptionConfigName(encryptionConfigName: string) {
    return this.pathTemplates.encryptionConfigPathTemplate.match(encryptionConfigName).encryption_config;
  }

  /**
   * Return a fully-qualified entity resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @returns {string} Resource name string.
   */
  entityPath(project:string,location:string,lake:string,zone:string,entity:string) {
    return this.pathTemplates.entityPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
    });
  }

  /**
   * Parse the project from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).project;
  }

  /**
   * Parse the location from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).location;
  }

  /**
   * Parse the lake from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).lake;
  }

  /**
   * Parse the zone from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).zone;
  }

  /**
   * Parse the entity from Entity resource.
   *
   * @param {string} entityName
   *   A fully-qualified path representing Entity resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromEntityName(entityName: string) {
    return this.pathTemplates.entityPathTemplate.match(entityName).entity;
  }

  /**
   * Return a fully-qualified entry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry
   * @returns {string} Resource name string.
   */
  entryPath(project:string,location:string,entryGroup:string,entry:string) {
    return this.pathTemplates.entryPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
      entry: entry,
    });
  }

  /**
   * Parse the project from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).project;
  }

  /**
   * Parse the location from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).location;
  }

  /**
   * Parse the entry_group from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry_group;
  }

  /**
   * Parse the entry from Entry resource.
   *
   * @param {string} entryName
   *   A fully-qualified path representing Entry resource.
   * @returns {string} A string representing the entry.
   */
  matchEntryFromEntryName(entryName: string) {
    return this.pathTemplates.entryPathTemplate.match(entryName).entry;
  }

  /**
   * Return a fully-qualified entryGroup resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @returns {string} Resource name string.
   */
  entryGroupPath(project:string,location:string,entryGroup:string) {
    return this.pathTemplates.entryGroupPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
    });
  }

  /**
   * Parse the project from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName).project;
  }

  /**
   * Parse the location from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName).location;
  }

  /**
   * Parse the entry_group from EntryGroup resource.
   *
   * @param {string} entryGroupName
   *   A fully-qualified path representing EntryGroup resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryGroupName(entryGroupName: string) {
    return this.pathTemplates.entryGroupPathTemplate.match(entryGroupName).entry_group;
  }

  /**
   * Return a fully-qualified entryLink resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_group
   * @param {string} entry_link
   * @returns {string} Resource name string.
   */
  entryLinkPath(project:string,location:string,entryGroup:string,entryLink:string) {
    return this.pathTemplates.entryLinkPathTemplate.render({
      project: project,
      location: location,
      entry_group: entryGroup,
      entry_link: entryLink,
    });
  }

  /**
   * Parse the project from EntryLink resource.
   *
   * @param {string} entryLinkName
   *   A fully-qualified path representing EntryLink resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryLinkName(entryLinkName: string) {
    return this.pathTemplates.entryLinkPathTemplate.match(entryLinkName).project;
  }

  /**
   * Parse the location from EntryLink resource.
   *
   * @param {string} entryLinkName
   *   A fully-qualified path representing EntryLink resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryLinkName(entryLinkName: string) {
    return this.pathTemplates.entryLinkPathTemplate.match(entryLinkName).location;
  }

  /**
   * Parse the entry_group from EntryLink resource.
   *
   * @param {string} entryLinkName
   *   A fully-qualified path representing EntryLink resource.
   * @returns {string} A string representing the entry_group.
   */
  matchEntryGroupFromEntryLinkName(entryLinkName: string) {
    return this.pathTemplates.entryLinkPathTemplate.match(entryLinkName).entry_group;
  }

  /**
   * Parse the entry_link from EntryLink resource.
   *
   * @param {string} entryLinkName
   *   A fully-qualified path representing EntryLink resource.
   * @returns {string} A string representing the entry_link.
   */
  matchEntryLinkFromEntryLinkName(entryLinkName: string) {
    return this.pathTemplates.entryLinkPathTemplate.match(entryLinkName).entry_link;
  }

  /**
   * Return a fully-qualified entryType resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entry_type
   * @returns {string} Resource name string.
   */
  entryTypePath(project:string,location:string,entryType:string) {
    return this.pathTemplates.entryTypePathTemplate.render({
      project: project,
      location: location,
      entry_type: entryType,
    });
  }

  /**
   * Parse the project from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName).project;
  }

  /**
   * Parse the location from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName).location;
  }

  /**
   * Parse the entry_type from EntryType resource.
   *
   * @param {string} entryTypeName
   *   A fully-qualified path representing EntryType resource.
   * @returns {string} A string representing the entry_type.
   */
  matchEntryTypeFromEntryTypeName(entryTypeName: string) {
    return this.pathTemplates.entryTypePathTemplate.match(entryTypeName).entry_type;
  }

  /**
   * Return a fully-qualified environment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @returns {string} Resource name string.
   */
  environmentPath(project:string,location:string,lake:string,environment:string) {
    return this.pathTemplates.environmentPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
    });
  }

  /**
   * Parse the project from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName).project;
  }

  /**
   * Parse the location from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName).location;
  }

  /**
   * Parse the lake from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName).lake;
  }

  /**
   * Parse the environment from Environment resource.
   *
   * @param {string} environmentName
   *   A fully-qualified path representing Environment resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromEnvironmentName(environmentName: string) {
    return this.pathTemplates.environmentPathTemplate.match(environmentName).environment;
  }

  /**
   * Return a fully-qualified glossary resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} glossary
   * @returns {string} Resource name string.
   */
  glossaryPath(project:string,location:string,glossary:string) {
    return this.pathTemplates.glossaryPathTemplate.render({
      project: project,
      location: location,
      glossary: glossary,
    });
  }

  /**
   * Parse the project from Glossary resource.
   *
   * @param {string} glossaryName
   *   A fully-qualified path representing Glossary resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGlossaryName(glossaryName: string) {
    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;
  }

  /**
   * Parse the location from Glossary resource.
   *
   * @param {string} glossaryName
   *   A fully-qualified path representing Glossary resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGlossaryName(glossaryName: string) {
    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;
  }

  /**
   * Parse the glossary from Glossary resource.
   *
   * @param {string} glossaryName
   *   A fully-qualified path representing Glossary resource.
   * @returns {string} A string representing the glossary.
   */
  matchGlossaryFromGlossaryName(glossaryName: string) {
    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;
  }

  /**
   * Return a fully-qualified glossaryCategory resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} glossary
   * @param {string} glossary_category
   * @returns {string} Resource name string.
   */
  glossaryCategoryPath(project:string,location:string,glossary:string,glossaryCategory:string) {
    return this.pathTemplates.glossaryCategoryPathTemplate.render({
      project: project,
      location: location,
      glossary: glossary,
      glossary_category: glossaryCategory,
    });
  }

  /**
   * Parse the project from GlossaryCategory resource.
   *
   * @param {string} glossaryCategoryName
   *   A fully-qualified path representing GlossaryCategory resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGlossaryCategoryName(glossaryCategoryName: string) {
    return this.pathTemplates.glossaryCategoryPathTemplate.match(glossaryCategoryName).project;
  }

  /**
   * Parse the location from GlossaryCategory resource.
   *
   * @param {string} glossaryCategoryName
   *   A fully-qualified path representing GlossaryCategory resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGlossaryCategoryName(glossaryCategoryName: string) {
    return this.pathTemplates.glossaryCategoryPathTemplate.match(glossaryCategoryName).location;
  }

  /**
   * Parse the glossary from GlossaryCategory resource.
   *
   * @param {string} glossaryCategoryName
   *   A fully-qualified path representing GlossaryCategory resource.
   * @returns {string} A string representing the glossary.
   */
  matchGlossaryFromGlossaryCategoryName(glossaryCategoryName: string) {
    return this.pathTemplates.glossaryCategoryPathTemplate.match(glossaryCategoryName).glossary;
  }

  /**
   * Parse the glossary_category from GlossaryCategory resource.
   *
   * @param {string} glossaryCategoryName
   *   A fully-qualified path representing GlossaryCategory resource.
   * @returns {string} A string representing the glossary_category.
   */
  matchGlossaryCategoryFromGlossaryCategoryName(glossaryCategoryName: string) {
    return this.pathTemplates.glossaryCategoryPathTemplate.match(glossaryCategoryName).glossary_category;
  }

  /**
   * Return a fully-qualified glossaryTerm resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} glossary
   * @param {string} glossary_term
   * @returns {string} Resource name string.
   */
  glossaryTermPath(project:string,location:string,glossary:string,glossaryTerm:string) {
    return this.pathTemplates.glossaryTermPathTemplate.render({
      project: project,
      location: location,
      glossary: glossary,
      glossary_term: glossaryTerm,
    });
  }

  /**
   * Parse the project from GlossaryTerm resource.
   *
   * @param {string} glossaryTermName
   *   A fully-qualified path representing GlossaryTerm resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGlossaryTermName(glossaryTermName: string) {
    return this.pathTemplates.glossaryTermPathTemplate.match(glossaryTermName).project;
  }

  /**
   * Parse the location from GlossaryTerm resource.
   *
   * @param {string} glossaryTermName
   *   A fully-qualified path representing GlossaryTerm resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromGlossaryTermName(glossaryTermName: string) {
    return this.pathTemplates.glossaryTermPathTemplate.match(glossaryTermName).location;
  }

  /**
   * Parse the glossary from GlossaryTerm resource.
   *
   * @param {string} glossaryTermName
   *   A fully-qualified path representing GlossaryTerm resource.
   * @returns {string} A string representing the glossary.
   */
  matchGlossaryFromGlossaryTermName(glossaryTermName: string) {
    return this.pathTemplates.glossaryTermPathTemplate.match(glossaryTermName).glossary;
  }

  /**
   * Parse the glossary_term from GlossaryTerm resource.
   *
   * @param {string} glossaryTermName
   *   A fully-qualified path representing GlossaryTerm resource.
   * @returns {string} A string representing the glossary_term.
   */
  matchGlossaryTermFromGlossaryTermName(glossaryTermName: string) {
    return this.pathTemplates.glossaryTermPathTemplate.match(glossaryTermName).glossary_term;
  }

  /**
   * Return a fully-qualified job resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @param {string} job
   * @returns {string} Resource name string.
   */
  jobPath(project:string,location:string,lake:string,task:string,job:string) {
    return this.pathTemplates.jobPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
      job: job,
    });
  }

  /**
   * Parse the project from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).project;
  }

  /**
   * Parse the location from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).location;
  }

  /**
   * Parse the lake from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).lake;
  }

  /**
   * Parse the task from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).task;
  }

  /**
   * Parse the job from Job resource.
   *
   * @param {string} jobName
   *   A fully-qualified path representing Job resource.
   * @returns {string} A string representing the job.
   */
  matchJobFromJobName(jobName: string) {
    return this.pathTemplates.jobPathTemplate.match(jobName).job;
  }

  /**
   * Return a fully-qualified lake resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @returns {string} Resource name string.
   */
  lakePath(project:string,location:string,lake:string) {
    return this.pathTemplates.lakePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
    });
  }

  /**
   * Parse the project from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).project;
  }

  /**
   * Parse the location from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).location;
  }

  /**
   * Parse the lake from Lake resource.
   *
   * @param {string} lakeName
   *   A fully-qualified path representing Lake resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromLakeName(lakeName: string) {
    return this.pathTemplates.lakePathTemplate.match(lakeName).lake;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified metadataJob resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} metadataJob
   * @returns {string} Resource name string.
   */
  metadataJobPath(project:string,location:string,metadataJob:string) {
    return this.pathTemplates.metadataJobPathTemplate.render({
      project: project,
      location: location,
      metadataJob: metadataJob,
    });
  }

  /**
   * Parse the project from MetadataJob resource.
   *
   * @param {string} metadataJobName
   *   A fully-qualified path representing MetadataJob resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMetadataJobName(metadataJobName: string) {
    return this.pathTemplates.metadataJobPathTemplate.match(metadataJobName).project;
  }

  /**
   * Parse the location from MetadataJob resource.
   *
   * @param {string} metadataJobName
   *   A fully-qualified path representing MetadataJob resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMetadataJobName(metadataJobName: string) {
    return this.pathTemplates.metadataJobPathTemplate.match(metadataJobName).location;
  }

  /**
   * Parse the metadataJob from MetadataJob resource.
   *
   * @param {string} metadataJobName
   *   A fully-qualified path representing MetadataJob resource.
   * @returns {string} A string representing the metadataJob.
   */
  matchMetadataJobFromMetadataJobName(metadataJobName: string) {
    return this.pathTemplates.metadataJobPathTemplate.match(metadataJobName).metadataJob;
  }

  /**
   * Return a fully-qualified partition resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} entity
   * @param {string} partition
   * @returns {string} Resource name string.
   */
  partitionPath(project:string,location:string,lake:string,zone:string,entity:string,partition:string) {
    return this.pathTemplates.partitionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      entity: entity,
      partition: partition,
    });
  }

  /**
   * Parse the project from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).project;
  }

  /**
   * Parse the location from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).location;
  }

  /**
   * Parse the lake from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).lake;
  }

  /**
   * Parse the zone from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).zone;
  }

  /**
   * Parse the entity from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the entity.
   */
  matchEntityFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).entity;
  }

  /**
   * Parse the partition from Partition resource.
   *
   * @param {string} partitionName
   *   A fully-qualified path representing Partition resource.
   * @returns {string} A string representing the partition.
   */
  matchPartitionFromPartitionName(partitionName: string) {
    return this.pathTemplates.partitionPathTemplate.match(partitionName).partition;
  }

  /**
   * Return a fully-qualified projectLocationLakeAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeActionPath(project:string,location:string,lake:string,action:string) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeActionName(projectLocationLakeActionName: string) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).project;
  }

  /**
   * Parse the location from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeActionName(projectLocationLakeActionName: string) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeActionName(projectLocationLakeActionName: string) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).lake;
  }

  /**
   * Parse the action from ProjectLocationLakeAction resource.
   *
   * @param {string} projectLocationLakeActionName
   *   A fully-qualified path representing project_location_lake_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeActionName(projectLocationLakeActionName: string) {
    return this.pathTemplates.projectLocationLakeActionPathTemplate.match(projectLocationLakeActionName).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneActionPath(project:string,location:string,lake:string,zone:string,action:string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).zone;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAction resource.
   *
   * @param {string} projectLocationLakeZoneActionName
   *   A fully-qualified path representing project_location_lake_zone_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneActionName(projectLocationLakeZoneActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneActionPathTemplate.match(projectLocationLakeZoneActionName).action;
  }

  /**
   * Return a fully-qualified projectLocationLakeZoneAssetAction resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @param {string} asset
   * @param {string} action
   * @returns {string} Resource name string.
   */
  projectLocationLakeZoneAssetActionPath(project:string,location:string,lake:string,zone:string,asset:string,action:string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
      asset: asset,
      action: action,
    });
  }

  /**
   * Parse the project from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).project;
  }

  /**
   * Parse the location from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).location;
  }

  /**
   * Parse the lake from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).lake;
  }

  /**
   * Parse the zone from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).zone;
  }

  /**
   * Parse the asset from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the asset.
   */
  matchAssetFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).asset;
  }

  /**
   * Parse the action from ProjectLocationLakeZoneAssetAction resource.
   *
   * @param {string} projectLocationLakeZoneAssetActionName
   *   A fully-qualified path representing project_location_lake_zone_asset_action resource.
   * @returns {string} A string representing the action.
   */
  matchActionFromProjectLocationLakeZoneAssetActionName(projectLocationLakeZoneAssetActionName: string) {
    return this.pathTemplates.projectLocationLakeZoneAssetActionPathTemplate.match(projectLocationLakeZoneAssetActionName).action;
  }

  /**
   * Return a fully-qualified session resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} environment
   * @param {string} session
   * @returns {string} Resource name string.
   */
  sessionPath(project:string,location:string,lake:string,environment:string,session:string) {
    return this.pathTemplates.sessionPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      environment: environment,
      session: session,
    });
  }

  /**
   * Parse the project from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).project;
  }

  /**
   * Parse the location from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).location;
  }

  /**
   * Parse the lake from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).lake;
  }

  /**
   * Parse the environment from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the environment.
   */
  matchEnvironmentFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).environment;
  }

  /**
   * Parse the session from Session resource.
   *
   * @param {string} sessionName
   *   A fully-qualified path representing Session resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionName(sessionName: string) {
    return this.pathTemplates.sessionPathTemplate.match(sessionName).session;
  }

  /**
   * Return a fully-qualified task resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} task
   * @returns {string} Resource name string.
   */
  taskPath(project:string,location:string,lake:string,task:string) {
    return this.pathTemplates.taskPathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      task: task,
    });
  }

  /**
   * Parse the project from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).project;
  }

  /**
   * Parse the location from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).location;
  }

  /**
   * Parse the lake from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).lake;
  }

  /**
   * Parse the task from Task resource.
   *
   * @param {string} taskName
   *   A fully-qualified path representing Task resource.
   * @returns {string} A string representing the task.
   */
  matchTaskFromTaskName(taskName: string) {
    return this.pathTemplates.taskPathTemplate.match(taskName).task;
  }

  /**
   * Return a fully-qualified zone resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} lake
   * @param {string} zone
   * @returns {string} Resource name string.
   */
  zonePath(project:string,location:string,lake:string,zone:string) {
    return this.pathTemplates.zonePathTemplate.render({
      project: project,
      location: location,
      lake: lake,
      zone: zone,
    });
  }

  /**
   * Parse the project from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).project;
  }

  /**
   * Parse the location from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).location;
  }

  /**
   * Parse the lake from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the lake.
   */
  matchLakeFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).lake;
  }

  /**
   * Parse the zone from Zone resource.
   *
   * @param {string} zoneName
   *   A fully-qualified path representing Zone resource.
   * @returns {string} A string representing the zone.
   */
  matchZoneFromZoneName(zoneName: string) {
    return this.pathTemplates.zonePathTemplate.match(zoneName).zone;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.businessGlossaryServiceStub && !this._terminated) {
      return this.businessGlossaryServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}