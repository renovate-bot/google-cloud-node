// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datatransferserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos, IamProtos, LocationProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.DataTransferServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'networkconnectivity.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = datatransferserviceModule.v1.DataTransferServiceClient.servicePath;
                assert.strictEqual(servicePath, 'networkconnectivity.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = datatransferserviceModule.v1.DataTransferServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'networkconnectivity.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'networkconnectivity.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'networkconnectivity.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new datatransferserviceModule.v1.DataTransferServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'networkconnectivity.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new datatransferserviceModule.v1.DataTransferServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'networkconnectivity.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new datatransferserviceModule.v1.DataTransferServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = datatransferserviceModule.v1.DataTransferServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.dataTransferServiceStub, undefined);
            await client.initialize();
            assert(client.dataTransferServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.dataTransferServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.dataTransferServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('getMulticloudDataTransferConfig', () => {
        it('invokes getMulticloudDataTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()
            );
            client.innerApiCalls.getMulticloudDataTransferConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getMulticloudDataTransferConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()
            );
            client.innerApiCalls.getMulticloudDataTransferConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getMulticloudDataTransferConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferConfig with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getMulticloudDataTransferConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getMulticloudDataTransferConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferConfig with closed client', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getMulticloudDataTransferConfig(request), expectedError);
        });
    });

    describe('getDestination', () => {
        it('invokes getDestination without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.Destination()
            );
            client.innerApiCalls.getDestination = stubSimpleCall(expectedResponse);
            const [response] = await client.getDestination(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDestination without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.Destination()
            );
            client.innerApiCalls.getDestination = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDestination(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IDestination|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDestination with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getDestination = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDestination(request), expectedError);
            const actualRequest = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getDestination with closed client', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getDestination(request), expectedError);
        });
    });

    describe('getMulticloudDataTransferSupportedService', () => {
        it('invokes getMulticloudDataTransferSupportedService without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()
            );
            client.innerApiCalls.getMulticloudDataTransferSupportedService = stubSimpleCall(expectedResponse);
            const [response] = await client.getMulticloudDataTransferSupportedService(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferSupportedService without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()
            );
            client.innerApiCalls.getMulticloudDataTransferSupportedService = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getMulticloudDataTransferSupportedService(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferSupportedService with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getMulticloudDataTransferSupportedService = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getMulticloudDataTransferSupportedService(request), expectedError);
            const actualRequest = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.getMulticloudDataTransferSupportedService as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes getMulticloudDataTransferSupportedService with closed client', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.GetMulticloudDataTransferSupportedServiceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.getMulticloudDataTransferSupportedService(request), expectedError);
        });
    });

    describe('createMulticloudDataTransferConfig', () => {
        it('invokes createMulticloudDataTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createMulticloudDataTransferConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createMulticloudDataTransferConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMulticloudDataTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createMulticloudDataTransferConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createMulticloudDataTransferConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMulticloudDataTransferConfig with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createMulticloudDataTransferConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createMulticloudDataTransferConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createMulticloudDataTransferConfig with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateMulticloudDataTransferConfigRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createMulticloudDataTransferConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createMulticloudDataTransferConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateMulticloudDataTransferConfigProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateMulticloudDataTransferConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateMulticloudDataTransferConfigProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateMulticloudDataTransferConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateMulticloudDataTransferConfig', () => {
        it('invokes updateMulticloudDataTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest()
            );
            request.multicloudDataTransferConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest', ['multicloudDataTransferConfig', 'name']);
            request.multicloudDataTransferConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `multicloud_data_transfer_config.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateMulticloudDataTransferConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateMulticloudDataTransferConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateMulticloudDataTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest()
            );
            request.multicloudDataTransferConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest', ['multicloudDataTransferConfig', 'name']);
            request.multicloudDataTransferConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `multicloud_data_transfer_config.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateMulticloudDataTransferConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateMulticloudDataTransferConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateMulticloudDataTransferConfig with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest()
            );
            request.multicloudDataTransferConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest', ['multicloudDataTransferConfig', 'name']);
            request.multicloudDataTransferConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `multicloud_data_transfer_config.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateMulticloudDataTransferConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateMulticloudDataTransferConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateMulticloudDataTransferConfig with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest()
            );
            request.multicloudDataTransferConfig ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateMulticloudDataTransferConfigRequest', ['multicloudDataTransferConfig', 'name']);
            request.multicloudDataTransferConfig.name = defaultValue1;
            const expectedHeaderRequestParams = `multicloud_data_transfer_config.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateMulticloudDataTransferConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateMulticloudDataTransferConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateMulticloudDataTransferConfigProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateMulticloudDataTransferConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateMulticloudDataTransferConfigProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateMulticloudDataTransferConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteMulticloudDataTransferConfig', () => {
        it('invokes deleteMulticloudDataTransferConfig without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteMulticloudDataTransferConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteMulticloudDataTransferConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMulticloudDataTransferConfig without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteMulticloudDataTransferConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteMulticloudDataTransferConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMulticloudDataTransferConfig with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteMulticloudDataTransferConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteMulticloudDataTransferConfig(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteMulticloudDataTransferConfig with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteMulticloudDataTransferConfigRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteMulticloudDataTransferConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteMulticloudDataTransferConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteMulticloudDataTransferConfig as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteMulticloudDataTransferConfigProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteMulticloudDataTransferConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteMulticloudDataTransferConfigProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteMulticloudDataTransferConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createDestination', () => {
        it('invokes createDestination without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateDestinationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDestination = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createDestination(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDestination without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateDestinationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.createDestination = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDestination(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDestination with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateDestinationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDestination = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createDestination(request), expectedError);
            const actualRequest = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes createDestination with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.CreateDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.CreateDestinationRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createDestination = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createDestination(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.createDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkCreateDestinationProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateDestinationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateDestinationProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateDestinationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateDestination', () => {
        it('invokes updateDestination without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateDestinationRequest()
            );
            request.destination ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateDestinationRequest', ['destination', 'name']);
            request.destination.name = defaultValue1;
            const expectedHeaderRequestParams = `destination.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateDestination = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateDestination(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDestination without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateDestinationRequest()
            );
            request.destination ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateDestinationRequest', ['destination', 'name']);
            request.destination.name = defaultValue1;
            const expectedHeaderRequestParams = `destination.name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.updateDestination = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDestination(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDestination with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateDestinationRequest()
            );
            request.destination ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateDestinationRequest', ['destination', 'name']);
            request.destination.name = defaultValue1;
            const expectedHeaderRequestParams = `destination.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDestination = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateDestination(request), expectedError);
            const actualRequest = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes updateDestination with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.UpdateDestinationRequest()
            );
            request.destination ??= {};
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.UpdateDestinationRequest', ['destination', 'name']);
            request.destination.name = defaultValue1;
            const expectedHeaderRequestParams = `destination.name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDestination = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateDestination(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.updateDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkUpdateDestinationProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateDestinationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateDestinationProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateDestinationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteDestination', () => {
        it('invokes deleteDestination without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDestination = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteDestination(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDestination without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.deleteDestination = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDestination(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDestination with call error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDestination = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteDestination(request), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes deleteDestination with LRO error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.DeleteDestinationRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.DeleteDestinationRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDestination = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteDestination(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.deleteDestination as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkDeleteDestinationProgress without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteDestinationProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteDestinationProgress with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteDestinationProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listMulticloudDataTransferConfigs', () => {
        it('invokes listMulticloudDataTransferConfigs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
            ];
            client.innerApiCalls.listMulticloudDataTransferConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listMulticloudDataTransferConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferConfigs without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
            ];
            client.innerApiCalls.listMulticloudDataTransferConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMulticloudDataTransferConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferConfigs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMulticloudDataTransferConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMulticloudDataTransferConfigs(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferConfigs as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferConfigsStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
            ];
            client.descriptors.page.listMulticloudDataTransferConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMulticloudDataTransferConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMulticloudDataTransferConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMulticloudDataTransferConfigs, request));
            assert(
                (client.descriptors.page.listMulticloudDataTransferConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMulticloudDataTransferConfigsStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMulticloudDataTransferConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMulticloudDataTransferConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMulticloudDataTransferConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMulticloudDataTransferConfigs, request));
            assert(
                (client.descriptors.page.listMulticloudDataTransferConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMulticloudDataTransferConfigs without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig()),
            ];
            client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[] = [];
            const iterable = client.listMulticloudDataTransferConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMulticloudDataTransferConfigs with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferConfigsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMulticloudDataTransferConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listDestinations', () => {
        it('invokes listDestinations without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
            ];
            client.innerApiCalls.listDestinations = stubSimpleCall(expectedResponse);
            const [response] = await client.listDestinations(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDestinations without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
            ];
            client.innerApiCalls.listDestinations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDestinations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IDestination[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDestinations with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listDestinations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDestinations(request), expectedError);
            const actualRequest = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listDestinations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listDestinationsStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
            ];
            client.descriptors.page.listDestinations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDestinationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.Destination[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.Destination) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDestinations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDestinations, request));
            assert(
                (client.descriptors.page.listDestinations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listDestinationsStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDestinations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDestinationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.Destination[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.Destination) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDestinations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDestinations, request));
            assert(
                (client.descriptors.page.listDestinations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listDestinations without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.Destination()),
            ];
            client.descriptors.page.listDestinations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networkconnectivity.v1.IDestination[] = [];
            const iterable = client.listDestinationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDestinations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDestinations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listDestinations with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListDestinationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListDestinationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listDestinations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDestinationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networkconnectivity.v1.IDestination[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDestinations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listDestinations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });

    describe('listMulticloudDataTransferSupportedServices', () => {
        it('invokes listMulticloudDataTransferSupportedServices without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
            ];
            client.innerApiCalls.listMulticloudDataTransferSupportedServices = stubSimpleCall(expectedResponse);
            const [response] = await client.listMulticloudDataTransferSupportedServices(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferSupportedServices without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
            ];
            client.innerApiCalls.listMulticloudDataTransferSupportedServices = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listMulticloudDataTransferSupportedServices(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferSupportedServices with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listMulticloudDataTransferSupportedServices = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listMulticloudDataTransferSupportedServices(request), expectedError);
            const actualRequest = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.listMulticloudDataTransferSupportedServices as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes listMulticloudDataTransferSupportedServicesStream without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
            ];
            client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listMulticloudDataTransferSupportedServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMulticloudDataTransferSupportedServices, request));
            assert(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('invokes listMulticloudDataTransferSupportedServicesStream with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listMulticloudDataTransferSupportedServicesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService[] = [];
                stream.on('data', (response: protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listMulticloudDataTransferSupportedServices, request));
            assert(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                         expectedHeaderRequestParams
                    ) 
            );
        });

        it('uses async iteration with listMulticloudDataTransferSupportedServices without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
              generateSampleMessage(new protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService()),
            ];
            client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[] = [];
            const iterable = client.listMulticloudDataTransferSupportedServicesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });

        it('uses async iteration with listMulticloudDataTransferSupportedServices with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.networkconnectivity.v1.ListMulticloudDataTransferSupportedServicesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listMulticloudDataTransferSupportedServicesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getIamPolicy', () => {
        it('invokes getIamPolicy without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.getIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getIamPolicy without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.getIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes getIamPolicy with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.GetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.getIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('setIamPolicy', () => {
        it('invokes setIamPolicy without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
            const response = await client.setIamPolicy(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes setIamPolicy without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.Policy()
            );
            client.iamClient.setIamPolicy = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.setIamPolicy(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.Policy|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0));
        });
        it('invokes setIamPolicy with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.SetIamPolicyRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.setIamPolicy(request, expectedOptions), expectedError);
            assert((client.iamClient.setIamPolicy as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('testIamPermissions', () => {
        it('invokes testIamPermissions without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
            const response = await client.testIamPermissions(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes testIamPermissions without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsResponse()
            );
            client.iamClient.testIamPermissions = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.testIamPermissions(
                    request,
                    expectedOptions,
                    (err?: Error|null, result?: IamProtos.google.iam.v1.TestIamPermissionsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0));
        });
        it('invokes testIamPermissions with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new IamProtos.google.iam.v1.TestIamPermissionsRequest()
            );
            request.resource = '';
            const expectedHeaderRequestParams = 'resource=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.iamClient.testIamPermissions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.testIamPermissions(request, expectedOptions), expectedError);
            assert((client.iamClient.testIamPermissions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('getLocation', () => {
        it('invokes getLocation without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            const response = await client.getLocation(request, expectedOptions);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
        it('invokes getLocation without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(
              new LocationProtos.google.cloud.location.Location()
            );
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getLocation(
                    request,
                    expectedOptions,
                    (
                        err?: Error | null,
                        result?: LocationProtos.google.cloud.location.ILocation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0));
        });
        it('invokes getLocation with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.GetLocationRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getLocation(request, expectedOptions), expectedError);
            assert((client.locationsClient.getLocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
    describe('listLocationsAsync', () => {
        it('uses async iteration with listLocations without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
                new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedResponse = [
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
                generateSampleMessage(
                    new LocationProtos.google.cloud.location.Location()
                ),
            ];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: LocationProtos.google.cloud.location.ILocation[] = [];
            const iterable = client.listLocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
        it('uses async iteration with listLocations with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new LocationProtos.google.cloud.location.ListLocationsRequest()
            );
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listLocationsAsync(request);
            await assert.rejects(async () => {
                const responses: LocationProtos.google.cloud.location.ILocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert(
                (client.locationsClient.descriptors.page.listLocations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(
                        expectedHeaderRequestParams
                    )
            );
        });
    });
    describe('getOperation', () => {
        it('invokes getOperation without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes getOperation without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new operationsProtos.google.longrunning.Operation()
            );
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.getOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: operationsProtos.google.longrunning.Operation | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
        it('invokes getOperation with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.GetOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.getOperation(request)}, expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('cancelOperation', () => {
        it('invokes cancelOperation without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes cancelOperation without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.cancelOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0));
        });
        it('invokes cancelOperation with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.CancelOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.cancelOperation(request)}, expectedError);
            assert((client.operationsClient.cancelOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('deleteOperation', () => {
        it('invokes deleteOperation without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request)
            );
        });
        it('invokes deleteOperation without error using callback', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedResponse = generateSampleMessage(
                new protos.google.protobuf.Empty()
            );
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.operationsClient.deleteOperation(
                    request,
                    undefined,
                    (
                        err?: Error | null,
                        result?: protos.google.protobuf.Empty | null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    }).catch(err => {throw err});
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0));
        });
        it('invokes deleteOperation with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.DeleteOperationRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => {await client.deleteOperation(request)}, expectedError);
            assert((client.operationsClient.deleteOperation as SinonStub)
                .getCall(0).calledWith(request));
        });
    });
    describe('listOperationsAsync', () => {
        it('uses async iteration with listOperations without error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedResponse = [
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
                generateSampleMessage(
                    new operationsProtos.google.longrunning.ListOperationsResponse()
                ),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: operationsProtos.google.longrunning.IOperation[] = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
        it('uses async iteration with listOperations with error', async () => {
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new operationsProtos.google.longrunning.ListOperationsRequest()
            );
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses: operationsProtos.google.longrunning.IOperation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.operationsClient.descriptor.listOperations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('Path templates', () => {

        describe('destination', async () => {
            const fakePath = "/rendered/path/destination";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                multicloud_data_transfer_config: "multicloudDataTransferConfigValue",
                destination: "destinationValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.destinationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.destinationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('destinationPath', () => {
                const result = client.destinationPath("projectValue", "locationValue", "multicloudDataTransferConfigValue", "destinationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.destinationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDestinationName', () => {
                const result = client.matchProjectFromDestinationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.destinationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDestinationName', () => {
                const result = client.matchLocationFromDestinationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.destinationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMulticloudDataTransferConfigFromDestinationName', () => {
                const result = client.matchMulticloudDataTransferConfigFromDestinationName(fakePath);
                assert.strictEqual(result, "multicloudDataTransferConfigValue");
                assert((client.pathTemplates.destinationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDestinationFromDestinationName', () => {
                const result = client.matchDestinationFromDestinationName(fakePath);
                assert.strictEqual(result, "destinationValue");
                assert((client.pathTemplates.destinationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('group', async () => {
            const fakePath = "/rendered/path/group";
            const expectedParameters = {
                project: "projectValue",
                hub: "hubValue",
                group: "groupValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.groupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.groupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('groupPath', () => {
                const result = client.groupPath("projectValue", "hubValue", "groupValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.groupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromGroupName', () => {
                const result = client.matchProjectFromGroupName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.groupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHubFromGroupName', () => {
                const result = client.matchHubFromGroupName(fakePath);
                assert.strictEqual(result, "hubValue");
                assert((client.pathTemplates.groupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGroupFromGroupName', () => {
                const result = client.matchGroupFromGroupName(fakePath);
                assert.strictEqual(result, "groupValue");
                assert((client.pathTemplates.groupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hub', async () => {
            const fakePath = "/rendered/path/hub";
            const expectedParameters = {
                project: "projectValue",
                hub: "hubValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.hubPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hubPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hubPath', () => {
                const result = client.hubPath("projectValue", "hubValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hubPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromHubName', () => {
                const result = client.matchProjectFromHubName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.hubPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHubFromHubName', () => {
                const result = client.matchHubFromHubName(fakePath);
                assert.strictEqual(result, "hubValue");
                assert((client.pathTemplates.hubPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hubRoute', async () => {
            const fakePath = "/rendered/path/hubRoute";
            const expectedParameters = {
                project: "projectValue",
                hub: "hubValue",
                route_table: "routeTableValue",
                route: "routeValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.hubRoutePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hubRoutePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hubRoutePath', () => {
                const result = client.hubRoutePath("projectValue", "hubValue", "routeTableValue", "routeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hubRoutePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromHubRouteName', () => {
                const result = client.matchProjectFromHubRouteName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHubFromHubRouteName', () => {
                const result = client.matchHubFromHubRouteName(fakePath);
                assert.strictEqual(result, "hubValue");
                assert((client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRouteTableFromHubRouteName', () => {
                const result = client.matchRouteTableFromHubRouteName(fakePath);
                assert.strictEqual(result, "routeTableValue");
                assert((client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRouteFromHubRouteName', () => {
                const result = client.matchRouteFromHubRouteName(fakePath);
                assert.strictEqual(result, "routeValue");
                assert((client.pathTemplates.hubRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('internalRange', async () => {
            const fakePath = "/rendered/path/internalRange";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                internal_range: "internalRangeValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.internalRangePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.internalRangePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('internalRangePath', () => {
                const result = client.internalRangePath("projectValue", "locationValue", "internalRangeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.internalRangePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromInternalRangeName', () => {
                const result = client.matchProjectFromInternalRangeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.internalRangePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromInternalRangeName', () => {
                const result = client.matchLocationFromInternalRangeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.internalRangePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInternalRangeFromInternalRangeName', () => {
                const result = client.matchInternalRangeFromInternalRangeName(fakePath);
                assert.strictEqual(result, "internalRangeValue");
                assert((client.pathTemplates.internalRangePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('multicloudDataTransferConfig', async () => {
            const fakePath = "/rendered/path/multicloudDataTransferConfig";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                multicloud_data_transfer_config: "multicloudDataTransferConfigValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.multicloudDataTransferConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.multicloudDataTransferConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('multicloudDataTransferConfigPath', () => {
                const result = client.multicloudDataTransferConfigPath("projectValue", "locationValue", "multicloudDataTransferConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.multicloudDataTransferConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMulticloudDataTransferConfigName', () => {
                const result = client.matchProjectFromMulticloudDataTransferConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.multicloudDataTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMulticloudDataTransferConfigName', () => {
                const result = client.matchLocationFromMulticloudDataTransferConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.multicloudDataTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMulticloudDataTransferConfigFromMulticloudDataTransferConfigName', () => {
                const result = client.matchMulticloudDataTransferConfigFromMulticloudDataTransferConfigName(fakePath);
                assert.strictEqual(result, "multicloudDataTransferConfigValue");
                assert((client.pathTemplates.multicloudDataTransferConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('multicloudDataTransferSupportedService', async () => {
            const fakePath = "/rendered/path/multicloudDataTransferSupportedService";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                multicloud_data_transfer_supported_service: "multicloudDataTransferSupportedServiceValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('multicloudDataTransferSupportedServicePath', () => {
                const result = client.multicloudDataTransferSupportedServicePath("projectValue", "locationValue", "multicloudDataTransferSupportedServiceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromMulticloudDataTransferSupportedServiceName', () => {
                const result = client.matchProjectFromMulticloudDataTransferSupportedServiceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromMulticloudDataTransferSupportedServiceName', () => {
                const result = client.matchLocationFromMulticloudDataTransferSupportedServiceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMulticloudDataTransferSupportedServiceFromMulticloudDataTransferSupportedServiceName', () => {
                const result = client.matchMulticloudDataTransferSupportedServiceFromMulticloudDataTransferSupportedServiceName(fakePath);
                assert.strictEqual(result, "multicloudDataTransferSupportedServiceValue");
                assert((client.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('policyBasedRoute', async () => {
            const fakePath = "/rendered/path/policyBasedRoute";
            const expectedParameters = {
                project: "projectValue",
                policy_based_route: "policyBasedRouteValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.policyBasedRoutePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.policyBasedRoutePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('policyBasedRoutePath', () => {
                const result = client.policyBasedRoutePath("projectValue", "policyBasedRouteValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.policyBasedRoutePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromPolicyBasedRouteName', () => {
                const result = client.matchProjectFromPolicyBasedRouteName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.policyBasedRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPolicyBasedRouteFromPolicyBasedRouteName', () => {
                const result = client.matchPolicyBasedRouteFromPolicyBasedRouteName(fakePath);
                assert.strictEqual(result, "policyBasedRouteValue");
                assert((client.pathTemplates.policyBasedRoutePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('routeTable', async () => {
            const fakePath = "/rendered/path/routeTable";
            const expectedParameters = {
                project: "projectValue",
                hub: "hubValue",
                route_table: "routeTableValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.routeTablePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.routeTablePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('routeTablePath', () => {
                const result = client.routeTablePath("projectValue", "hubValue", "routeTableValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.routeTablePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRouteTableName', () => {
                const result = client.matchProjectFromRouteTableName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.routeTablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHubFromRouteTableName', () => {
                const result = client.matchHubFromRouteTableName(fakePath);
                assert.strictEqual(result, "hubValue");
                assert((client.pathTemplates.routeTablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRouteTableFromRouteTableName', () => {
                const result = client.matchRouteTableFromRouteTableName(fakePath);
                assert.strictEqual(result, "routeTableValue");
                assert((client.pathTemplates.routeTablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceClass', async () => {
            const fakePath = "/rendered/path/serviceClass";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                service_class: "serviceClassValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.serviceClassPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceClassPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceClassPath', () => {
                const result = client.serviceClassPath("projectValue", "locationValue", "serviceClassValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceClassPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceClassName', () => {
                const result = client.matchProjectFromServiceClassName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServiceClassName', () => {
                const result = client.matchLocationFromServiceClassName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceClassFromServiceClassName', () => {
                const result = client.matchServiceClassFromServiceClassName(fakePath);
                assert.strictEqual(result, "serviceClassValue");
                assert((client.pathTemplates.serviceClassPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceConnectionMap', async () => {
            const fakePath = "/rendered/path/serviceConnectionMap";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                service_connection_map: "serviceConnectionMapValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.serviceConnectionMapPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceConnectionMapPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceConnectionMapPath', () => {
                const result = client.serviceConnectionMapPath("projectValue", "locationValue", "serviceConnectionMapValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceConnectionMapPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceConnectionMapName', () => {
                const result = client.matchProjectFromServiceConnectionMapName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serviceConnectionMapPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServiceConnectionMapName', () => {
                const result = client.matchLocationFromServiceConnectionMapName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.serviceConnectionMapPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceConnectionMapFromServiceConnectionMapName', () => {
                const result = client.matchServiceConnectionMapFromServiceConnectionMapName(fakePath);
                assert.strictEqual(result, "serviceConnectionMapValue");
                assert((client.pathTemplates.serviceConnectionMapPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceConnectionPolicy', async () => {
            const fakePath = "/rendered/path/serviceConnectionPolicy";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                service_connection_policy: "serviceConnectionPolicyValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.serviceConnectionPolicyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceConnectionPolicyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceConnectionPolicyPath', () => {
                const result = client.serviceConnectionPolicyPath("projectValue", "locationValue", "serviceConnectionPolicyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceConnectionPolicyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceConnectionPolicyName', () => {
                const result = client.matchProjectFromServiceConnectionPolicyName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serviceConnectionPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServiceConnectionPolicyName', () => {
                const result = client.matchLocationFromServiceConnectionPolicyName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.serviceConnectionPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceConnectionPolicyFromServiceConnectionPolicyName', () => {
                const result = client.matchServiceConnectionPolicyFromServiceConnectionPolicyName(fakePath);
                assert.strictEqual(result, "serviceConnectionPolicyValue");
                assert((client.pathTemplates.serviceConnectionPolicyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('serviceConnectionToken', async () => {
            const fakePath = "/rendered/path/serviceConnectionToken";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                service_connection_token: "serviceConnectionTokenValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.serviceConnectionTokenPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.serviceConnectionTokenPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('serviceConnectionTokenPath', () => {
                const result = client.serviceConnectionTokenPath("projectValue", "locationValue", "serviceConnectionTokenValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.serviceConnectionTokenPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromServiceConnectionTokenName', () => {
                const result = client.matchProjectFromServiceConnectionTokenName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.serviceConnectionTokenPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromServiceConnectionTokenName', () => {
                const result = client.matchLocationFromServiceConnectionTokenName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.serviceConnectionTokenPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchServiceConnectionTokenFromServiceConnectionTokenName', () => {
                const result = client.matchServiceConnectionTokenFromServiceConnectionTokenName(fakePath);
                assert.strictEqual(result, "serviceConnectionTokenValue");
                assert((client.pathTemplates.serviceConnectionTokenPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('spoke', async () => {
            const fakePath = "/rendered/path/spoke";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                spoke: "spokeValue",
            };
            const client = new datatransferserviceModule.v1.DataTransferServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.spokePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.spokePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('spokePath', () => {
                const result = client.spokePath("projectValue", "locationValue", "spokeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.spokePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromSpokeName', () => {
                const result = client.matchProjectFromSpokeName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.spokePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromSpokeName', () => {
                const result = client.matchLocationFromSpokeName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.spokePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSpokeFromSpokeName', () => {
                const result = client.matchSpokeFromSpokeName(fakePath);
                assert.strictEqual(result, "spokeValue");
                assert((client.pathTemplates.spokePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
