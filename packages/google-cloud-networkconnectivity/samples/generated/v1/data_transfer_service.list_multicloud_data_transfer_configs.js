// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START networkconnectivity_v1_generated_DataTransferService_ListMulticloudDataTransferConfigs_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The name of the parent resource.
   */
  // const parent = 'abc123'
  /**
   *  Optional. The maximum number of results listed per page.
   */
  // const pageSize = 1234
  /**
   *  Optional. The page token.
   */
  // const pageToken = 'abc123'
  /**
   *  Optional. An expression that filters the results listed in the response.
   */
  // const filter = 'abc123'
  /**
   *  Optional. The sort order of the results.
   */
  // const orderBy = 'abc123'
  /**
   *  Optional. If `true`, allows partial responses for multi-regional aggregated
   *  list requests.
   */
  // const returnPartialSuccess = true

  // Imports the Networkconnectivity library
  const {DataTransferServiceClient} = require('@google-cloud/network-connectivity').v1;

  // Instantiates a client
  const networkconnectivityClient = new DataTransferServiceClient();

  async function callListMulticloudDataTransferConfigs() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const iterable = networkconnectivityClient.listMulticloudDataTransferConfigsAsync(request);
    for await (const response of iterable) {
        console.log(response);
    }
  }

  callListMulticloudDataTransferConfigs();
  // [END networkconnectivity_v1_generated_DataTransferService_ListMulticloudDataTransferConfigs_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
