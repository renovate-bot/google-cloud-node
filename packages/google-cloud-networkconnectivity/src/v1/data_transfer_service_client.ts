// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, GrpcClientOptions, LROperation, PaginationCallback, GaxCall, IamClient, IamProtos, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/data_transfer_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './data_transfer_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  DataTransferService is the service for the Data Transfer API.
 * @class
 * @memberof v1
 */
export class DataTransferServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('network-connectivity');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  iamClient: IamClient;
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  dataTransferServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DataTransferServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DataTransferServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DataTransferServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'networkconnectivity.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
  
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      destinationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/multicloudDataTransferConfigs/{multicloud_data_transfer_config}/destinations/{destination}'
      ),
      groupPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/hubs/{hub}/groups/{group}'
      ),
      hubPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/hubs/{hub}'
      ),
      hubRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/hubs/{hub}/routeTables/{route_table}/routes/{route}'
      ),
      internalRangePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/internalRanges/{internal_range}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      multicloudDataTransferConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/multicloudDataTransferConfigs/{multicloud_data_transfer_config}'
      ),
      multicloudDataTransferSupportedServicePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/multicloudDataTransferSupportedServices/{multicloud_data_transfer_supported_service}'
      ),
      policyBasedRoutePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/PolicyBasedRoutes/{policy_based_route}'
      ),
      routeTablePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/global/hubs/{hub}/routeTables/{route_table}'
      ),
      serviceClassPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceClasses/{service_class}'
      ),
      serviceConnectionMapPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map}'
      ),
      serviceConnectionPolicyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy}'
      ),
      serviceConnectionTokenPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/serviceConnectionTokens/{service_connection_token}'
      ),
      spokePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/spokes/{spoke}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMulticloudDataTransferConfigs:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'multicloudDataTransferConfigs'),
      listDestinations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'destinations'),
      listMulticloudDataTransferSupportedServices:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'multicloudDataTransferSupportedServices')
    };

    const protoFilesRoot = this._gaxModule.protobufFromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [{selector: 'google.cloud.location.Locations.GetLocation',get: '/v1/{name=projects/*/locations/*}',},{selector: 'google.cloud.location.Locations.ListLocations',get: '/v1/{name=projects/*}/locations',},{selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',get: '/v1/{resource=projects/*/locations/global/hubs/*}:getIamPolicy',additional_bindings: [{get: '/v1/{resource=projects/*/locations/global/hubs/*/groups/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/spokes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/global/policyBasedRoutes/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/serviceConnectionMaps/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/serviceConnectionPolicies/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/serviceClasses/*}:getIamPolicy',},{get: '/v1/{resource=projects/*/locations/*/internalRanges/*}:getIamPolicy',}],
      },{selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',post: '/v1/{resource=projects/*/locations/global/hubs/*}:setIamPolicy',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/global/hubs/*/groups/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/spokes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/global/policyBasedRoutes/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceConnectionMaps/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceConnectionPolicies/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceClasses/*}:setIamPolicy',body: '*',},{post: '/v1/{resource=projects/*/locations/*/internalRanges/*}:setIamPolicy',body: '*',}],
      },{selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',post: '/v1/{resource=projects/*/locations/global/hubs/*}:testIamPermissions',body: '*',additional_bindings: [{post: '/v1/{resource=projects/*/locations/global/hubs/*/groups/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/spokes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/global/policyBasedRoutes/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceConnectionMaps/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceConnectionPolicies/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/serviceClasses/*}:testIamPermissions',body: '*',},{post: '/v1/{resource=projects/*/locations/*/internalRanges/*}:testIamPermissions',body: '*',}],
      },{selector: 'google.longrunning.Operations.CancelOperation',post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',body: '*',},{selector: 'google.longrunning.Operations.DeleteOperation',delete: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.GetOperation',get: '/v1/{name=projects/*/locations/*/operations/*}',},{selector: 'google.longrunning.Operations.ListOperations',get: '/v1/{name=projects/*/locations/*}/operations',}];
    }
    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
    const createMulticloudDataTransferConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig') as gax.protobuf.Type;
    const createMulticloudDataTransferConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;
    const updateMulticloudDataTransferConfigResponse = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig') as gax.protobuf.Type;
    const updateMulticloudDataTransferConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteMulticloudDataTransferConfigResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteMulticloudDataTransferConfigMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;
    const createDestinationResponse = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.Destination') as gax.protobuf.Type;
    const createDestinationMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;
    const updateDestinationResponse = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.Destination') as gax.protobuf.Type;
    const updateDestinationMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;
    const deleteDestinationResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteDestinationMetadata = protoFilesRoot.lookup(
      '.google.cloud.networkconnectivity.v1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createMulticloudDataTransferConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createMulticloudDataTransferConfigResponse.decode.bind(createMulticloudDataTransferConfigResponse),
        createMulticloudDataTransferConfigMetadata.decode.bind(createMulticloudDataTransferConfigMetadata)),
      updateMulticloudDataTransferConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateMulticloudDataTransferConfigResponse.decode.bind(updateMulticloudDataTransferConfigResponse),
        updateMulticloudDataTransferConfigMetadata.decode.bind(updateMulticloudDataTransferConfigMetadata)),
      deleteMulticloudDataTransferConfig: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteMulticloudDataTransferConfigResponse.decode.bind(deleteMulticloudDataTransferConfigResponse),
        deleteMulticloudDataTransferConfigMetadata.decode.bind(deleteMulticloudDataTransferConfigMetadata)),
      createDestination: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDestinationResponse.decode.bind(createDestinationResponse),
        createDestinationMetadata.decode.bind(createDestinationMetadata)),
      updateDestination: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDestinationResponse.decode.bind(updateDestinationResponse),
        updateDestinationMetadata.decode.bind(updateDestinationMetadata)),
      deleteDestination: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDestinationResponse.decode.bind(deleteDestinationResponse),
        deleteDestinationMetadata.decode.bind(deleteDestinationMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.networkconnectivity.v1.DataTransferService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.dataTransferServiceStub) {
      return this.dataTransferServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.networkconnectivity.v1.DataTransferService.
    this.dataTransferServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.networkconnectivity.v1.DataTransferService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.networkconnectivity.v1.DataTransferService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dataTransferServiceStubMethods =
        ['listMulticloudDataTransferConfigs', 'getMulticloudDataTransferConfig', 'createMulticloudDataTransferConfig', 'updateMulticloudDataTransferConfig', 'deleteMulticloudDataTransferConfig', 'listDestinations', 'getDestination', 'createDestination', 'updateDestination', 'deleteDestination', 'getMulticloudDataTransferSupportedService', 'listMulticloudDataTransferSupportedServices'];
    for (const methodName of dataTransferServiceStubMethods) {
      const callPromise = this.dataTransferServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.dataTransferServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'networkconnectivity.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'networkconnectivity.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets the details of a `MulticloudDataTransferConfig` resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the `MulticloudDataTransferConfig` resource to get.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig|MulticloudDataTransferConfig}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.get_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_GetMulticloudDataTransferConfig_async
 */
  getMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|undefined, {}|undefined
      ]>;
  getMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|null|undefined,
          {}|null|undefined>): void;
  getMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getMulticloudDataTransferConfig request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getMulticloudDataTransferConfig response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getMulticloudDataTransferConfig(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferConfigRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getMulticloudDataTransferConfig response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets the details of a `Destination` resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the `Destination` resource to get.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.networkconnectivity.v1.Destination|Destination}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.get_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_GetDestination_async
 */
  getDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IDestination,
        protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|undefined, {}|undefined
      ]>;
  getDestination(
      request: protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IDestination,
          protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|null|undefined,
          {}|null|undefined>): void;
  getDestination(
      request: protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IDestination,
          protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|null|undefined,
          {}|null|undefined>): void;
  getDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.networkconnectivity.v1.IDestination,
          protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.networkconnectivity.v1.IDestination,
          protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IDestination,
        protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getDestination request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.networkconnectivity.v1.IDestination,
        protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getDestination response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getDestination(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.networkconnectivity.v1.IDestination,
        protos.google.cloud.networkconnectivity.v1.IGetDestinationRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getDestination response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets the details of a service that is supported for Data Transfer
 * Essentials.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the service.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService|MulticloudDataTransferSupportedService}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.get_multicloud_data_transfer_supported_service.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_GetMulticloudDataTransferSupportedService_async
 */
  getMulticloudDataTransferSupportedService(
      request?: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|undefined, {}|undefined
      ]>;
  getMulticloudDataTransferSupportedService(
      request: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|null|undefined,
          {}|null|undefined>): void;
  getMulticloudDataTransferSupportedService(
      request: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest,
      callback: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|null|undefined,
          {}|null|undefined>): void;
  getMulticloudDataTransferSupportedService(
      request?: protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
          protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getMulticloudDataTransferSupportedService request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getMulticloudDataTransferSupportedService response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getMulticloudDataTransferSupportedService(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService,
        protos.google.cloud.networkconnectivity.v1.IGetMulticloudDataTransferSupportedServiceRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getMulticloudDataTransferSupportedService response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

/**
 * Creates a `MulticloudDataTransferConfig` resource in a specified project
 * and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {string} request.multicloudDataTransferConfigId
 *   Required. The ID to use for the `MulticloudDataTransferConfig` resource,
 *   which becomes the final component of the `MulticloudDataTransferConfig`
 *   resource name.
 * @param {google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig} request.multicloudDataTransferConfig
 *   Required. The `MulticloudDataTransferConfig` resource to create.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request. This prevents
 *   clients from accidentally creating duplicate `MulticloudDataTransferConfig`
 *   resources.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.create_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_CreateMulticloudDataTransferConfig_async
 */
  createMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.ICreateMulticloudDataTransferConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.ICreateMulticloudDataTransferConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.ICreateMulticloudDataTransferConfigRequest,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.ICreateMulticloudDataTransferConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createMulticloudDataTransferConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createMulticloudDataTransferConfig request %j', request);
    return this.innerApiCalls.createMulticloudDataTransferConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createMulticloudDataTransferConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createMulticloudDataTransferConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.create_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_CreateMulticloudDataTransferConfig_async
 */
  async checkCreateMulticloudDataTransferConfigProgress(name: string): Promise<LROperation<protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('createMulticloudDataTransferConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createMulticloudDataTransferConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
/**
 * Updates a `MulticloudDataTransferConfig` resource in a specified project
 * and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. `FieldMask` is used to specify the fields in the
 *   `MulticloudDataTransferConfig` resource to be overwritten by the update.
 *   The fields specified in `update_mask` are relative to the resource, not
 *   the full request. A field is overwritten if it is in the mask. If you
 *   don't specify a mask, all fields are overwritten.
 * @param {google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig} request.multicloudDataTransferConfig
 *   Required. The `MulticloudDataTransferConfig` resource to update.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request. This prevents
 *   clients from accidentally creating duplicate `MulticloudDataTransferConfig`
 *   resources.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.update_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_UpdateMulticloudDataTransferConfig_async
 */
  updateMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IUpdateMulticloudDataTransferConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IUpdateMulticloudDataTransferConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IUpdateMulticloudDataTransferConfigRequest,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IUpdateMulticloudDataTransferConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'multicloud_data_transfer_config.name': request.multicloudDataTransferConfig!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateMulticloudDataTransferConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateMulticloudDataTransferConfig request %j', request);
    return this.innerApiCalls.updateMulticloudDataTransferConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateMulticloudDataTransferConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateMulticloudDataTransferConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.update_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_UpdateMulticloudDataTransferConfig_async
 */
  async checkUpdateMulticloudDataTransferConfigProgress(name: string): Promise<LROperation<protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('updateMulticloudDataTransferConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateMulticloudDataTransferConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
/**
 * Deletes a `MulticloudDataTransferConfig` resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the `MulticloudDataTransferConfig` resource to
 *   delete.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request. This prevents
 *   clients from accidentally creating duplicate `MulticloudDataTransferConfig`
 *   resources.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {string} [request.etag]
 *   Optional. The etag is computed by the server, and might be sent with update
 *   and delete requests so that the client has an up-to-date value before
 *   proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.delete_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_DeleteMulticloudDataTransferConfig_async
 */
  deleteMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IDeleteMulticloudDataTransferConfigRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IDeleteMulticloudDataTransferConfigRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteMulticloudDataTransferConfig(
      request: protos.google.cloud.networkconnectivity.v1.IDeleteMulticloudDataTransferConfigRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteMulticloudDataTransferConfig(
      request?: protos.google.cloud.networkconnectivity.v1.IDeleteMulticloudDataTransferConfigRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteMulticloudDataTransferConfig response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteMulticloudDataTransferConfig request %j', request);
    return this.innerApiCalls.deleteMulticloudDataTransferConfig(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteMulticloudDataTransferConfig response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteMulticloudDataTransferConfig()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.delete_multicloud_data_transfer_config.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_DeleteMulticloudDataTransferConfig_async
 */
  async checkDeleteMulticloudDataTransferConfigProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('deleteMulticloudDataTransferConfig long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteMulticloudDataTransferConfig, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
/**
 * Creates a `Destination` resource in a specified project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {string} request.destinationId
 *   Required. The ID to use for the `Destination` resource, which becomes the
 *   final component of the `Destination` resource name.
 * @param {google.cloud.networkconnectivity.v1.Destination} request.destination
 *   Required. The `Destination` resource to create.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request. This prevents
 *   clients from accidentally creating duplicate `Destination`
 *   resources.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.create_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_CreateDestination_async
 */
  createDestination(
      request?: protos.google.cloud.networkconnectivity.v1.ICreateDestinationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createDestination(
      request: protos.google.cloud.networkconnectivity.v1.ICreateDestinationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDestination(
      request: protos.google.cloud.networkconnectivity.v1.ICreateDestinationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createDestination(
      request?: protos.google.cloud.networkconnectivity.v1.ICreateDestinationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('createDestination response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('createDestination request %j', request);
    return this.innerApiCalls.createDestination(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('createDestination response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `createDestination()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.create_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_CreateDestination_async
 */
  async checkCreateDestinationProgress(name: string): Promise<LROperation<protos.google.cloud.networkconnectivity.v1.Destination, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('createDestination long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDestination, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.networkconnectivity.v1.Destination, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
/**
 * Updates a `Destination` resource in a specified project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. `FieldMask is used to specify the fields to be overwritten in the
 *   `Destination` resource by the update.
 *   The fields specified in `update_mask` are relative to the resource, not
 *   the full request. A field is overwritten if it is in the mask. If you
 *   don't specify a mask, all fields are overwritten.
 * @param {google.cloud.networkconnectivity.v1.Destination} request.destination
 *   Required. The `Destination` resource to update.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.update_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_UpdateDestination_async
 */
  updateDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IUpdateDestinationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateDestination(
      request: protos.google.cloud.networkconnectivity.v1.IUpdateDestinationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDestination(
      request: protos.google.cloud.networkconnectivity.v1.IUpdateDestinationRequest,
      callback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IUpdateDestinationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'destination.name': request.destination!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('updateDestination response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('updateDestination request %j', request);
    return this.innerApiCalls.updateDestination(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.cloud.networkconnectivity.v1.IDestination, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('updateDestination response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `updateDestination()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.update_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_UpdateDestination_async
 */
  async checkUpdateDestinationProgress(name: string): Promise<LROperation<protos.google.cloud.networkconnectivity.v1.Destination, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('updateDestination long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDestination, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.networkconnectivity.v1.Destination, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
/**
 * Deletes a `Destination` resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the `Destination` resource to delete.
 * @param {string} [request.requestId]
 *   Optional. A request ID to identify requests. Specify a unique request ID
 *   so that if you must retry your request, the server can ignore
 *   the request if it has already been completed. The server waits
 *   for at least 60 minutes since the first request.
 *
 *   For example, consider a situation where you make an initial request and
 *   the request times out. If you make the request again with the same request
 *   ID, the server can check if original operation with the same request ID
 *   was received, and if so, can ignore the second request.
 *
 *   The request ID must be a valid UUID with the exception that zero UUID
 *   (00000000-0000-0000-0000-000000000000) isn't supported.
 * @param {string} [request.etag]
 *   Optional. The etag is computed by the server, and might be sent with update
 *   and delete requests so that the client has an up-to-date value before
 *   proceeding.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.delete_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_DeleteDestination_async
 */
  deleteDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IDeleteDestinationRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteDestination(
      request: protos.google.cloud.networkconnectivity.v1.IDeleteDestinationRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDestination(
      request: protos.google.cloud.networkconnectivity.v1.IDeleteDestinationRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteDestination(
      request?: protos.google.cloud.networkconnectivity.v1.IDeleteDestinationRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>|undefined = callback
      ? (error, response, rawResponse, _) => {
          this._log.info('deleteDestination response %j', rawResponse);
          callback!(error, response, rawResponse, _); // We verified callback above.
        }
      : undefined;
    this._log.info('deleteDestination request %j', request);
    return this.innerApiCalls.deleteDestination(request, options, wrappedCallback)
    ?.then(([response, rawResponse, _]: [
      LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkconnectivity.v1.IOperationMetadata>,
      protos.google.longrunning.IOperation|undefined, {}|undefined
    ]) => {
      this._log.info('deleteDestination response %j', rawResponse);
      return [response, rawResponse, _];
    });
  }
/**
 * Check the status of the long running operation returned by `deleteDestination()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.delete_destination.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_DeleteDestination_async
 */
  async checkDeleteDestinationProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.networkconnectivity.v1.OperationMetadata>>{
    this._log.info('deleteDestination long-running');
    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDestination, this._gaxModule.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.networkconnectivity.v1.OperationMetadata>;
  }
 /**
 * Lists the `MulticloudDataTransferConfig` resources in a specified project
 * and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allows partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig|MulticloudDataTransferConfig}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listMulticloudDataTransferConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMulticloudDataTransferConfigs(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse
      ]>;
  listMulticloudDataTransferConfigs(
      request: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>): void;
  listMulticloudDataTransferConfigs(
      request: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>): void;
  listMulticloudDataTransferConfigs(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>,
      callback?: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse|null|undefined,
      protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listMulticloudDataTransferConfigs values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listMulticloudDataTransferConfigs request %j', request);
    return this.innerApiCalls
      .listMulticloudDataTransferConfigs(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsResponse
      ]) => {
        this._log.info('listMulticloudDataTransferConfigs values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listMulticloudDataTransferConfigs`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allows partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig|MulticloudDataTransferConfig} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listMulticloudDataTransferConfigsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMulticloudDataTransferConfigsStream(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMulticloudDataTransferConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMulticloudDataTransferConfigs stream %j', request);
    return this.descriptors.page.listMulticloudDataTransferConfigs.createStream(
      this.innerApiCalls.listMulticloudDataTransferConfigs as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listMulticloudDataTransferConfigs`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allows partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferConfig|MulticloudDataTransferConfig}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.list_multicloud_data_transfer_configs.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_ListMulticloudDataTransferConfigs_async
 */
  listMulticloudDataTransferConfigsAsync(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferConfigsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMulticloudDataTransferConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMulticloudDataTransferConfigs iterate %j', request);
    return this.descriptors.page.listMulticloudDataTransferConfigs.asyncIterate(
      this.innerApiCalls['listMulticloudDataTransferConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferConfig>;
  }
 /**
 * Lists the `Destination` resources in a specified project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allow partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.networkconnectivity.v1.Destination|Destination}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listDestinationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDestinations(
      request?: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IDestination[],
        protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse
      ]>;
  listDestinations(
      request: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
          protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IDestination>): void;
  listDestinations(
      request: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
          protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IDestination>): void;
  listDestinations(
      request?: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
          protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IDestination>,
      callback?: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
          protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IDestination>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IDestination[],
        protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse|null|undefined,
      protos.google.cloud.networkconnectivity.v1.IDestination>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listDestinations values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listDestinations request %j', request);
    return this.innerApiCalls
      .listDestinations(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.networkconnectivity.v1.IDestination[],
        protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListDestinationsResponse
      ]) => {
        this._log.info('listDestinations values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listDestinations`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allow partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.networkconnectivity.v1.Destination|Destination} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listDestinationsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listDestinationsStream(
      request?: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDestinations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDestinations stream %j', request);
    return this.descriptors.page.listDestinations.createStream(
      this.innerApiCalls.listDestinations as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listDestinations`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {string} [request.filter]
 *   Optional. An expression that filters the results listed in the response.
 * @param {string} [request.orderBy]
 *   Optional. The sort order of the results.
 * @param {boolean} [request.returnPartialSuccess]
 *   Optional. If `true`, allow partial responses for multi-regional aggregated
 *   list requests.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.networkconnectivity.v1.Destination|Destination}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.list_destinations.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_ListDestinations_async
 */
  listDestinationsAsync(
      request?: protos.google.cloud.networkconnectivity.v1.IListDestinationsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.networkconnectivity.v1.IDestination>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listDestinations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listDestinations iterate %j', request);
    return this.descriptors.page.listDestinations.asyncIterate(
      this.innerApiCalls['listDestinations'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkconnectivity.v1.IDestination>;
  }
 /**
 * Lists the services in the project for a region that are supported for
 * Data Transfer Essentials.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService|MulticloudDataTransferSupportedService}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listMulticloudDataTransferSupportedServicesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMulticloudDataTransferSupportedServices(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse
      ]>;
  listMulticloudDataTransferSupportedServices(
      request: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>): void;
  listMulticloudDataTransferSupportedServices(
      request: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      callback: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>): void;
  listMulticloudDataTransferSupportedServices(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>,
      callback?: PaginationCallback<
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
          protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse|null|undefined,
          protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>):
      Promise<[
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse|null|undefined,
      protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listMulticloudDataTransferSupportedServices values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listMulticloudDataTransferSupportedServices request %j', request);
    return this.innerApiCalls
      .listMulticloudDataTransferSupportedServices(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService[],
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest|null,
        protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesResponse
      ]) => {
        this._log.info('listMulticloudDataTransferSupportedServices values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listMulticloudDataTransferSupportedServices`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService|MulticloudDataTransferSupportedService} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listMulticloudDataTransferSupportedServicesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listMulticloudDataTransferSupportedServicesStream(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMulticloudDataTransferSupportedServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMulticloudDataTransferSupportedServices stream %j', request);
    return this.descriptors.page.listMulticloudDataTransferSupportedServices.createStream(
      this.innerApiCalls.listMulticloudDataTransferSupportedServices as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listMulticloudDataTransferSupportedServices`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent resource.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of results listed per page.
 * @param {string} [request.pageToken]
 *   Optional. The page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.networkconnectivity.v1.MulticloudDataTransferSupportedService|MulticloudDataTransferSupportedService}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/data_transfer_service.list_multicloud_data_transfer_supported_services.js</caption>
 * region_tag:networkconnectivity_v1_generated_DataTransferService_ListMulticloudDataTransferSupportedServices_async
 */
  listMulticloudDataTransferSupportedServicesAsync(
      request?: protos.google.cloud.networkconnectivity.v1.IListMulticloudDataTransferSupportedServicesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listMulticloudDataTransferSupportedServices'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listMulticloudDataTransferSupportedServices iterate %j', request);
    return this.descriptors.page.listMulticloudDataTransferSupportedServices.asyncIterate(
      this.innerApiCalls['listMulticloudDataTransferSupportedServices'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.networkconnectivity.v1.IMulticloudDataTransferSupportedService>;
  }
/**
 * Gets the access control policy for a resource. Returns an empty policy
 * if the resource exists and does not have a policy set.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {Object} [request.options]
 *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *   `GetIamPolicy`. This field is only used by Cloud IAM.
 *
 *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getIamPolicy(
    request: IamProtos.google.iam.v1.GetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.getIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  setIamPolicy(
    request: IamProtos.google.iam.v1.SetIamPolicyRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.Policy,
          IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.Policy,
      IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.Policy]> {
    return this.iamClient.setIamPolicy(request, options, callback);
  }

/**
 * Returns permissions that a caller has on the specified resource. If the
 * resource does not exist, this will return an empty set of
 * permissions, not a NOT_FOUND error.
 *
 * Note: This operation is designed to be used for building
 * permission-aware UIs and command-line tools, not for authorization
 * checking. This operation may "fail open" without warning.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.resource
 *   REQUIRED: The resource for which the policy detail is being requested.
 *   See the operation documentation for the appropriate value for this field.
 * @param {string[]} request.permissions
 *   The set of permissions to check for the `resource`. Permissions with
 *   wildcards (such as '*' or 'storage.*') are not allowed. For more
 *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
 * @param {Object} [options]
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
 * @param {function(?Error, ?Object)} [callback]
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 */
  testIamPermissions(
    request: IamProtos.google.iam.v1.TestIamPermissionsRequest,
    options?:
      | gax.CallOptions
      | Callback<
          IamProtos.google.iam.v1.TestIamPermissionsResponse,
          IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      IamProtos.google.iam.v1.TestIamPermissionsResponse,
      IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ):Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]> {
    return this.iamClient.testIamPermissions(request, options, callback);
  }

/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

/**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.IOperation> {
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
   cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.CancelOperationRequest,
          protos.google.protobuf.Empty,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
     let options: gax.CallOptions;
     if (typeof optionsOrCallback === 'function' && callback === undefined) {
       callback = optionsOrCallback;
       options = {};
     } else {
       options = optionsOrCallback as gax.CallOptions;
     }
     options = options || {};
     options.otherArgs = options.otherArgs || {};
     options.otherArgs.headers = options.otherArgs.headers || {};
     options.otherArgs.headers['x-goog-request-params'] =
       this._gaxModule.routingHeader.fromParams({
         name: request.name ?? '',
       });
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified destination resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} multicloud_data_transfer_config
   * @param {string} destination
   * @returns {string} Resource name string.
   */
  destinationPath(project:string,location:string,multicloudDataTransferConfig:string,destination:string) {
    return this.pathTemplates.destinationPathTemplate.render({
      project: project,
      location: location,
      multicloud_data_transfer_config: multicloudDataTransferConfig,
      destination: destination,
    });
  }

  /**
   * Parse the project from Destination resource.
   *
   * @param {string} destinationName
   *   A fully-qualified path representing Destination resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDestinationName(destinationName: string) {
    return this.pathTemplates.destinationPathTemplate.match(destinationName).project;
  }

  /**
   * Parse the location from Destination resource.
   *
   * @param {string} destinationName
   *   A fully-qualified path representing Destination resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDestinationName(destinationName: string) {
    return this.pathTemplates.destinationPathTemplate.match(destinationName).location;
  }

  /**
   * Parse the multicloud_data_transfer_config from Destination resource.
   *
   * @param {string} destinationName
   *   A fully-qualified path representing Destination resource.
   * @returns {string} A string representing the multicloud_data_transfer_config.
   */
  matchMulticloudDataTransferConfigFromDestinationName(destinationName: string) {
    return this.pathTemplates.destinationPathTemplate.match(destinationName).multicloud_data_transfer_config;
  }

  /**
   * Parse the destination from Destination resource.
   *
   * @param {string} destinationName
   *   A fully-qualified path representing Destination resource.
   * @returns {string} A string representing the destination.
   */
  matchDestinationFromDestinationName(destinationName: string) {
    return this.pathTemplates.destinationPathTemplate.match(destinationName).destination;
  }

  /**
   * Return a fully-qualified group resource name string.
   *
   * @param {string} project
   * @param {string} hub
   * @param {string} group
   * @returns {string} Resource name string.
   */
  groupPath(project:string,hub:string,group:string) {
    return this.pathTemplates.groupPathTemplate.render({
      project: project,
      hub: hub,
      group: group,
    });
  }

  /**
   * Parse the project from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).project;
  }

  /**
   * Parse the hub from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the hub.
   */
  matchHubFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).hub;
  }

  /**
   * Parse the group from Group resource.
   *
   * @param {string} groupName
   *   A fully-qualified path representing Group resource.
   * @returns {string} A string representing the group.
   */
  matchGroupFromGroupName(groupName: string) {
    return this.pathTemplates.groupPathTemplate.match(groupName).group;
  }

  /**
   * Return a fully-qualified hub resource name string.
   *
   * @param {string} project
   * @param {string} hub
   * @returns {string} Resource name string.
   */
  hubPath(project:string,hub:string) {
    return this.pathTemplates.hubPathTemplate.render({
      project: project,
      hub: hub,
    });
  }

  /**
   * Parse the project from Hub resource.
   *
   * @param {string} hubName
   *   A fully-qualified path representing Hub resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHubName(hubName: string) {
    return this.pathTemplates.hubPathTemplate.match(hubName).project;
  }

  /**
   * Parse the hub from Hub resource.
   *
   * @param {string} hubName
   *   A fully-qualified path representing Hub resource.
   * @returns {string} A string representing the hub.
   */
  matchHubFromHubName(hubName: string) {
    return this.pathTemplates.hubPathTemplate.match(hubName).hub;
  }

  /**
   * Return a fully-qualified hubRoute resource name string.
   *
   * @param {string} project
   * @param {string} hub
   * @param {string} route_table
   * @param {string} route
   * @returns {string} Resource name string.
   */
  hubRoutePath(project:string,hub:string,routeTable:string,route:string) {
    return this.pathTemplates.hubRoutePathTemplate.render({
      project: project,
      hub: hub,
      route_table: routeTable,
      route: route,
    });
  }

  /**
   * Parse the project from HubRoute resource.
   *
   * @param {string} hubRouteName
   *   A fully-qualified path representing HubRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromHubRouteName(hubRouteName: string) {
    return this.pathTemplates.hubRoutePathTemplate.match(hubRouteName).project;
  }

  /**
   * Parse the hub from HubRoute resource.
   *
   * @param {string} hubRouteName
   *   A fully-qualified path representing HubRoute resource.
   * @returns {string} A string representing the hub.
   */
  matchHubFromHubRouteName(hubRouteName: string) {
    return this.pathTemplates.hubRoutePathTemplate.match(hubRouteName).hub;
  }

  /**
   * Parse the route_table from HubRoute resource.
   *
   * @param {string} hubRouteName
   *   A fully-qualified path representing HubRoute resource.
   * @returns {string} A string representing the route_table.
   */
  matchRouteTableFromHubRouteName(hubRouteName: string) {
    return this.pathTemplates.hubRoutePathTemplate.match(hubRouteName).route_table;
  }

  /**
   * Parse the route from HubRoute resource.
   *
   * @param {string} hubRouteName
   *   A fully-qualified path representing HubRoute resource.
   * @returns {string} A string representing the route.
   */
  matchRouteFromHubRouteName(hubRouteName: string) {
    return this.pathTemplates.hubRoutePathTemplate.match(hubRouteName).route;
  }

  /**
   * Return a fully-qualified internalRange resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} internal_range
   * @returns {string} Resource name string.
   */
  internalRangePath(project:string,location:string,internalRange:string) {
    return this.pathTemplates.internalRangePathTemplate.render({
      project: project,
      location: location,
      internal_range: internalRange,
    });
  }

  /**
   * Parse the project from InternalRange resource.
   *
   * @param {string} internalRangeName
   *   A fully-qualified path representing InternalRange resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInternalRangeName(internalRangeName: string) {
    return this.pathTemplates.internalRangePathTemplate.match(internalRangeName).project;
  }

  /**
   * Parse the location from InternalRange resource.
   *
   * @param {string} internalRangeName
   *   A fully-qualified path representing InternalRange resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInternalRangeName(internalRangeName: string) {
    return this.pathTemplates.internalRangePathTemplate.match(internalRangeName).location;
  }

  /**
   * Parse the internal_range from InternalRange resource.
   *
   * @param {string} internalRangeName
   *   A fully-qualified path representing InternalRange resource.
   * @returns {string} A string representing the internal_range.
   */
  matchInternalRangeFromInternalRangeName(internalRangeName: string) {
    return this.pathTemplates.internalRangePathTemplate.match(internalRangeName).internal_range;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project:string,location:string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified multicloudDataTransferConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} multicloud_data_transfer_config
   * @returns {string} Resource name string.
   */
  multicloudDataTransferConfigPath(project:string,location:string,multicloudDataTransferConfig:string) {
    return this.pathTemplates.multicloudDataTransferConfigPathTemplate.render({
      project: project,
      location: location,
      multicloud_data_transfer_config: multicloudDataTransferConfig,
    });
  }

  /**
   * Parse the project from MulticloudDataTransferConfig resource.
   *
   * @param {string} multicloudDataTransferConfigName
   *   A fully-qualified path representing MulticloudDataTransferConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMulticloudDataTransferConfigName(multicloudDataTransferConfigName: string) {
    return this.pathTemplates.multicloudDataTransferConfigPathTemplate.match(multicloudDataTransferConfigName).project;
  }

  /**
   * Parse the location from MulticloudDataTransferConfig resource.
   *
   * @param {string} multicloudDataTransferConfigName
   *   A fully-qualified path representing MulticloudDataTransferConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMulticloudDataTransferConfigName(multicloudDataTransferConfigName: string) {
    return this.pathTemplates.multicloudDataTransferConfigPathTemplate.match(multicloudDataTransferConfigName).location;
  }

  /**
   * Parse the multicloud_data_transfer_config from MulticloudDataTransferConfig resource.
   *
   * @param {string} multicloudDataTransferConfigName
   *   A fully-qualified path representing MulticloudDataTransferConfig resource.
   * @returns {string} A string representing the multicloud_data_transfer_config.
   */
  matchMulticloudDataTransferConfigFromMulticloudDataTransferConfigName(multicloudDataTransferConfigName: string) {
    return this.pathTemplates.multicloudDataTransferConfigPathTemplate.match(multicloudDataTransferConfigName).multicloud_data_transfer_config;
  }

  /**
   * Return a fully-qualified multicloudDataTransferSupportedService resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} multicloud_data_transfer_supported_service
   * @returns {string} Resource name string.
   */
  multicloudDataTransferSupportedServicePath(project:string,location:string,multicloudDataTransferSupportedService:string) {
    return this.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.render({
      project: project,
      location: location,
      multicloud_data_transfer_supported_service: multicloudDataTransferSupportedService,
    });
  }

  /**
   * Parse the project from MulticloudDataTransferSupportedService resource.
   *
   * @param {string} multicloudDataTransferSupportedServiceName
   *   A fully-qualified path representing MulticloudDataTransferSupportedService resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMulticloudDataTransferSupportedServiceName(multicloudDataTransferSupportedServiceName: string) {
    return this.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match(multicloudDataTransferSupportedServiceName).project;
  }

  /**
   * Parse the location from MulticloudDataTransferSupportedService resource.
   *
   * @param {string} multicloudDataTransferSupportedServiceName
   *   A fully-qualified path representing MulticloudDataTransferSupportedService resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMulticloudDataTransferSupportedServiceName(multicloudDataTransferSupportedServiceName: string) {
    return this.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match(multicloudDataTransferSupportedServiceName).location;
  }

  /**
   * Parse the multicloud_data_transfer_supported_service from MulticloudDataTransferSupportedService resource.
   *
   * @param {string} multicloudDataTransferSupportedServiceName
   *   A fully-qualified path representing MulticloudDataTransferSupportedService resource.
   * @returns {string} A string representing the multicloud_data_transfer_supported_service.
   */
  matchMulticloudDataTransferSupportedServiceFromMulticloudDataTransferSupportedServiceName(multicloudDataTransferSupportedServiceName: string) {
    return this.pathTemplates.multicloudDataTransferSupportedServicePathTemplate.match(multicloudDataTransferSupportedServiceName).multicloud_data_transfer_supported_service;
  }

  /**
   * Return a fully-qualified policyBasedRoute resource name string.
   *
   * @param {string} project
   * @param {string} policy_based_route
   * @returns {string} Resource name string.
   */
  policyBasedRoutePath(project:string,policyBasedRoute:string) {
    return this.pathTemplates.policyBasedRoutePathTemplate.render({
      project: project,
      policy_based_route: policyBasedRoute,
    });
  }

  /**
   * Parse the project from PolicyBasedRoute resource.
   *
   * @param {string} policyBasedRouteName
   *   A fully-qualified path representing PolicyBasedRoute resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromPolicyBasedRouteName(policyBasedRouteName: string) {
    return this.pathTemplates.policyBasedRoutePathTemplate.match(policyBasedRouteName).project;
  }

  /**
   * Parse the policy_based_route from PolicyBasedRoute resource.
   *
   * @param {string} policyBasedRouteName
   *   A fully-qualified path representing PolicyBasedRoute resource.
   * @returns {string} A string representing the policy_based_route.
   */
  matchPolicyBasedRouteFromPolicyBasedRouteName(policyBasedRouteName: string) {
    return this.pathTemplates.policyBasedRoutePathTemplate.match(policyBasedRouteName).policy_based_route;
  }

  /**
   * Return a fully-qualified routeTable resource name string.
   *
   * @param {string} project
   * @param {string} hub
   * @param {string} route_table
   * @returns {string} Resource name string.
   */
  routeTablePath(project:string,hub:string,routeTable:string) {
    return this.pathTemplates.routeTablePathTemplate.render({
      project: project,
      hub: hub,
      route_table: routeTable,
    });
  }

  /**
   * Parse the project from RouteTable resource.
   *
   * @param {string} routeTableName
   *   A fully-qualified path representing RouteTable resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRouteTableName(routeTableName: string) {
    return this.pathTemplates.routeTablePathTemplate.match(routeTableName).project;
  }

  /**
   * Parse the hub from RouteTable resource.
   *
   * @param {string} routeTableName
   *   A fully-qualified path representing RouteTable resource.
   * @returns {string} A string representing the hub.
   */
  matchHubFromRouteTableName(routeTableName: string) {
    return this.pathTemplates.routeTablePathTemplate.match(routeTableName).hub;
  }

  /**
   * Parse the route_table from RouteTable resource.
   *
   * @param {string} routeTableName
   *   A fully-qualified path representing RouteTable resource.
   * @returns {string} A string representing the route_table.
   */
  matchRouteTableFromRouteTableName(routeTableName: string) {
    return this.pathTemplates.routeTablePathTemplate.match(routeTableName).route_table;
  }

  /**
   * Return a fully-qualified serviceClass resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_class
   * @returns {string} Resource name string.
   */
  serviceClassPath(project:string,location:string,serviceClass:string) {
    return this.pathTemplates.serviceClassPathTemplate.render({
      project: project,
      location: location,
      service_class: serviceClass,
    });
  }

  /**
   * Parse the project from ServiceClass resource.
   *
   * @param {string} serviceClassName
   *   A fully-qualified path representing ServiceClass resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceClassName(serviceClassName: string) {
    return this.pathTemplates.serviceClassPathTemplate.match(serviceClassName).project;
  }

  /**
   * Parse the location from ServiceClass resource.
   *
   * @param {string} serviceClassName
   *   A fully-qualified path representing ServiceClass resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceClassName(serviceClassName: string) {
    return this.pathTemplates.serviceClassPathTemplate.match(serviceClassName).location;
  }

  /**
   * Parse the service_class from ServiceClass resource.
   *
   * @param {string} serviceClassName
   *   A fully-qualified path representing ServiceClass resource.
   * @returns {string} A string representing the service_class.
   */
  matchServiceClassFromServiceClassName(serviceClassName: string) {
    return this.pathTemplates.serviceClassPathTemplate.match(serviceClassName).service_class;
  }

  /**
   * Return a fully-qualified serviceConnectionMap resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_connection_map
   * @returns {string} Resource name string.
   */
  serviceConnectionMapPath(project:string,location:string,serviceConnectionMap:string) {
    return this.pathTemplates.serviceConnectionMapPathTemplate.render({
      project: project,
      location: location,
      service_connection_map: serviceConnectionMap,
    });
  }

  /**
   * Parse the project from ServiceConnectionMap resource.
   *
   * @param {string} serviceConnectionMapName
   *   A fully-qualified path representing ServiceConnectionMap resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceConnectionMapName(serviceConnectionMapName: string) {
    return this.pathTemplates.serviceConnectionMapPathTemplate.match(serviceConnectionMapName).project;
  }

  /**
   * Parse the location from ServiceConnectionMap resource.
   *
   * @param {string} serviceConnectionMapName
   *   A fully-qualified path representing ServiceConnectionMap resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceConnectionMapName(serviceConnectionMapName: string) {
    return this.pathTemplates.serviceConnectionMapPathTemplate.match(serviceConnectionMapName).location;
  }

  /**
   * Parse the service_connection_map from ServiceConnectionMap resource.
   *
   * @param {string} serviceConnectionMapName
   *   A fully-qualified path representing ServiceConnectionMap resource.
   * @returns {string} A string representing the service_connection_map.
   */
  matchServiceConnectionMapFromServiceConnectionMapName(serviceConnectionMapName: string) {
    return this.pathTemplates.serviceConnectionMapPathTemplate.match(serviceConnectionMapName).service_connection_map;
  }

  /**
   * Return a fully-qualified serviceConnectionPolicy resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_connection_policy
   * @returns {string} Resource name string.
   */
  serviceConnectionPolicyPath(project:string,location:string,serviceConnectionPolicy:string) {
    return this.pathTemplates.serviceConnectionPolicyPathTemplate.render({
      project: project,
      location: location,
      service_connection_policy: serviceConnectionPolicy,
    });
  }

  /**
   * Parse the project from ServiceConnectionPolicy resource.
   *
   * @param {string} serviceConnectionPolicyName
   *   A fully-qualified path representing ServiceConnectionPolicy resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceConnectionPolicyName(serviceConnectionPolicyName: string) {
    return this.pathTemplates.serviceConnectionPolicyPathTemplate.match(serviceConnectionPolicyName).project;
  }

  /**
   * Parse the location from ServiceConnectionPolicy resource.
   *
   * @param {string} serviceConnectionPolicyName
   *   A fully-qualified path representing ServiceConnectionPolicy resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceConnectionPolicyName(serviceConnectionPolicyName: string) {
    return this.pathTemplates.serviceConnectionPolicyPathTemplate.match(serviceConnectionPolicyName).location;
  }

  /**
   * Parse the service_connection_policy from ServiceConnectionPolicy resource.
   *
   * @param {string} serviceConnectionPolicyName
   *   A fully-qualified path representing ServiceConnectionPolicy resource.
   * @returns {string} A string representing the service_connection_policy.
   */
  matchServiceConnectionPolicyFromServiceConnectionPolicyName(serviceConnectionPolicyName: string) {
    return this.pathTemplates.serviceConnectionPolicyPathTemplate.match(serviceConnectionPolicyName).service_connection_policy;
  }

  /**
   * Return a fully-qualified serviceConnectionToken resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} service_connection_token
   * @returns {string} Resource name string.
   */
  serviceConnectionTokenPath(project:string,location:string,serviceConnectionToken:string) {
    return this.pathTemplates.serviceConnectionTokenPathTemplate.render({
      project: project,
      location: location,
      service_connection_token: serviceConnectionToken,
    });
  }

  /**
   * Parse the project from ServiceConnectionToken resource.
   *
   * @param {string} serviceConnectionTokenName
   *   A fully-qualified path representing ServiceConnectionToken resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceConnectionTokenName(serviceConnectionTokenName: string) {
    return this.pathTemplates.serviceConnectionTokenPathTemplate.match(serviceConnectionTokenName).project;
  }

  /**
   * Parse the location from ServiceConnectionToken resource.
   *
   * @param {string} serviceConnectionTokenName
   *   A fully-qualified path representing ServiceConnectionToken resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromServiceConnectionTokenName(serviceConnectionTokenName: string) {
    return this.pathTemplates.serviceConnectionTokenPathTemplate.match(serviceConnectionTokenName).location;
  }

  /**
   * Parse the service_connection_token from ServiceConnectionToken resource.
   *
   * @param {string} serviceConnectionTokenName
   *   A fully-qualified path representing ServiceConnectionToken resource.
   * @returns {string} A string representing the service_connection_token.
   */
  matchServiceConnectionTokenFromServiceConnectionTokenName(serviceConnectionTokenName: string) {
    return this.pathTemplates.serviceConnectionTokenPathTemplate.match(serviceConnectionTokenName).service_connection_token;
  }

  /**
   * Return a fully-qualified spoke resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} spoke
   * @returns {string} Resource name string.
   */
  spokePath(project:string,location:string,spoke:string) {
    return this.pathTemplates.spokePathTemplate.render({
      project: project,
      location: location,
      spoke: spoke,
    });
  }

  /**
   * Parse the project from Spoke resource.
   *
   * @param {string} spokeName
   *   A fully-qualified path representing Spoke resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSpokeName(spokeName: string) {
    return this.pathTemplates.spokePathTemplate.match(spokeName).project;
  }

  /**
   * Parse the location from Spoke resource.
   *
   * @param {string} spokeName
   *   A fully-qualified path representing Spoke resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromSpokeName(spokeName: string) {
    return this.pathTemplates.spokePathTemplate.match(spokeName).location;
  }

  /**
   * Parse the spoke from Spoke resource.
   *
   * @param {string} spokeName
   *   A fully-qualified path representing Spoke resource.
   * @returns {string} A string representing the spoke.
   */
  matchSpokeFromSpokeName(spokeName: string) {
    return this.pathTemplates.spokePathTemplate.match(spokeName).spoke;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.dataTransferServiceStub && !this._terminated) {
      return this.dataTransferServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.iamClient.close().catch(err => {throw err});
        this.locationsClient.close().catch(err => {throw err});
        void this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}