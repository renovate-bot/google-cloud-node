// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent, resourceType, outputConfig) {
  // [START capacityplanner_v1beta_generated_UsageService_ExportUsageHistories_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The compute engine resource and location for the time series
   *  values to return. The format is:
   *     projects/{project}/locations/{location} or
   *     organizations/{organization}/locations/{location} or
   *     folders/{folder}/locations/{location}
   */
  // const parent = 'abc123'
  /**
   *  Optional. Set true to export usage for spot resources.
   */
  // const isSpot = true
  /**
   *  Optional. The machine family for the `UsageHistory` values to return.
   *  Possible values include "n1", and "n2d". See
   *  https://cloud.google.com/compute/docs/machine-types for more examples.
   */
  // const machineFamily = 'abc123'
  /**
   *  Optional. The machine shape for the time series values to export.
   */
  // const machineShape = {}
  /**
   *  Optional. The disk_type for the `UsageHistory` values to return request
   *  with persistent-disk resource_type. Possible values include "pd-ssd",
   *  "pd-standard", "pd-balanced", and "pd-extreme".
   */
  // const diskType = 'abc123'
  /**
   *  Optional. The GPU type for the `UsageHistory` values to return. Sample
   *  values are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
   *  https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
   *  will return results matching all GPUs.
   */
  // const gpuType = 'abc123'
  /**
   *  Optional. The TPU type for the `UsageHistory` values to return. Empty
   *  tpu_type will return results matching all TPUs.
   */
  // const tpuType = 'abc123'
  /**
   *  Required. The resource for the `UsageHistory` values to return. Possible
   *  values include "gce-vcpus", "gce-ram", "gce-local-ssd",
   *  "gce-persistent-disk", "gce-gpu" and "gce-tpu".
   */
  // const resourceType = 'abc123'
  /**
   *  Optional. The method that should be used to convert sampled usage data to
   *  daily usage values. AGGREGATION_METHOD_UNSPECIFIED will return results
   *  matching all the aggregation methods.
   */
  // const usageAggregationMethod = {}
  /**
   *  Optional. The start date of usage.
   */
  // const startDate = {}
  /**
   *  Optional. The end date of usage.
   */
  // const endDate = {}
  /**
   *  Required. Output configuration indicating where the results will be output
   *  to.
   */
  // const outputConfig = {}

  // Imports the Capacityplanner library
  const {UsageServiceClient} = require('@google-cloud/capacityplanner').v1beta;

  // Instantiates a client
  const capacityplannerClient = new UsageServiceClient();

  async function callExportUsageHistories() {
    // Construct request
    const request = {
      parent,
      resourceType,
      outputConfig,
    };

    // Run request
    const [operation] = await capacityplannerClient.exportUsageHistories(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callExportUsageHistories();
  // [END capacityplanner_v1beta_generated_UsageService_ExportUsageHistories_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
