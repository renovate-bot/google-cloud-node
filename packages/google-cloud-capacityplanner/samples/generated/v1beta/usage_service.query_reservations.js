// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(parent) {
  // [START capacityplanner_v1beta_generated_UsageService_QueryReservations_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The compute engine resource and location for the time series
   *  values to return. The format is:
   *  projects/{project}/locations/{location} or
   *  organizations/{organization}/locations/{location} or
   *  folders/{folder}/locations/{location}
   */
  // const parent = 'abc123'
  /**
   *  Optional. The location level of the reservations usage timeseries.
   */
  // const locationLevel = {}
  /**
   *  Optional. The machine family to use to select the aggregate reserved values
   *  to return. Possible values include "n1", and "n2d" etc. Empty
   *  machine_family will return results matching all machine families.
   */
  // const machineFamily = 'abc123'
  /**
   *  Optional. The machine_shape as a filter to select matching reservations.
   */
  // const machineShape = {}
  /**
   *  Optional. The GPU type for the reserved values to return. Sample values
   *  are "nvidia-tesla-t4", and "nvidia-tesla-a100". See
   *  https://cloud.google.com/compute/docs/gpus for a list. Empty gpu_type
   *  will return results matching all GPUs.
   */
  // const gpuType = 'abc123'
  /**
   *  Optional. The resource for the reserved values to return. Possible values
   *  include "gce-vcpus", "gce-ram", "gce-local-ssd", "gce-gpu" and "gce-vm".
   */
  // const cloudResourceType = 'abc123'
  /**
   *  Optional. The Reservation type for example, future reservation request and
   *  allocation. If unspecified, all types are
   *  included.
   */
  // const reservationType = {}
  /**
   *  Optional. Types of share settings to filter reservations in response. If
   *  unspecified, all types are included.
   */
  // const shareType = {}
  /**
   *  Optional. Types of ownerships to filter reservations based on.
   *  In case of OWNED, it filters reservations which are owned by selected
   *  parent project/folder/organization. If unspecified, all types are
   *  included.
   */
  // const ownershipType = {}
  /**
   *  Optional. Reservations output data format.
   */
  // const reservationDataLevel = {}
  /**
   *  Optional. Whether to include pending for approval reservations in the
   *  response. This field is only applicable for future reservations.
   */
  // const includeUnapprovedReservations = true
  /**
   *  Optional. Aggregation Method of the historical reservation usage
   */
  // const aggregationMethod = {}
  /**
   *  Optional. The start date of reservations usage.
   */
  // const startDate = {}
  /**
   *  Optional. The end date of reservations usage.
   */
  // const endDate = {}

  // Imports the Capacityplanner library
  const {UsageServiceClient} = require('@google-cloud/capacityplanner').v1beta;

  // Instantiates a client
  const capacityplannerClient = new UsageServiceClient();

  async function callQueryReservations() {
    // Construct request
    const request = {
      parent,
    };

    // Run request
    const response = await capacityplannerClient.queryReservations(request);
    console.log(response);
  }

  callQueryReservations();
  // [END capacityplanner_v1beta_generated_UsageService_QueryReservations_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
