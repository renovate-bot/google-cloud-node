// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as usageserviceModule from '../src';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

describe('v1beta.UsageServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'capacityplanner.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = usageserviceModule.v1beta.UsageServiceClient.servicePath;
                assert.strictEqual(servicePath, 'capacityplanner.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = usageserviceModule.v1beta.UsageServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'capacityplanner.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'capacityplanner.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'capacityplanner.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new usageserviceModule.v1beta.UsageServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'capacityplanner.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new usageserviceModule.v1beta.UsageServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'capacityplanner.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new usageserviceModule.v1beta.UsageServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = usageserviceModule.v1beta.UsageServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.usageServiceStub, undefined);
            await client.initialize();
            assert(client.usageServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize().catch(err => {throw err});
            assert(client.usageServiceStub);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has close method for the non-initialized client', done => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.usageServiceStub, undefined);
            client.close().then(() => {
                done();
            }).catch(err => {throw err});
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('queryUsageHistories', () => {
        it('invokes queryUsageHistories without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesResponse()
            );
            client.innerApiCalls.queryUsageHistories = stubSimpleCall(expectedResponse);
            const [response] = await client.queryUsageHistories(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryUsageHistories without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesResponse()
            );
            client.innerApiCalls.queryUsageHistories = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryUsageHistories(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.capacityplanner.v1beta.IQueryUsageHistoriesResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryUsageHistories with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryUsageHistories = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryUsageHistories(request), expectedError);
            const actualRequest = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryUsageHistories with closed client', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.queryUsageHistories(request), expectedError);
        });
    });

    describe('queryForecasts', () => {
        it('invokes queryForecasts without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsResponse()
            );
            client.innerApiCalls.queryForecasts = stubSimpleCall(expectedResponse);
            const [response] = await client.queryForecasts(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryForecasts without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsResponse()
            );
            client.innerApiCalls.queryForecasts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryForecasts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.capacityplanner.v1beta.IQueryForecastsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryForecasts with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryForecasts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryForecasts(request), expectedError);
            const actualRequest = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryForecasts with closed client', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.queryForecasts(request), expectedError);
        });
    });

    describe('queryReservations', () => {
        it('invokes queryReservations without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryReservationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsResponse()
            );
            client.innerApiCalls.queryReservations = stubSimpleCall(expectedResponse);
            const [response] = await client.queryReservations(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryReservations without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryReservationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsResponse()
            );
            client.innerApiCalls.queryReservations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.queryReservations(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.capacityplanner.v1beta.IQueryReservationsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryReservations with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryReservationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.queryReservations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.queryReservations(request), expectedError);
            const actualRequest = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.queryReservations as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes queryReservations with closed client', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.QueryReservationsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.QueryReservationsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close().catch(err => {throw err});
            await assert.rejects(client.queryReservations(request), expectedError);
        });
    });

    describe('exportUsageHistories', () => {
        it('invokes exportUsageHistories without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportUsageHistories = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportUsageHistories(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportUsageHistories without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportUsageHistories = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportUsageHistories(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.capacityplanner.v1beta.IExportUsageHistoriesResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.capacityplanner.v1beta.IExportUsageHistoriesResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportUsageHistories with call error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportUsageHistories = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportUsageHistories(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportUsageHistories with LRO error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportUsageHistoriesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportUsageHistories = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportUsageHistories(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportUsageHistories as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportUsageHistoriesProgress without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportUsageHistoriesProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportUsageHistoriesProgress with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportUsageHistoriesProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportForecasts', () => {
        it('invokes exportForecasts without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportForecasts = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportForecasts(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportForecasts without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportForecasts = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportForecasts(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.capacityplanner.v1beta.IExportForecastsResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.capacityplanner.v1beta.IExportForecastsResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportForecasts with call error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportForecasts = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportForecasts(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportForecasts with LRO error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportForecastsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportForecastsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportForecasts = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportForecasts(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportForecasts as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportForecastsProgress without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportForecastsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportForecastsProgress with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportForecastsProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('exportReservationsUsage', () => {
        it('invokes exportReservationsUsage without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportReservationsUsage = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportReservationsUsage(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportReservationsUsage without error using callback', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedResponse = generateSampleMessage(
              new protos.google.longrunning.Operation()
            );
            client.innerApiCalls.exportReservationsUsage = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.exportReservationsUsage(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.capacityplanner.v1beta.IExportReservationsUsageResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.capacityplanner.v1beta.IExportReservationsUsageResponse, protos.google.cloud.capacityplanner.v1beta.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportReservationsUsage with call error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportReservationsUsage = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportReservationsUsage(request), expectedError);
            const actualRequest = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes exportReservationsUsage with LRO error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const request = generateSampleMessage(
              new protos.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.cloud.capacityplanner.v1beta.ExportReservationsUsageRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1 ?? '' }`;
            const expectedError = new Error('expected');
            client.innerApiCalls.exportReservationsUsage = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportReservationsUsage(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.exportReservationsUsage as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes checkExportReservationsUsageProgress without error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedResponse = generateSampleMessage(
              new operationsProtos.google.longrunning.Operation()
            );
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportReservationsUsageProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkExportReservationsUsageProgress with error', async () => {
            const client = new usageserviceModule.v1beta.UsageServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            await client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportReservationsUsageProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('Path templates', () => {

        describe('capacityPlan', async () => {
            const fakePath = "/rendered/path/capacityPlan";
            const expectedParameters = {
                project: "projectValue",
                capacity_plan: "capacityPlanValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.capacityPlanPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.capacityPlanPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('capacityPlanPath', () => {
                const result = client.capacityPlanPath("projectValue", "capacityPlanValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.capacityPlanPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromCapacityPlanName', () => {
                const result = client.matchProjectFromCapacityPlanName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.capacityPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCapacityPlanFromCapacityPlanName', () => {
                const result = client.matchCapacityPlanFromCapacityPlanName(fakePath);
                assert.strictEqual(result, "capacityPlanValue");
                assert((client.pathTemplates.capacityPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderLocationForecasts', async () => {
            const fakePath = "/rendered/path/folderLocationForecasts";
            const expectedParameters = {
                folder: "folderValue",
                location: "locationValue",
                forecast: "forecastValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.folderLocationForecastsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderLocationForecastsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderLocationForecastsPath', () => {
                const result = client.folderLocationForecastsPath("folderValue", "locationValue", "forecastValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderLocationForecastsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderLocationForecastsName', () => {
                const result = client.matchFolderFromFolderLocationForecastsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFolderLocationForecastsName', () => {
                const result = client.matchLocationFromFolderLocationForecastsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.folderLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchForecastFromFolderLocationForecastsName', () => {
                const result = client.matchForecastFromFolderLocationForecastsName(fakePath);
                assert.strictEqual(result, "forecastValue");
                assert((client.pathTemplates.folderLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('folderLocationReservations', async () => {
            const fakePath = "/rendered/path/folderLocationReservations";
            const expectedParameters = {
                folder: "folderValue",
                location: "locationValue",
                reservation: "reservationValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.folderLocationReservationsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.folderLocationReservationsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('folderLocationReservationsPath', () => {
                const result = client.folderLocationReservationsPath("folderValue", "locationValue", "reservationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.folderLocationReservationsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchFolderFromFolderLocationReservationsName', () => {
                const result = client.matchFolderFromFolderLocationReservationsName(fakePath);
                assert.strictEqual(result, "folderValue");
                assert((client.pathTemplates.folderLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromFolderLocationReservationsName', () => {
                const result = client.matchLocationFromFolderLocationReservationsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.folderLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReservationFromFolderLocationReservationsName', () => {
                const result = client.matchReservationFromFolderLocationReservationsName(fakePath);
                assert.strictEqual(result, "reservationValue");
                assert((client.pathTemplates.folderLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', async () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationLocationForecasts', async () => {
            const fakePath = "/rendered/path/organizationLocationForecasts";
            const expectedParameters = {
                organization: "organizationValue",
                location: "locationValue",
                forecast: "forecastValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.organizationLocationForecastsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationLocationForecastsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationLocationForecastsPath', () => {
                const result = client.organizationLocationForecastsPath("organizationValue", "locationValue", "forecastValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationLocationForecastsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationLocationForecastsName', () => {
                const result = client.matchOrganizationFromOrganizationLocationForecastsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOrganizationLocationForecastsName', () => {
                const result = client.matchLocationFromOrganizationLocationForecastsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.organizationLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchForecastFromOrganizationLocationForecastsName', () => {
                const result = client.matchForecastFromOrganizationLocationForecastsName(fakePath);
                assert.strictEqual(result, "forecastValue");
                assert((client.pathTemplates.organizationLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('organizationLocationReservations', async () => {
            const fakePath = "/rendered/path/organizationLocationReservations";
            const expectedParameters = {
                organization: "organizationValue",
                location: "locationValue",
                reservation: "reservationValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.organizationLocationReservationsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.organizationLocationReservationsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('organizationLocationReservationsPath', () => {
                const result = client.organizationLocationReservationsPath("organizationValue", "locationValue", "reservationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.organizationLocationReservationsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchOrganizationFromOrganizationLocationReservationsName', () => {
                const result = client.matchOrganizationFromOrganizationLocationReservationsName(fakePath);
                assert.strictEqual(result, "organizationValue");
                assert((client.pathTemplates.organizationLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromOrganizationLocationReservationsName', () => {
                const result = client.matchLocationFromOrganizationLocationReservationsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.organizationLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReservationFromOrganizationLocationReservationsName', () => {
                const result = client.matchReservationFromOrganizationLocationReservationsName(fakePath);
                assert.strictEqual(result, "reservationValue");
                assert((client.pathTemplates.organizationLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationForecasts', async () => {
            const fakePath = "/rendered/path/projectLocationForecasts";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                forecast: "forecastValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectLocationForecastsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationForecastsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationForecastsPath', () => {
                const result = client.projectLocationForecastsPath("projectValue", "locationValue", "forecastValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationForecastsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationForecastsName', () => {
                const result = client.matchProjectFromProjectLocationForecastsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationForecastsName', () => {
                const result = client.matchLocationFromProjectLocationForecastsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchForecastFromProjectLocationForecastsName', () => {
                const result = client.matchForecastFromProjectLocationForecastsName(fakePath);
                assert.strictEqual(result, "forecastValue");
                assert((client.pathTemplates.projectLocationForecastsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('projectLocationReservations', async () => {
            const fakePath = "/rendered/path/projectLocationReservations";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                reservation: "reservationValue",
            };
            const client = new usageserviceModule.v1beta.UsageServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            await client.initialize();
            client.pathTemplates.projectLocationReservationsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectLocationReservationsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectLocationReservationsPath', () => {
                const result = client.projectLocationReservationsPath("projectValue", "locationValue", "reservationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectLocationReservationsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectLocationReservationsName', () => {
                const result = client.matchProjectFromProjectLocationReservationsName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromProjectLocationReservationsName', () => {
                const result = client.matchLocationFromProjectLocationReservationsName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.projectLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReservationFromProjectLocationReservationsName', () => {
                const result = client.matchReservationFromProjectLocationReservationsName(fakePath);
                assert.strictEqual(result, "reservationValue");
                assert((client.pathTemplates.projectLocationReservationsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
