// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1beta/capacity_planning_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './capacity_planning_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  This API allows users to plan for GCP capacity associated with their
 *  projects. Users can request additional capacity for GCP resources such as
 *  VMs, PDs, etc.
 * @class
 * @memberof v1beta
 */
export class CapacityPlanningServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('capacityplanner');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  capacityPlanningServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CapacityPlanningServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new CapacityPlanningServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CapacityPlanningServiceClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'capacityplanner.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      capacityPlanPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/capacityPlans/{capacity_plan}'
      ),
      folderLocationForecastsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/forecasts/{forecast}'
      ),
      folderLocationReservationsPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/reservations/{reservation}'
      ),
      organizationLocationForecastsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/forecasts/{forecast}'
      ),
      organizationLocationReservationsPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/reservations/{reservation}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationForecastsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/forecasts/{forecast}'
      ),
      projectLocationReservationsPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/reservations/{reservation}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      queryCapacityPlans:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'capacityPlans')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.capacityplanner.v1beta.CapacityPlanningService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.capacityPlanningServiceStub) {
      return this.capacityPlanningServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.capacityplanner.v1beta.CapacityPlanningService.
    this.capacityPlanningServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.capacityplanner.v1beta.CapacityPlanningService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.capacityplanner.v1beta.CapacityPlanningService,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const capacityPlanningServiceStubMethods =
        ['getCapacityPlan', 'queryCapacityPlans', 'queryCapacityPlanInsights'];
    for (const methodName of capacityPlanningServiceStubMethods) {
      const callPromise = this.capacityPlanningServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.capacityPlanningServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'capacityplanner.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'capacityplanner.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/devstorage.full_control'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Returns information about the capacity plan.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the capacity plan to retrieve.
 *   Format: projects/{project}/capacityPlans/{capacity_plan}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.capacityplanner.v1beta.CapacityPlan|CapacityPlan}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/capacity_planning_service.get_capacity_plan.js</caption>
 * region_tag:capacityplanner_v1beta_generated_CapacityPlanningService_GetCapacityPlan_async
 */
  getCapacityPlan(
      request?: protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
        protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|undefined, {}|undefined
      ]>;
  getCapacityPlan(
      request: protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
          protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|null|undefined,
          {}|null|undefined>): void;
  getCapacityPlan(
      request: protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest,
      callback: Callback<
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
          protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|null|undefined,
          {}|null|undefined>): void;
  getCapacityPlan(
      request?: protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
          protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
          protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
        protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCapacityPlan request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
        protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCapacityPlan response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCapacityPlan(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan,
        protos.google.cloud.capacityplanner.v1beta.IGetCapacityPlanRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCapacityPlan response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Query capacity plan insights that are in the parent parameter and match
 * your specified filters.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource container.
 *   Format: projects/{project}
 * @param {google.cloud.capacityplanner.v1beta.CapacityPlanFilters} request.capacityPlanFilters
 *   Required. The filters to apply to the capacity plan.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.capacityplanner.v1beta.QueryCapacityPlanInsightsResponse|QueryCapacityPlanInsightsResponse}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/capacity_planning_service.query_capacity_plan_insights.js</caption>
 * region_tag:capacityplanner_v1beta_generated_CapacityPlanningService_QueryCapacityPlanInsights_async
 */
  queryCapacityPlanInsights(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|undefined, {}|undefined
      ]>;
  queryCapacityPlanInsights(
      request: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|null|undefined,
          {}|null|undefined>): void;
  queryCapacityPlanInsights(
      request: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest,
      callback: Callback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|null|undefined,
          {}|null|undefined>): void;
  queryCapacityPlanInsights(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('queryCapacityPlanInsights request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('queryCapacityPlanInsights response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.queryCapacityPlanInsights(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsResponse,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlanInsightsRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('queryCapacityPlanInsights response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

 /**
 * Returns a list of the capacity plans that are in the parent parameter and
 * match your specified filters.
 * (The maximum list length is limited by the pageSize parameter.)
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource container.
 *   Format:
 *           projects/{project} or
 *           folders/{folder} or
 *           organizations/{organization}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of plans to return per page. The service may
 *   return fewer than this value. If unspecified, the server will use a
 *   sensible default. The maximum value is 1000; values above 1000 will be
 *   coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `QueryCapacityPlans` call.
 *   Provide this to retrieve the subsequent page.
 * @param {string} [request.location]
 *   Optional. The Google Cloud Platform location of capacity plans. If
 *   unspecified, all locations will be included.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.capacityplanner.v1beta.CapacityPlan|CapacityPlan}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `queryCapacityPlansAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  queryCapacityPlans(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan[],
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest|null,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse
      ]>;
  queryCapacityPlans(
      request: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse|null|undefined,
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>): void;
  queryCapacityPlans(
      request: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      callback: PaginationCallback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse|null|undefined,
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>): void;
  queryCapacityPlans(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse|null|undefined,
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>,
      callback?: PaginationCallback<
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
          protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse|null|undefined,
          protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>):
      Promise<[
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan[],
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest|null,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse|null|undefined,
      protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('queryCapacityPlans values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('queryCapacityPlans request %j', request);
    return this.innerApiCalls
      .queryCapacityPlans(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.capacityplanner.v1beta.ICapacityPlan[],
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest|null,
        protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansResponse
      ]) => {
        this._log.info('queryCapacityPlans values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `queryCapacityPlans`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource container.
 *   Format:
 *           projects/{project} or
 *           folders/{folder} or
 *           organizations/{organization}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of plans to return per page. The service may
 *   return fewer than this value. If unspecified, the server will use a
 *   sensible default. The maximum value is 1000; values above 1000 will be
 *   coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `QueryCapacityPlans` call.
 *   Provide this to retrieve the subsequent page.
 * @param {string} [request.location]
 *   Optional. The Google Cloud Platform location of capacity plans. If
 *   unspecified, all locations will be included.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.capacityplanner.v1beta.CapacityPlan|CapacityPlan} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `queryCapacityPlansAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  queryCapacityPlansStream(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['queryCapacityPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('queryCapacityPlans stream %j', request);
    return this.descriptors.page.queryCapacityPlans.createStream(
      this.innerApiCalls.queryCapacityPlans as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `queryCapacityPlans`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource container.
 *   Format:
 *           projects/{project} or
 *           folders/{folder} or
 *           organizations/{organization}
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of plans to return per page. The service may
 *   return fewer than this value. If unspecified, the server will use a
 *   sensible default. The maximum value is 1000; values above 1000 will be
 *   coerced to 1000.
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `QueryCapacityPlans` call.
 *   Provide this to retrieve the subsequent page.
 * @param {string} [request.location]
 *   Optional. The Google Cloud Platform location of capacity plans. If
 *   unspecified, all locations will be included.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.capacityplanner.v1beta.CapacityPlan|CapacityPlan}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1beta/capacity_planning_service.query_capacity_plans.js</caption>
 * region_tag:capacityplanner_v1beta_generated_CapacityPlanningService_QueryCapacityPlans_async
 */
  queryCapacityPlansAsync(
      request?: protos.google.cloud.capacityplanner.v1beta.IQueryCapacityPlansRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['queryCapacityPlans'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('queryCapacityPlans iterate %j', request);
    return this.descriptors.page.queryCapacityPlans.asyncIterate(
      this.innerApiCalls['queryCapacityPlans'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.capacityplanner.v1beta.ICapacityPlan>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified capacityPlan resource name string.
   *
   * @param {string} project
   * @param {string} capacity_plan
   * @returns {string} Resource name string.
   */
  capacityPlanPath(project:string,capacityPlan:string) {
    return this.pathTemplates.capacityPlanPathTemplate.render({
      project: project,
      capacity_plan: capacityPlan,
    });
  }

  /**
   * Parse the project from CapacityPlan resource.
   *
   * @param {string} capacityPlanName
   *   A fully-qualified path representing CapacityPlan resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCapacityPlanName(capacityPlanName: string) {
    return this.pathTemplates.capacityPlanPathTemplate.match(capacityPlanName).project;
  }

  /**
   * Parse the capacity_plan from CapacityPlan resource.
   *
   * @param {string} capacityPlanName
   *   A fully-qualified path representing CapacityPlan resource.
   * @returns {string} A string representing the capacity_plan.
   */
  matchCapacityPlanFromCapacityPlanName(capacityPlanName: string) {
    return this.pathTemplates.capacityPlanPathTemplate.match(capacityPlanName).capacity_plan;
  }

  /**
   * Return a fully-qualified folderLocationForecasts resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} forecast
   * @returns {string} Resource name string.
   */
  folderLocationForecastsPath(folder:string,location:string,forecast:string) {
    return this.pathTemplates.folderLocationForecastsPathTemplate.render({
      folder: folder,
      location: location,
      forecast: forecast,
    });
  }

  /**
   * Parse the folder from FolderLocationForecasts resource.
   *
   * @param {string} folderLocationForecastsName
   *   A fully-qualified path representing folder_location_forecasts resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationForecastsName(folderLocationForecastsName: string) {
    return this.pathTemplates.folderLocationForecastsPathTemplate.match(folderLocationForecastsName).folder;
  }

  /**
   * Parse the location from FolderLocationForecasts resource.
   *
   * @param {string} folderLocationForecastsName
   *   A fully-qualified path representing folder_location_forecasts resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationForecastsName(folderLocationForecastsName: string) {
    return this.pathTemplates.folderLocationForecastsPathTemplate.match(folderLocationForecastsName).location;
  }

  /**
   * Parse the forecast from FolderLocationForecasts resource.
   *
   * @param {string} folderLocationForecastsName
   *   A fully-qualified path representing folder_location_forecasts resource.
   * @returns {string} A string representing the forecast.
   */
  matchForecastFromFolderLocationForecastsName(folderLocationForecastsName: string) {
    return this.pathTemplates.folderLocationForecastsPathTemplate.match(folderLocationForecastsName).forecast;
  }

  /**
   * Return a fully-qualified folderLocationReservations resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} reservation
   * @returns {string} Resource name string.
   */
  folderLocationReservationsPath(folder:string,location:string,reservation:string) {
    return this.pathTemplates.folderLocationReservationsPathTemplate.render({
      folder: folder,
      location: location,
      reservation: reservation,
    });
  }

  /**
   * Parse the folder from FolderLocationReservations resource.
   *
   * @param {string} folderLocationReservationsName
   *   A fully-qualified path representing folder_location_reservations resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationReservationsName(folderLocationReservationsName: string) {
    return this.pathTemplates.folderLocationReservationsPathTemplate.match(folderLocationReservationsName).folder;
  }

  /**
   * Parse the location from FolderLocationReservations resource.
   *
   * @param {string} folderLocationReservationsName
   *   A fully-qualified path representing folder_location_reservations resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationReservationsName(folderLocationReservationsName: string) {
    return this.pathTemplates.folderLocationReservationsPathTemplate.match(folderLocationReservationsName).location;
  }

  /**
   * Parse the reservation from FolderLocationReservations resource.
   *
   * @param {string} folderLocationReservationsName
   *   A fully-qualified path representing folder_location_reservations resource.
   * @returns {string} A string representing the reservation.
   */
  matchReservationFromFolderLocationReservationsName(folderLocationReservationsName: string) {
    return this.pathTemplates.folderLocationReservationsPathTemplate.match(folderLocationReservationsName).reservation;
  }

  /**
   * Return a fully-qualified organizationLocationForecasts resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} forecast
   * @returns {string} Resource name string.
   */
  organizationLocationForecastsPath(organization:string,location:string,forecast:string) {
    return this.pathTemplates.organizationLocationForecastsPathTemplate.render({
      organization: organization,
      location: location,
      forecast: forecast,
    });
  }

  /**
   * Parse the organization from OrganizationLocationForecasts resource.
   *
   * @param {string} organizationLocationForecastsName
   *   A fully-qualified path representing organization_location_forecasts resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationForecastsName(organizationLocationForecastsName: string) {
    return this.pathTemplates.organizationLocationForecastsPathTemplate.match(organizationLocationForecastsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationForecasts resource.
   *
   * @param {string} organizationLocationForecastsName
   *   A fully-qualified path representing organization_location_forecasts resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationForecastsName(organizationLocationForecastsName: string) {
    return this.pathTemplates.organizationLocationForecastsPathTemplate.match(organizationLocationForecastsName).location;
  }

  /**
   * Parse the forecast from OrganizationLocationForecasts resource.
   *
   * @param {string} organizationLocationForecastsName
   *   A fully-qualified path representing organization_location_forecasts resource.
   * @returns {string} A string representing the forecast.
   */
  matchForecastFromOrganizationLocationForecastsName(organizationLocationForecastsName: string) {
    return this.pathTemplates.organizationLocationForecastsPathTemplate.match(organizationLocationForecastsName).forecast;
  }

  /**
   * Return a fully-qualified organizationLocationReservations resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} reservation
   * @returns {string} Resource name string.
   */
  organizationLocationReservationsPath(organization:string,location:string,reservation:string) {
    return this.pathTemplates.organizationLocationReservationsPathTemplate.render({
      organization: organization,
      location: location,
      reservation: reservation,
    });
  }

  /**
   * Parse the organization from OrganizationLocationReservations resource.
   *
   * @param {string} organizationLocationReservationsName
   *   A fully-qualified path representing organization_location_reservations resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationReservationsName(organizationLocationReservationsName: string) {
    return this.pathTemplates.organizationLocationReservationsPathTemplate.match(organizationLocationReservationsName).organization;
  }

  /**
   * Parse the location from OrganizationLocationReservations resource.
   *
   * @param {string} organizationLocationReservationsName
   *   A fully-qualified path representing organization_location_reservations resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationReservationsName(organizationLocationReservationsName: string) {
    return this.pathTemplates.organizationLocationReservationsPathTemplate.match(organizationLocationReservationsName).location;
  }

  /**
   * Parse the reservation from OrganizationLocationReservations resource.
   *
   * @param {string} organizationLocationReservationsName
   *   A fully-qualified path representing organization_location_reservations resource.
   * @returns {string} A string representing the reservation.
   */
  matchReservationFromOrganizationLocationReservationsName(organizationLocationReservationsName: string) {
    return this.pathTemplates.organizationLocationReservationsPathTemplate.match(organizationLocationReservationsName).reservation;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationForecasts resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} forecast
   * @returns {string} Resource name string.
   */
  projectLocationForecastsPath(project:string,location:string,forecast:string) {
    return this.pathTemplates.projectLocationForecastsPathTemplate.render({
      project: project,
      location: location,
      forecast: forecast,
    });
  }

  /**
   * Parse the project from ProjectLocationForecasts resource.
   *
   * @param {string} projectLocationForecastsName
   *   A fully-qualified path representing project_location_forecasts resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationForecastsName(projectLocationForecastsName: string) {
    return this.pathTemplates.projectLocationForecastsPathTemplate.match(projectLocationForecastsName).project;
  }

  /**
   * Parse the location from ProjectLocationForecasts resource.
   *
   * @param {string} projectLocationForecastsName
   *   A fully-qualified path representing project_location_forecasts resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationForecastsName(projectLocationForecastsName: string) {
    return this.pathTemplates.projectLocationForecastsPathTemplate.match(projectLocationForecastsName).location;
  }

  /**
   * Parse the forecast from ProjectLocationForecasts resource.
   *
   * @param {string} projectLocationForecastsName
   *   A fully-qualified path representing project_location_forecasts resource.
   * @returns {string} A string representing the forecast.
   */
  matchForecastFromProjectLocationForecastsName(projectLocationForecastsName: string) {
    return this.pathTemplates.projectLocationForecastsPathTemplate.match(projectLocationForecastsName).forecast;
  }

  /**
   * Return a fully-qualified projectLocationReservations resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} reservation
   * @returns {string} Resource name string.
   */
  projectLocationReservationsPath(project:string,location:string,reservation:string) {
    return this.pathTemplates.projectLocationReservationsPathTemplate.render({
      project: project,
      location: location,
      reservation: reservation,
    });
  }

  /**
   * Parse the project from ProjectLocationReservations resource.
   *
   * @param {string} projectLocationReservationsName
   *   A fully-qualified path representing project_location_reservations resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationReservationsName(projectLocationReservationsName: string) {
    return this.pathTemplates.projectLocationReservationsPathTemplate.match(projectLocationReservationsName).project;
  }

  /**
   * Parse the location from ProjectLocationReservations resource.
   *
   * @param {string} projectLocationReservationsName
   *   A fully-qualified path representing project_location_reservations resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationReservationsName(projectLocationReservationsName: string) {
    return this.pathTemplates.projectLocationReservationsPathTemplate.match(projectLocationReservationsName).location;
  }

  /**
   * Parse the reservation from ProjectLocationReservations resource.
   *
   * @param {string} projectLocationReservationsName
   *   A fully-qualified path representing project_location_reservations resource.
   * @returns {string} A string representing the reservation.
   */
  matchReservationFromProjectLocationReservationsName(projectLocationReservationsName: string) {
    return this.pathTemplates.projectLocationReservationsPathTemplate.match(projectLocationReservationsName).reservation;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.capacityPlanningServiceStub && !this._terminated) {
      return this.capacityPlanningServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}