// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall, LocationsClient, LocationProtos} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging, decodeAnyProtosInArray} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/config_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './config_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Config Service manages compliance frameworks, cloud controls, and their
 *  configurations.
 * @class
 * @memberof v1
 */
export class ConfigClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('cloudsecuritycompliance');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  configStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ConfigClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ConfigClient({fallback: true}, gax);
   *     ```
   */
  constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ConfigClient;
    if (opts?.universe_domain && opts?.universeDomain && opts?.universe_domain !== opts?.universeDomain) {
      throw new Error('Please set either universe_domain or universeDomain, but not both.');
    }
    const universeDomainEnvVar = (typeof process === 'object' && typeof process.env === 'object') ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] : undefined;
    this._universeDomain = opts?.universeDomain ?? opts?.universe_domain ?? universeDomainEnvVar ?? 'googleapis.com';
    this._servicePath = 'cloudsecuritycompliance.' + this._universeDomain;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );
  

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      cloudControlPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/cloudControls/{cloud_control}'
      ),
      cloudControlDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/cloudControlDeployments/{cloud_control_deployment}'
      ),
      frameworkPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/frameworks/{framework}'
      ),
      frameworkDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}/frameworkDeployments/{framework_deployment}'
      ),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      organizationLocationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}/locations/{location}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listFrameworks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'frameworks'),
      listCloudControls:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'cloudControls')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.cloudsecuritycompliance.v1.Config', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.configStub) {
      return this.configStub;
    }

    // Put together the "service stub" for
    // google.cloud.cloudsecuritycompliance.v1.Config.
    this.configStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.cloudsecuritycompliance.v1.Config') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.cloudsecuritycompliance.v1.Config,
        this._opts, this._providedCustomServicePath) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const configStubMethods =
        ['listFrameworks', 'getFramework', 'createFramework', 'updateFramework', 'deleteFramework', 'listCloudControls', 'getCloudControl', 'createCloudControl', 'updateCloudControl', 'deleteCloudControl'];
    for (const methodName of configStubMethods) {
      const callPromise = this.configStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.configStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'cloudsecuritycompliance.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (typeof process === 'object' && typeof process.emitWarning === 'function') {
      process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
    }
    return 'cloudsecuritycompliance.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
/**
 * Gets details of a single Framework.
 * This method retrieves a Framework resource, which can be either Built-in or
 * Custom, identified by its name.
 *
 * By default, the latest major version of the Framework is returned.
 * A specific major version can be retrieved by specifying the
 * `major_revision_id` in the request.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the framework to retrieve.
 *   Format:
 *   organizations/{organization}/locations/{location}/frameworks/{framework_id}
 * @param {number} [request.majorRevisionId]
 *   Optional. The Framework major version to retrieve. If not specified, the
 *   most recently updated revision_id is retrieved.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.get_framework.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_GetFramework_async
 */
  getFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|undefined, {}|undefined
      ]>;
  getFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  getFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  getFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getFramework request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getFramework response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getFramework(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetFrameworkRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getFramework response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a new Framework with type `Custom` under a given parent resource.
 * Frameworks with type `Built-in` are managed by Google and cannot be created
 * through this API.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 * @param {string} request.frameworkId
 *   Required. ID of the framework.
 *   This is not the full name of the framework.
 *   This is the last part of the full name of the framework.
 * @param {google.cloud.cloudsecuritycompliance.v1.Framework} request.framework
 *   Required. The resource being created
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.create_framework.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_CreateFramework_async
 */
  createFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|undefined, {}|undefined
      ]>;
  createFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  createFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  createFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createFramework request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createFramework response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createFramework(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateFrameworkRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createFramework response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a single Framework.
 * This method allows for partial updates of a Framework resource. The fields
 * to be updated are specified using the `update_mask`.
 *
 * - If an `update_mask` is provided, only the fields specified in the mask
 * will be updated.
 * - If no `update_mask` is provided, all fields present in the request's
 * `framework` body will be used to overwrite the existing resource.
 *
 * This operation can only be performed on Frameworks with type `CUSTOM`.
 * A successful update will result in a new version of the Framework.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   Framework resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields present in the request will be
 *   overwritten.
 * @param {google.cloud.cloudsecuritycompliance.v1.Framework} request.framework
 *   Required. The resource being updated
 * @param {number} [request.majorRevisionId]
 *   Optional. The major version ID of the framework to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.update_framework.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_UpdateFramework_async
 */
  updateFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|undefined, {}|undefined
      ]>;
  updateFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  updateFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  updateFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'framework.name': request.framework!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateFramework request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateFramework response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateFramework(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateFrameworkRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateFramework response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a single Custom Framework, including all its minor and
 * minor revisions.
 *
 * - This operation can only be performed on Frameworks with type `CUSTOM`.
 *   Built-in Frameworks cannot be deleted.
 * - The Framework cannot be deleted if it is currently deployed on any
 *   resource.
 * - This action is permanent and cannot be undone.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource, in the format
 *   `organizations/{organization}/locations/{location}/frameworks/{framework}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.delete_framework.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_DeleteFramework_async
 */
  deleteFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|undefined, {}|undefined
      ]>;
  deleteFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteFramework(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteFramework(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteFramework request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteFramework response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteFramework(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteFrameworkRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteFramework response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Gets details of a single CloudControl.
 * This method retrieves a CloudControl resource, which can be either Built-in
 * or Custom, identified by its name.
 *
 * By default, the latest major version of the CloudControl is returned.
 * A specific major version can be retrieved by specifying the
 * `major_revision_id` in the request.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the cloudcontrol to retrieve in the format:
 *   organizations/{organization}/locations/{location}/cloudControls/{cloud_control}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.get_cloud_control.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_GetCloudControl_async
 */
  getCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|undefined, {}|undefined
      ]>;
  getCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  getCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('getCloudControl request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getCloudControl response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.getCloudControl(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IGetCloudControlRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('getCloudControl response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Creates a new CloudControl with type `Custom` under a given parent
 * resource. `Built-in` CloudControls are managed by Google and cannot be
 * created through this API.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 * @param {string} request.cloudControlId
 *   Required. ID of the CloudControl.
 *   This is the last segment of the CloudControl resource name.
 *   Format: `^{@link protos.a-zA-Z0-9-|a-zA-Z}{0,61}[a-zA-Z0-9]$`.
 * @param {google.cloud.cloudsecuritycompliance.v1.CloudControl} request.cloudControl
 *   Required. The resource being created
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.create_cloud_control.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_CreateCloudControl_async
 */
  createCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|undefined, {}|undefined
      ]>;
  createCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  createCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  createCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('createCloudControl request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createCloudControl response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.createCloudControl(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.ICreateCloudControlRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('createCloudControl response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Updates a single CloudControl.
 * This method allows for partial updates of a Custom CloudControl resource.
 * Built-in CloudControls cannot be updated.
 *
 * - If an `update_mask` is provided, only the fields specified in the mask
 * will be updated.
 * - If no `update_mask` is provided, all fields present in the request's
 * `cloud_control` body will be used to overwrite the existing resource.
 *
 * A successful update will result in a new version of the CloudControl.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.protobuf.FieldMask} [request.updateMask]
 *   Optional. Field mask is used to specify the fields to be overwritten in the
 *   CloudControl resource by the update.
 *   The fields specified in the update_mask are relative to the resource, not
 *   the full request. A field will be overwritten if it is in the mask. If the
 *   user does not provide a mask then all fields present in the request will be
 *   overwritten. The fields that can be updated are:
 *   1. Display_name
 *   2. Description
 *   3. Parameters
 *   4. Rules
 *   5. ParameterSpec.
 * @param {google.cloud.cloudsecuritycompliance.v1.CloudControl} request.cloudControl
 *   Required. The resource being updated
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.update_cloud_control.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_UpdateCloudControl_async
 */
  updateCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|undefined, {}|undefined
      ]>;
  updateCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  updateCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest,
      callback: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  updateCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
          protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'cloud_control.name': request.cloudControl!.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('updateCloudControl request %j', request);
    const wrappedCallback: Callback<
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateCloudControl response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.updateCloudControl(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl,
        protos.google.cloud.cloudsecuritycompliance.v1.IUpdateCloudControlRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('updateCloudControl response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }
/**
 * Deletes a single Custom CloudControl, including all its
 * major and minor revisions.
 *
 * - This operation can only be performed on CloudControls with type `CUSTOM`.
 *   Built-in CloudControls cannot be deleted.
 * - The CloudControl cannot be deleted if any of its revisions are currently
 *   referenced by any Framework.
 * - This action is permanent and cannot be undone.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Name of the resource, in the format
 *   `organizations/{organization}/locations/{location}/CloudControls/{CloudControl}`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.delete_cloud_control.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_DeleteCloudControl_async
 */
  deleteCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|undefined, {}|undefined
      ]>;
  deleteCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCloudControl(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|null|undefined,
          {}|null|undefined>): void;
  deleteCloudControl(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'name': request.name ?? '',
    });
    this.initialize().catch(err => {throw err});
    this._log.info('deleteCloudControl request %j', request);
    const wrappedCallback: Callback<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|null|undefined,
        {}|null|undefined>|undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('deleteCloudControl response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls.deleteCloudControl(request, options, wrappedCallback)
      ?.then(([response, options, rawResponse]: [
        protos.google.protobuf.IEmpty,
        protos.google.cloud.cloudsecuritycompliance.v1.IDeleteCloudControlRequest|undefined,
        {}|undefined
      ]) => {
        this._log.info('deleteCloudControl response %j', response);
        return [response, options, rawResponse];
      }).catch((error: any) => {
        if (error && 'statusDetails' in error && error.statusDetails instanceof Array) {
          const protos = this._gaxModule.protobuf.Root.fromJSON(jsonProtos) as unknown as gax.protobuf.Type;
          error.statusDetails = decodeAnyProtosInArray(error.statusDetails, protos);
        }
        throw error;
      });
  }

 /**
 * Lists all Frameworks (both Built-in and Custom) available within a given
 * parent resource. This method supports pagination.
 * The latest major version of each Framework is returned.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 *   Only global location is supported.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of frameworks to return. The default value is
 *   `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   frameworks. Provide this token to retrieve the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listFrameworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listFrameworks(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse
      ]>;
  listFrameworks(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework>): void;
  listFrameworks(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      callback: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework>): void;
  listFrameworks(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework>,
      callback?: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.IFramework>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse|null|undefined,
      protos.google.cloud.cloudsecuritycompliance.v1.IFramework>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listFrameworks values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listFrameworks request %j', request);
    return this.innerApiCalls
      .listFrameworks(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.cloudsecuritycompliance.v1.IFramework[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksResponse
      ]) => {
        this._log.info('listFrameworks values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listFrameworks`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 *   Only global location is supported.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of frameworks to return. The default value is
 *   `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   frameworks. Provide this token to retrieve the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listFrameworksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listFrameworksStream(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listFrameworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listFrameworks stream %j', request);
    return this.descriptors.page.listFrameworks.createStream(
      this.innerApiCalls.listFrameworks as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listFrameworks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 *   Only global location is supported.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of frameworks to return. The default value is
 *   `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   frameworks. Provide this token to retrieve the next page of results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.cloudsecuritycompliance.v1.Framework|Framework}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.list_frameworks.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_ListFrameworks_async
 */
  listFrameworksAsync(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListFrameworksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.cloudsecuritycompliance.v1.IFramework>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listFrameworks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listFrameworks iterate %j', request);
    return this.descriptors.page.listFrameworks.asyncIterate(
      this.innerApiCalls['listFrameworks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.cloudsecuritycompliance.v1.IFramework>;
  }
 /**
 * Lists all CloudControls (both Built-in and Custom) available within a given
 * parent resource. This method supports pagination.
 * The latest major version of each CloudControl is returned.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of CloudControls to return. The default value
 *   is `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   CloudControls. Provide this token to retrieve the next page of results.
 *
 *   When paginating, parent provided to
 *   ListCloudControls request must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listCloudControlsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudControls(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse
      ]>;
  listCloudControls(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>): void;
  listCloudControls(
      request: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      callback: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>): void;
  listCloudControls(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>,
      callback?: PaginationCallback<
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
          protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse|null|undefined,
          protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>):
      Promise<[
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    this.initialize().catch(err => {throw err});
    const wrappedCallback: PaginationCallback<
      protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse|null|undefined,
      protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>|undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listCloudControls values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listCloudControls request %j', request);
    return this.innerApiCalls
      .listCloudControls(request, options, wrappedCallback)
      ?.then(([response, input, output]: [
        protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl[],
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest|null,
        protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsResponse
      ]) => {
        this._log.info('listCloudControls values %j', response);
        return [response, input, output];
      });
  }

/**
 * Equivalent to `listCloudControls`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of CloudControls to return. The default value
 *   is `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   CloudControls. Provide this token to retrieve the next page of results.
 *
 *   When paginating, parent provided to
 *   ListCloudControls request must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listCloudControlsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 */
  listCloudControlsStream(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudControls'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudControls stream %j', request);
    return this.descriptors.page.listCloudControls.createStream(
      this.innerApiCalls.listCloudControls as GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listCloudControls`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent resource name, in the format
 *   `organizations/{organization}/locations/{location}`.
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of CloudControls to return. The default value
 *   is `500`.
 *
 *   If you exceed the maximum value of `1000`, then the service uses the
 *   maximum value.
 * @param {string} [request.pageToken]
 *   Optional. A pagination token returned from a previous request to list
 *   CloudControls. Provide this token to retrieve the next page of results.
 *
 *   When paginating, parent provided to
 *   ListCloudControls request must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
 *   When you iterate the returned iterable, each element will be an object representing
 *   {@link protos.google.cloud.cloudsecuritycompliance.v1.CloudControl|CloudControl}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
 *   for more details and examples.
 * @example <caption>include:samples/generated/v1/config.list_cloud_controls.js</caption>
 * region_tag:cloudsecuritycompliance_v1_generated_Config_ListCloudControls_async
 */
  listCloudControlsAsync(
      request?: protos.google.cloud.cloudsecuritycompliance.v1.IListCloudControlsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = this._gaxModule.routingHeader.fromParams({
      'parent': request.parent ?? '',
    });
    const defaultCallSettings = this._defaults['listCloudControls'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {throw err});
    this._log.info('listCloudControls iterate %j', request);
    return this.descriptors.page.listCloudControls.asyncIterate(
      this.innerApiCalls['listCloudControls'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.cloudsecuritycompliance.v1.ICloudControl>;
  }
/**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

/**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified cloudControl resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} cloud_control
   * @returns {string} Resource name string.
   */
  cloudControlPath(organization:string,location:string,cloudControl:string) {
    return this.pathTemplates.cloudControlPathTemplate.render({
      organization: organization,
      location: location,
      cloud_control: cloudControl,
    });
  }

  /**
   * Parse the organization from CloudControl resource.
   *
   * @param {string} cloudControlName
   *   A fully-qualified path representing CloudControl resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromCloudControlName(cloudControlName: string) {
    return this.pathTemplates.cloudControlPathTemplate.match(cloudControlName).organization;
  }

  /**
   * Parse the location from CloudControl resource.
   *
   * @param {string} cloudControlName
   *   A fully-qualified path representing CloudControl resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudControlName(cloudControlName: string) {
    return this.pathTemplates.cloudControlPathTemplate.match(cloudControlName).location;
  }

  /**
   * Parse the cloud_control from CloudControl resource.
   *
   * @param {string} cloudControlName
   *   A fully-qualified path representing CloudControl resource.
   * @returns {string} A string representing the cloud_control.
   */
  matchCloudControlFromCloudControlName(cloudControlName: string) {
    return this.pathTemplates.cloudControlPathTemplate.match(cloudControlName).cloud_control;
  }

  /**
   * Return a fully-qualified cloudControlDeployment resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} cloud_control_deployment
   * @returns {string} Resource name string.
   */
  cloudControlDeploymentPath(organization:string,location:string,cloudControlDeployment:string) {
    return this.pathTemplates.cloudControlDeploymentPathTemplate.render({
      organization: organization,
      location: location,
      cloud_control_deployment: cloudControlDeployment,
    });
  }

  /**
   * Parse the organization from CloudControlDeployment resource.
   *
   * @param {string} cloudControlDeploymentName
   *   A fully-qualified path representing CloudControlDeployment resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromCloudControlDeploymentName(cloudControlDeploymentName: string) {
    return this.pathTemplates.cloudControlDeploymentPathTemplate.match(cloudControlDeploymentName).organization;
  }

  /**
   * Parse the location from CloudControlDeployment resource.
   *
   * @param {string} cloudControlDeploymentName
   *   A fully-qualified path representing CloudControlDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCloudControlDeploymentName(cloudControlDeploymentName: string) {
    return this.pathTemplates.cloudControlDeploymentPathTemplate.match(cloudControlDeploymentName).location;
  }

  /**
   * Parse the cloud_control_deployment from CloudControlDeployment resource.
   *
   * @param {string} cloudControlDeploymentName
   *   A fully-qualified path representing CloudControlDeployment resource.
   * @returns {string} A string representing the cloud_control_deployment.
   */
  matchCloudControlDeploymentFromCloudControlDeploymentName(cloudControlDeploymentName: string) {
    return this.pathTemplates.cloudControlDeploymentPathTemplate.match(cloudControlDeploymentName).cloud_control_deployment;
  }

  /**
   * Return a fully-qualified framework resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} framework
   * @returns {string} Resource name string.
   */
  frameworkPath(organization:string,location:string,framework:string) {
    return this.pathTemplates.frameworkPathTemplate.render({
      organization: organization,
      location: location,
      framework: framework,
    });
  }

  /**
   * Parse the organization from Framework resource.
   *
   * @param {string} frameworkName
   *   A fully-qualified path representing Framework resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromFrameworkName(frameworkName: string) {
    return this.pathTemplates.frameworkPathTemplate.match(frameworkName).organization;
  }

  /**
   * Parse the location from Framework resource.
   *
   * @param {string} frameworkName
   *   A fully-qualified path representing Framework resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFrameworkName(frameworkName: string) {
    return this.pathTemplates.frameworkPathTemplate.match(frameworkName).location;
  }

  /**
   * Parse the framework from Framework resource.
   *
   * @param {string} frameworkName
   *   A fully-qualified path representing Framework resource.
   * @returns {string} A string representing the framework.
   */
  matchFrameworkFromFrameworkName(frameworkName: string) {
    return this.pathTemplates.frameworkPathTemplate.match(frameworkName).framework;
  }

  /**
   * Return a fully-qualified frameworkDeployment resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} framework_deployment
   * @returns {string} Resource name string.
   */
  frameworkDeploymentPath(organization:string,location:string,frameworkDeployment:string) {
    return this.pathTemplates.frameworkDeploymentPathTemplate.render({
      organization: organization,
      location: location,
      framework_deployment: frameworkDeployment,
    });
  }

  /**
   * Parse the organization from FrameworkDeployment resource.
   *
   * @param {string} frameworkDeploymentName
   *   A fully-qualified path representing FrameworkDeployment resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromFrameworkDeploymentName(frameworkDeploymentName: string) {
    return this.pathTemplates.frameworkDeploymentPathTemplate.match(frameworkDeploymentName).organization;
  }

  /**
   * Parse the location from FrameworkDeployment resource.
   *
   * @param {string} frameworkDeploymentName
   *   A fully-qualified path representing FrameworkDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFrameworkDeploymentName(frameworkDeploymentName: string) {
    return this.pathTemplates.frameworkDeploymentPathTemplate.match(frameworkDeploymentName).location;
  }

  /**
   * Parse the framework_deployment from FrameworkDeployment resource.
   *
   * @param {string} frameworkDeploymentName
   *   A fully-qualified path representing FrameworkDeployment resource.
   * @returns {string} A string representing the framework_deployment.
   */
  matchFrameworkDeploymentFromFrameworkDeploymentName(frameworkDeploymentName: string) {
    return this.pathTemplates.frameworkDeploymentPathTemplate.match(frameworkDeploymentName).framework_deployment;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization:string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName).organization;
  }

  /**
   * Return a fully-qualified organizationLocation resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @returns {string} Resource name string.
   */
  organizationLocationPath(organization:string,location:string) {
    return this.pathTemplates.organizationLocationPathTemplate.render({
      organization: organization,
      location: location,
    });
  }

  /**
   * Parse the organization from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).organization;
  }

  /**
   * Parse the location from OrganizationLocation resource.
   *
   * @param {string} organizationLocationName
   *   A fully-qualified path representing OrganizationLocation resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationName(organizationLocationName: string) {
    return this.pathTemplates.organizationLocationPathTemplate.match(organizationLocationName).location;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.configStub && !this._terminated) {
      return this.configStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
        this.locationsClient.close().catch(err => {throw err});
      });
    }
    return Promise.resolve();
  }
}